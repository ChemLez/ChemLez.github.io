<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初学NIO之基本介绍</title>
      <link href="/2022/03/19/%E5%88%9D%E5%AD%A6NIO%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/03/19/%E5%88%9D%E5%AD%A6NIO%E4%B9%8B%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之前缀树</title>
      <link href="/2022/03/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%89%8D%E7%BC%80%E6%A0%91/"/>
      <url>/2022/03/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%89%8D%E7%BC%80%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>前缀树，又称为Trie树，是一种树形数据结构，可用于高效地存储和检索字符串<strong>数据集合</strong>中的键，常用于自动补完和拼写检查等应用场景。下面对是对前缀树节点的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordNetTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> end;</span><br><span class="line">    WordNetTree[] words = <span class="keyword">new</span> WordNetTree[<span class="number">26</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>end</code>代表当前节点是否为结尾；<code>words</code>代表每个节点中的集合，数组长度为26，代表每次创建一个<code>WordNetTree</code>节点时，都会在该节点内部创建一个长度为26的<code>WordNetTree</code>数组。</p><a id="more"></a><p>如果对单词<code>app</code>、<code>apple</code>、<code>apply</code>、<code>ben</code>采用前缀树进行存储，则该前缀树存储的单词可形象的表示为下面形式：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2022/03/18/qFNv6I.png" alt="前缀树示例结构"></p><p>如上图所示，每一个<code>WordNetTree</code>对象中，都包含长度为26的<code>WordNetTree</code>数组，数组中的下标<code>i</code>对应字母<code>a~z</code>，这里以小写字母为例。在存储<code>apple</code>和<code>apply</code>时，可以对相同前缀的字母存储时，复用其节点。同时，通过<code>end</code>值为<code>False</code>或者<code>True</code>，对该字符串进行判断——以<code>root</code>开始，当前节点结尾的字符串是否为完整字符串。</p><p>假设<code>root</code>节点为起始节点。那么对字符串插入，则有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入某一字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    WordNetTree start = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; word.length();++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = word.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(start.words[index] == <span class="keyword">null</span>) &#123; <span class="comment">// 当前位置为null，创建插入</span></span><br><span class="line">            start.words[index] = <span class="keyword">new</span> WordNetTree();</span><br><span class="line">        &#125;</span><br><span class="line">        start = start.words[index];</span><br><span class="line">    &#125;</span><br><span class="line">    start.end = <span class="keyword">true</span>; <span class="comment">// 代表当前树的结尾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数的主要逻辑是，遍历该字符串中的每个字符，通过该<strong>字符</strong>定位到<code>WordNetTree</code>中的下标位置（下标位置和字符做一一对应的映射关系）。如果当前位置的对象为<code>null</code>，那么创建新的节点对象，用于标记当前<code>index</code>位置的对象数组，并将指针移动到当前字符位置，用于定位下一个字符位置。当遍历完成整个字符串时，将最后一个位置的<code>end</code>标记为<code>True</code>，表明当前结尾的字符串为完整字符串。</p><p>那么对字符串进行搜索时，则有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找某一字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    WordNetTree start = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; word.length();++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = word.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(start.words[index] == <span class="keyword">null</span>) &#123; <span class="comment">// 不存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        start = start.words[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start.end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果，在搜索过程中，对象为<code>null</code>，则表明未存储当前字符串；在遍历完整个字符串时，返回<code>end</code>的值，如果<code>end</code>为<code>False</code>，表明尽管搜索到了当前字符串，但是该字符串只是某一字符串的前缀子串，并非为完整存储的字符串。</p><p>那么对字符串进行前缀匹配时，则有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寻找前缀为prefix的字符串是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    WordNetTree start = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; prefix.length();++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = prefix.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(start.words[index] == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        start = start.words[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面给出完整<code>Trie</code>树的数据结构定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WordNetTree root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> WordNetTree(); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入某一字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        WordNetTree start = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; word.length();++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = word.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(start.words[index] == <span class="keyword">null</span>) &#123; <span class="comment">// 当前位置为null，创建插入</span></span><br><span class="line">                start.words[index] = <span class="keyword">new</span> WordNetTree();</span><br><span class="line">            &#125;</span><br><span class="line">            start = start.words[index];</span><br><span class="line">        &#125;</span><br><span class="line">        start.end = <span class="keyword">true</span>; <span class="comment">// 代表当前树的结尾</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找某一字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        WordNetTree start = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; word.length();++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = word.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(start.words[index] == <span class="keyword">null</span>) &#123; <span class="comment">// 不存在</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            start = start.words[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start.end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找前缀为prefix的字符串是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        WordNetTree start = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; prefix.length();++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = prefix.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(start.words[index] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            start = start.words[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组类节点</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WordNetTree</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> end;</span><br><span class="line">        WordNetTree[] words = <span class="keyword">new</span> WordNetTree[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之建造者模式</title>
      <link href="/2021/08/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/08/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p>建造者模式：指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式称为建造者模式。</p><p>概念较为复杂，我们还是通过实例需求进行建造者模式的理解。</p><a id="more"></a><h3 id="二、需求"><a href="#二、需求" class="headerlink" title="二、需求"></a>二、需求</h3><p>这里顶一个电脑类，并且实例化电脑类的对象，并给出该对象的属性赋值。</p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><h4 id="3-1-版本一"><a href="#3-1-版本一" class="headerlink" title="3.1 版本一"></a>3.1 版本一</h4><p>通过直接创建出电脑类，并通过客户端进行赋值，创建出该对象，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line">    <span class="keyword">private</span> String memery;</span><br><span class="line">    <span class="keyword">private</span> String hd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略setter getter和toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================服务单/客户端=================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer c = <span class="keyword">new</span> Computer();</span><br><span class="line">        c.setCpu(<span class="string">"i7 7500u"</span>);</span><br><span class="line">        c.setMemery(<span class="string">"16g"</span>);</span><br><span class="line">        c.setGpu(<span class="string">"RTX2080t"</span>);</span><br><span class="line">        c.setHd(<span class="string">"1T机械"</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即：服务端(代码提供者)提供了<code>Computer</code>这个类，具体需要什么样的电脑交给了客户端自己去实现，根据自己的需求自己设定即可。</p><p>缺点：</p><ol><li>客户端，在实例化好产品的对象以后，必须为该对象的每一个属性赋值，这样对于客户端来说，太过麻烦。</li><li>违反了迪米特法则(一个类应该对自己依赖的类知道的越少越好，而这里却要自己去进行对象的赋值)；</li></ol><p>这相当于在现实中，去电脑城买电脑，商家给零件扔给你，你自己回家组装。</p><h4 id="3-2-版本二"><a href="#3-2-版本二" class="headerlink" title="3.2 版本二"></a>3.2 版本二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line">    <span class="keyword">private</span> String memery;</span><br><span class="line">    <span class="keyword">private</span> String hd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电脑建造者类，建造者类，必须关联电脑产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setCpu(<span class="string">"i7 7500u"</span>);</span><br><span class="line">        computer.setMemery(<span class="string">"32g"</span>);</span><br><span class="line">        computer.setGpu(<span class="string">"RTX2080t"</span>);</span><br><span class="line">        computer.setHd(<span class="string">"1T机械"</span>);</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================服务端/客户端================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ComputerBuilder cb = <span class="keyword">new</span> ComputerBuilder();</span><br><span class="line">        Computer computer = cb.builder();</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前的优点：</p><ol><li>客户端需要一个产品时，直接向建造者要即可，建造者封装了创建电脑的”复杂”过程。</li></ol><p>目前的缺点：</p><ol><li>封装得太死了，无论客户端需求什么样的电脑，都只能采用这一种的配置进行使用。</li></ol><h4 id="3-3-版本三"><a href="#3-3-版本三" class="headerlink" title="3.3 版本三"></a>3.3 版本三</h4><p>继而改进，针对不同需求，我们需要创建不同的创造者，来分别生产不同配置的产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line">    <span class="keyword">private</span> String memery;</span><br><span class="line">    <span class="keyword">private</span> String hd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电脑建造者类，建造者类，必须关联电脑产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdviceComputerBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setCpu(<span class="string">"i7 7500u"</span>);</span><br><span class="line">        computer.setMemery(<span class="string">"32g"</span>);</span><br><span class="line">        computer.setGpu(<span class="string">"RTX2080t"</span>);</span><br><span class="line">        computer.setHd(<span class="string">"1T机械"</span>);</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleComputerBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setCpu(<span class="string">"i7 7500u"</span>);</span><br><span class="line">        computer.setMemery(<span class="string">"8g"</span>);</span><br><span class="line">        computer.setGpu(<span class="string">"RTX1060t"</span>);</span><br><span class="line">        computer.setHd(<span class="string">"1T机械"</span>);</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowComputerBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setCpu(<span class="string">"i7 7500u"</span>);</span><br><span class="line">        computer.setMemery(<span class="string">"2g"</span>);</span><br><span class="line">        computer.setGpu(<span class="string">"gtx940m"</span>);</span><br><span class="line">        computer.setHd(<span class="string">"500g机械"</span>);</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ============================服务端/客户端=============================</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AdviceComputerBuilder acb = <span class="keyword">new</span> AdviceComputerBuilder();</span><br><span class="line">        MiddleComputerBuilder mid = <span class="keyword">new</span> MiddleComputerBuilder();</span><br><span class="line">        LowComputerBuilder low = <span class="keyword">new</span> LowComputerBuilder();</span><br><span class="line">        <span class="comment">// 玩游戏</span></span><br><span class="line">        Computer c = acb.builder();</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        <span class="comment">// 开发</span></span><br><span class="line">        Computer c1 = mid.builder();</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        <span class="comment">// 办公</span></span><br><span class="line">        Computer c2 = low.builder();</span><br><span class="line">        System.out.println(c2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样根据不同的需求，给出不同的建造者类。</p><p>优点：</p><ol><li>可以根据客户端的不同需求，使用不同的建造者来生产产品</li></ol><p>缺点：</p><ol><li>多个不同的建造者中的代码，在重复！既然代码中出现了重复的代码，那么就能继续优化。</li><li>建造的过程不稳定，如果在某个建造者创建产品时，漏掉了一步，编译器也不会存在报错。(等于在组装电脑的时候少了某一个步骤，原因就是没有标准，这里标准就是要定义接口)</li></ol><h4 id="3-4-版本四"><a href="#3-4-版本四" class="headerlink" title="3.4 版本四"></a>3.4 版本四</h4><p>继而继续进行优化：</p><p>创建一个建造者接口，<strong>把制作产品的具体步骤，稳定下来！</strong></p><p>我们让建造者类，去实现建造者接口，接口中的方法步骤，类就必须都要实现，少实现一个抽象方法就会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line">    <span class="keyword">private</span> String memery;</span><br><span class="line">    <span class="keyword">private</span> String hd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setGpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMemery</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHd</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Computer <span class="title">computer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过接口 过程就会稳定下来</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowComputerBuilder</span> <span class="keyword">implements</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setCpu(<span class="string">"i7 7500u"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setGpu(<span class="string">"gtx940m"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setMemery(<span class="string">"2g"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setHd(<span class="string">"500g机械"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">computer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">省略了上面其他两种电脑的创建</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =========================================================</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只以低配版的电脑建造为例</span></span><br><span class="line">        ComputerBuilder c = <span class="keyword">new</span> LowComputerBuilder();</span><br><span class="line">        c.setCpu();</span><br><span class="line">        c.setGpu();</span><br><span class="line">        c.setHd();</span><br><span class="line">        c.setMemery();</span><br><span class="line">        Computer computer = c.computer();</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前这种方式，将电脑创建的过程稳定下来，因为我们让具体电脑的类去实现接口，而接口的功能是稳定的，要想使用这个类，必须要实现定义好的接口的全部方法。同时，如果客户端想要扩展电脑的种类，只需要实现ComputerBuilder接口即可，自己定义一个Builder。</p><p>优点：</p><p>建造者类中的建造过程是稳定的，不会漏掉某一步！当客户端需要扩展建造者时，也不会漏掉一步。</p><p>缺点：</p><ol><li>代码仍然存在重复</li><li>现在又变成了客户端自己去配置电脑(在客户端处，又要进行一系列的set方法)，又违反了迪米特法则。（相当于去配置电脑，虽然不需要亲自去组装–配置型号等问题，但是必须”指挥”装机者进行装机…）</li></ol><h5 id="3-5-最终版本"><a href="#3-5-最终版本" class="headerlink" title="3.5 最终版本"></a>3.5 最终版本</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line">    <span class="keyword">private</span> String memery;</span><br><span class="line">    <span class="keyword">private</span> String hd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setGpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMemery</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHd</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Computer <span class="title">computer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123; <span class="comment">// 作用是将指挥的过程从客户端中分离出来，交给服务端来实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">(ComputerBuilder cb)</span> </span>&#123;</span><br><span class="line">        cb.setCpu();</span><br><span class="line">        cb.setGpu();</span><br><span class="line">        cb.setMemery();</span><br><span class="line">        cb.setHd();</span><br><span class="line">        <span class="keyword">return</span> cb.computer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过接口 过程就会稳定下来</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowComputerBuilder</span> <span class="keyword">implements</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setCpu(<span class="string">"i7 7500u"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setGpu(<span class="string">"gtx940m"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setMemery(<span class="string">"2g"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setHd(<span class="string">"500g机械"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">computer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">省略了上面其他两种电脑的创建</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =========================================================</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只以低配版的电脑建造为例</span></span><br><span class="line">        ComputerBuilder c = <span class="keyword">new</span> LowComputerBuilder(); <span class="comment">// 设定需求</span></span><br><span class="line">        Director director = <span class="keyword">new</span> Director(); <span class="comment">// 这里相当于把需求告诉了指挥者，指挥者进行装机过程，该过程多客户端是不可见的，完成了封装</span></span><br><span class="line">        Computer computer = director.build(c);</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>创建对象的过程是稳定不变的(因为有ComputerBuilder接口来稳定过程)</li><li>创建对象的过程只写了一次，没有重复代码(指挥者完成)</li><li>当需要扩展指挥者的时候，不需要修改之前的代码，符合了开闭原则。</li></ol><h4 id="3-5-类图"><a href="#3-5-类图" class="headerlink" title="3.5 类图"></a>3.5 类图</h4><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/30/hY4DFP.png" alt="image-20210615200256245"></p><p><code>Builder</code>完成我们具体的需求，即创建我们所需的对象，但最后由<code>Director</code>指挥者设定具体的过程；它是通过<code>Builder</code>建立对象，<code>Director</code>来将指挥的过程从客户端中分离出来，交给服务端来实现。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>建造者与工厂模式的区别：</p><ul><li><p>工厂模式只需要一个简单的new，new出产品即可；</p></li><li><p>建造者更注重，在new出产品之后的，为产品属性赋值的过程；</p></li><li><p>建造者模式创建复杂的对象，由各种复杂的部件组成，工厂模式创建出来的对象都一样；</p></li><li></li></ul><p>从最后的代码改进中可以看出，<code>builder</code>用来定义对象的属性(定义对象的模板)，而<code>Director</code>将对对象进行属性的初始化，给对象进行装配。所以，当需要进行扩展时，只需要实现一个<code>builder</code>类，定义对象的属性模板，然后交给<code>Director</code>去进行初始化，完成对象的封装。</p><p><strong>Builder用来定义对象的模板，而Director用于将对象初始化，给对象进行装配。</strong>最终达到了，对象的创建和对象的属性装配进行了分离。使得不稳定的创建过程，达到了稳定的效果。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 建造者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈一谈对ThreadLocal的理解</title>
      <link href="/2021/08/22/%E8%B0%88%E4%B8%80%E8%B0%88%E5%AF%B9ThreadLocal%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2021/08/22/%E8%B0%88%E4%B8%80%E8%B0%88%E5%AF%B9ThreadLocal%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>最近看面经经常能看到面试官对<code>ThreadLocal</code>方面的提问，于是就去翻了翻<code>ThreadLocal</code>的源码，发现源码并不长，大概看了一通，能看出其中的七七八八，打算借此来梳理一下。PS：HashMap的源码能看明白，看这个源码也不是问题。</p><h4 id="一、基本认识"><a href="#一、基本认识" class="headerlink" title="一、基本认识"></a>一、基本认识</h4><p>点进源码，看见<code>ThreadLocal</code>是<code>java.lang</code>包下的类；在网上也看了看其他人对它的概括，加上自己对看完源码后对<code>ThreadLocal</code>的理解：</p><p>用于线程之间数据的隔离。简单说就是通过<code>ThreadLocal</code>来开辟一块区间存放数据，这个区间作为线程的本地线程存储，只有当前线程才能获取到这个数据，这个数据对其他线程是不可见的。</p><p>可以看到<code>ThreadLocal</code>的公有构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadLocal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是用来创建<code>ThreadLocal</code>对象，没有在其中做其他的工作。</p><p>平常用<code>ThreadLocal</code>最多的两个方法就是<code>set</code>、<code>get</code>两个方法；那我们来看一看这两个方法的源码。</p><a id="more"></a><h4 id="二、set方法探析"><a href="#二、set方法探析" class="headerlink" title="二、set方法探析"></a>二、set方法探析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在使用<code>set</code>方法时，能够看到它先通过<code>Thread</code>的静态方法，来获取到当前线程。这个很关键，因为后面的操作，都是基于当前线程进行的操作，这也是为什么ThreadLocal能够做到线程之间数据隔离的。具体如何做到的，还要继续往下面看。</p><p>获取到当前线程后，通过<code>getMap(t)</code>方法来获取到一个<code>ThreadLocalMap</code>类型的<code>map</code>对象；来，点进<code>getMap</code>方法看看里面是啥：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的是当前这个线程的属性——<code>threadLocals</code>，继续点进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>可以看到初始时，这个线程的该属性为<code>null</code>；现在先不管<code>ThreadLocalMap</code>具体是什么，只要明白该类可以由实例化的一个线程内部的属性指向ThreadLocalMap的实例即可。</p><p>下面的逻辑就比较简单了，如果<code>map</code>不为<code>null</code>，就能将<code>value</code>设置到<code>map</code>中，可以看见<code>key</code>是由当前的<code>ThreadLocal</code>对象作为的<code>key</code>；而值是由我们传递的<code>value</code>；如果为<code>null</code>，则进行<code>createMap</code>操作，从方法名也能看出，是先创建出这个<code>map</code>，然后后续再进行赋值的操作。</p><p>好了，可以看出，搞明白这个<code>ThreadLocalMap</code>是个啥，对我们很关键。那么下面我们继续看看<code>ThreadLocalMap</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Entry[] table;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">        Object value;</span><br><span class="line"></span><br><span class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">            <span class="keyword">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">        table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">        <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">        table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        setThreshold(INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只列出了该类的部分方法和属性，如果谈到其他的方法和属性，到时再列出来。</p><p>首先该类是<code>ThreadLocal</code>中的静态类，诶，那为什么<code>Thread</code>也能访问到呢？？别忘了，我们开头就提到<code>ThreadLocal</code>是<code>java.lang</code>包下的类，当然<code>ThreadLocalMap</code>同样是，而<code>Thread</code>也是，所以该类对<code>Thread</code>具有包可见性。</p><p>能够看到它其中一个属性为<code>Entry</code>继承了<code>WeakReference</code>，弱引用。也就是说正常情况下，<code>Entry</code>对象的生命周期只能存活到下一次垃圾收集为止。这里<code>Entry</code>是作为<code>ThreadLocalMap</code>中的<code>table</code>数组，也就是<code>map</code>用来散列的<code>table</code>；</p><p>通过其构造方法，能够看出去。将<code>table</code>设置为容量为16，然后通过<code>key</code>的<code>hash</code>来计算散列到的位置<code>i</code>；然后创建<code>Entry</code>节点设置到<code>table[i]</code>处，最后设定<code>table</code>此时的容量为1并设定阈值；设定阈值的方法就不继续看了，就是为了后续方便扩容的判断。到这里大致能看明白<code>ThreadLocalMap</code>的数据结构大致长什么样了；</p><p>再回到上面<code>createMap</code>方法处：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>ThreadLocalMap</code>，并以当前线程引用这个<code>Map</code>；同时，当前的ThreadLocal对象作为key，我们传入的value作为Entry节点的value。此时结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/22/hpMbnI.png" alt="1"></p><p>这个时候，我们再看一看当<code>map</code>已经存在时，调用<code>map.set(this,value)</code>时的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">    Entry[] tab = table; <span class="comment">// 首先引用当前ThreadLocalMap中的table</span></span><br><span class="line">    <span class="keyword">int</span> len = tab.length; <span class="comment">// 计算table的长度</span></span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>); <span class="comment">// 除留余数法 计算出关键字应该插入的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123; <span class="comment">// 发生冲突 进行探查/比较</span></span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123; <span class="comment">// 与当前探查的key相等直接替换 entry中的值 返回即可</span></span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123; <span class="comment">// 当前探查的key为Null 表明存在过期的entry，那么就开始在set的过程中清除这些过期的entry</span></span><br><span class="line">            replaceStaleEntry(key, value, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">    <span class="keyword">int</span> sz = ++size; <span class="comment">// hashtable中元素增加一个</span></span><br><span class="line">    <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold) <span class="comment">// 从当前插入位置探查</span></span><br><span class="line">        rehash(); <span class="comment">// rehash操作其中，包含删除旧条目及扩容操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是<code>hash</code>的插入方式，通过<code>hash</code>计算到索引的位置，也就是table中的位置，只是这里解决哈希冲突的方式是通过线性探查法进行冲突的解决(HashMap中是通过拉链法进行的解决)。</p><p>其中整个<code>for</code>循环的逻辑是，根据<code>hash</code>函数定位到关键字的位置后，如果当前<code>table[i]</code>上面存在了元素，那么表明可能发生了冲突<strong>或者</strong>就是同一个<code>key</code>，进入<code>for</code>循环中，一个一个判断是否插入的<code>key</code>和冲突的<code>key</code>相等，如果相等那就直接替换该<code>entry</code>上的<code>value</code>；</p><p>如果在探查过程中发现<code>table</code>中的<code>key</code>为null时：这块逻辑比较复杂，目前读源码理解的是，将过时的entry进行删除，用没有过时的key-value进行覆盖，目的是为了防止在后续线程探查解决冲突的时候，冲突的key在数组中是离散的并不是紧凑的；</p><p>最后当探查到一个不存在entry时，表明查找到了应该插入的位置，那么就新建一个<code>entry</code>节点，并将该<code>entry</code>节点设置到该位置上。下面是清除过期entry的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cleanSomeSlots</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        i = nextIndex(i, len);</span><br><span class="line">        Entry e = tab[i]; <span class="comment">// 当前的entry节点</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>) &#123; <span class="comment">// 如果key不为Null,但是value为Null</span></span><br><span class="line">            n = len;</span><br><span class="line">            removed = <span class="keyword">true</span>; <span class="comment">// 标记 存在清除过程</span></span><br><span class="line">            i = expungeStaleEntry(i); <span class="comment">// 移除这个过期的entry节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( (n &gt;&gt;&gt;= <span class="number">1</span>) != <span class="number">0</span>); <span class="comment">// 每次 除2 探查，采用启发式扫描探查过期的entry</span></span><br><span class="line">    <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、get方法探析"><a href="#三、get方法探析" class="headerlink" title="三、get方法探析"></a>三、get方法探析</h4><p>大致明白了<code>set</code>方法后，再看<code>get</code>方法会比较轻松。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread(); <span class="comment">// 获取到当前线程</span></span><br><span class="line">    ThreadLocalMap map = getMap(t); <span class="comment">// 获取当前线程的ThreadLocalMap</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>); <span class="comment">// 通过key获取到value</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的获取到当前线程，并且从当前线程中获取到ThreadLocalMap；我们之前看到ThreadLocalMap中<code>set</code>值时，是将ThreadLocal作为key，所以我们通过将<code>ThreadLocal</code>传入获取到<code>value</code>；其中具体的逻辑就不看了，和<code>set</code>差不多，就是通过关键字定位进行比较，线性探查法那一套逻辑。</p><h4 id="四、一些细节"><a href="#四、一些细节" class="headerlink" title="四、一些细节"></a>四、一些细节</h4><h5 id="4-1-ThreadLocalMap中的相关参数"><a href="#4-1-ThreadLocalMap中的相关参数" class="headerlink" title="4.1 ThreadLocalMap中的相关参数"></a>4.1 ThreadLocalMap中的相关参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The number of entries in the table.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>; <span class="comment">// table中初始容量为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The next size value at which to resize.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0；扩容的阈值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Set the resize threshold to maintain at worst a 2/3 load factor.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123; <span class="comment">// 装载因子为 2 / 3</span></span><br><span class="line">    threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-ThreadLocal中的hash问题"><a href="#4-2-ThreadLocal中的hash问题" class="headerlink" title="4.2  ThreadLocal中的hash问题"></a>4.2  ThreadLocal中的hash问题</h5><p>我们知道这里的<code>ThreadLocalMap</code>是通过计算关键字<code>key</code>的<code>hash</code>进行散列的，而<code>key</code>就是不同的<code>ThreadLocal</code>对象，所以看看系统是如何分配这些散列值的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =</span><br><span class="line">    <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>; <span class="comment">// 固定值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始时<code>ThreadLocal</code>存在一个final静态变量<code>HASH_INCREMENT</code>；每次实例化<code>ThreadLocal</code>时，都带调用<code>nextHashCode()</code>方法，继而调用原子类的<code>getAndAdd()</code>方法，即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123; <span class="comment">// delta -&gt; HASH_INCREMENT -&gt; 0x61c88647</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, delta);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以看到是通过<code>cas</code>操作，给每个<code>ThreadLocal</code>对象加上固定的值——<code>HASH_INCREMENT -&gt; 0x61c88647</code>；所以每个<code>ThreadLocal</code>对象的<code>hash</code>值是<code>0x61c88647</code>倍数；</p><h5 id="4-3-ThreadLocalMap的扩容操作"><a href="#4-3-ThreadLocalMap的扩容操作" class="headerlink" title="4.3 ThreadLocalMap的扩容操作"></a>4.3 ThreadLocalMap的扩容操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Double the capacity of the table.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Entry[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldLen = oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> newLen = oldLen * <span class="number">2</span>; <span class="comment">// 两倍扩容</span></span><br><span class="line">    Entry[] newTab = <span class="keyword">new</span> Entry[newLen];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLen; ++j) &#123; <span class="comment">// 进行节点的搬迁</span></span><br><span class="line">        Entry e = oldTab[j]; </span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// entry不为空进行搬迁</span></span><br><span class="line">            ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123; <span class="comment">// 如果key 为null，表示过期</span></span><br><span class="line">                e.value = <span class="keyword">null</span>; <span class="comment">// Help the GC</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>); <span class="comment">// 重新根据hash计算散列的位置</span></span><br><span class="line">                <span class="keyword">while</span> (newTab[h] != <span class="keyword">null</span>) <span class="comment">// 发生冲突，线性探查位置</span></span><br><span class="line">                    h = nextIndex(h, newLen);</span><br><span class="line">                newTab[h] = e;</span><br><span class="line">                count++; <span class="comment">// 计数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setThreshold(newLen); <span class="comment">// 设置新的阈值</span></span><br><span class="line">    size = count;</span><br><span class="line">    table = newTab; <span class="comment">// 新table代替旧table</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过注释也能看出，每次进行两倍的扩容。</p><h4 id="五、Thread-ThreadLocal-ThreadLocalMap三者之间的关系"><a href="#五、Thread-ThreadLocal-ThreadLocalMap三者之间的关系" class="headerlink" title="五、Thread/ThreadLocal/ThreadLocalMap三者之间的关系"></a>五、Thread/ThreadLocal/ThreadLocalMap三者之间的关系</h4><p>通过一张图进行说明：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/22/hpMTcd.png" alt="2"></p><p>上面表明两个线程，Thread-1，Thread-2；创建了三个ThreadLocal对象；每个<code>Thread</code>都有自己的<code>ThreadLocalMap</code>；而一个<code>ThreadLocal</code>对于一个<code>Thread</code>只能存放一个变量；所以每个线程的<code>ThreadLocalMap</code>中的<code>key</code>是不同的<code>ThreadLocal</code>；所以，看到<code>ThreadLocal</code>是每个线程可以共用的，但是由于相同的<code>ThreadLocal</code>是作为每个线程中独有的<code>ThreadLocalMap</code>中的<code>key</code>；所以，在不同的线程中，通过<code>ThreadLocal</code>获取到值不一样；<strong>是通过给线程设定独有的<code>ThreadLocalMap</code>来进行的数据隔离</strong>。</p><h4 id="六、简单的例子"><a href="#六、简单的例子" class="headerlink" title="六、简单的例子"></a>六、简单的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor pool = (ThreadPoolExecutor) Executors.newFixedThreadPool(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    ThreadLocal&lt;String&gt; threadLocal1 = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    ThreadLocal&lt;String&gt; threadLocal2 = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        threadLocal1.set(<span class="string">"张四"</span>);</span><br><span class="line">        threadLocal2.set(<span class="string">"李五"</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":"</span> + threadLocal1.get());</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":"</span> + threadLocal2.get());</span><br><span class="line">    &#125;,<span class="string">"Thread-1"</span>).start();</span><br><span class="line">    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":"</span> + threadLocal1.get());</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":"</span> + threadLocal2.get());</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        threadLocal1.set(<span class="string">"张四"</span>);</span><br><span class="line">        threadLocal2.set(<span class="string">"李五"</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":"</span> + threadLocal1.get());</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":"</span> + threadLocal2.get());</span><br><span class="line">    &#125;,<span class="string">"Thread-2"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">Thread-<span class="number">1</span>:张三</span><br><span class="line">Thread-<span class="number">1</span>:李四</span><br><span class="line">Thread-<span class="number">2</span>:<span class="keyword">null</span></span><br><span class="line">Thread-<span class="number">2</span>:<span class="keyword">null</span></span><br><span class="line">==========</span><br><span class="line">Thread-<span class="number">2</span>:张四</span><br><span class="line">Thread-<span class="number">2</span>:李五</span><br></pre></td></tr></table></figure><p>看到在<code>Thread-1</code>中设置的值，在<code>Thread-2</code>中并获取不到。</p><h4 id="七、ThreadLocalMap中的弱引用"><a href="#七、ThreadLocalMap中的弱引用" class="headerlink" title="七、ThreadLocalMap中的弱引用"></a>七、ThreadLocalMap中的弱引用</h4><p>可以看到<code>ThreadLocalMap</code>中的<code>Entry</code>节点继承了弱引用引用关系的<code>ThreadLocal</code>；也就是说<code>ThreadLocalMap</code>中的<code>key</code>是弱引用，当他不再关联强引用关系时，在下一次垃圾回收时，便会被回收；但是，其中的<code>value</code>是具有强引用关系的，因此会出现<code>key</code>为<code>null</code>，但是<code>value</code>不为<code>null</code>的情况，也就是说<code>entry</code>节点不为null，而强引用关系的<code>value</code>，它的生命周期同线程的生命周期，因此如果不手动设置为null，会造成内存泄露，继而会引发内存溢出。</p><p>在前面的<code>set</code>、<code>get</code>等方法中，也能看到，他们在遍历的时候，如果发现<code>key</code>为<code>Null</code>的情况，便会进行清除工作，即将<code>value</code>设置为<code>null</code>；</p><p>因此[<a href="https://zhuanlan.zhihu.com/p/102571059" target="_blank" rel="noopener">1</a>]：</p><p>由于Thread中包含变量ThreadLocalMap，因此ThreadLocalMap与Thread的生命周期是一样长，如果都没有手动删除对应key，都会导致内存泄漏。</p><p>但是使用<strong>弱引用</strong>可以多一层保障：弱引用ThreadLocal不会内存泄漏，对应的value在下一次ThreadLocalMap调用set(),get(),remove()的时候会被清除。</p><p>因此，ThreadLocal内存泄漏的根源是：由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用。</p><p><strong>正确使用方式：</strong></p><ul><li>每次使用完ThreadLocal都调用它的remove()方法清除数据；</li><li>将ThreadLocal变量定义成private static，这样就一直存在ThreadLocal的强引用，也就能保证任何时候都能通过ThreadLocal的弱引用访问到Entry的value值，进而清除掉 。</li></ul><h4 id="八、使用示例"><a href="#八、使用示例" class="headerlink" title="八、使用示例"></a>八、使用示例</h4><p>需求：在SpringBoot中自定义一个日志类，用于记录一个接口执行花费的时间。</p><p>思路：首先采用注解类，对于标志了注解的接口，统计该接口的一个请求所花费的时间；而对该接口的解析，通过设定过滤器，拦截每一个请求，检查请求的接口是否注解了该接口，如果采用了该注解那么就对该请求进行处理。</p><p>注解类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD) <span class="comment">// 作用在方法上</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">// 运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLog &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">desc</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; <span class="comment">// 类的描述信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日志拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogIntercepter</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 采用ThreadLocal来隔离每个请求接口的线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Long&gt; startTimeThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler; <span class="comment">// 执行的方法</span></span><br><span class="line">        Method method = handlerMethod.getMethod(); <span class="comment">// 获取方法对象</span></span><br><span class="line">        MyLog myLog = method.getAnnotation(MyLog<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 获取方法上的注解</span></span><br><span class="line">        <span class="keyword">if</span> (myLog != <span class="keyword">null</span>) &#123; <span class="comment">// 注解不为空</span></span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis(); <span class="comment">// 开始时间</span></span><br><span class="line">            startTimeThreadLocal.set(startTime); <span class="comment">// 设置执行的时间</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler; <span class="comment">// 方法拦截器</span></span><br><span class="line">        Method method = handlerMethod.getMethod(); <span class="comment">// 获得被拦截的方法对象</span></span><br><span class="line">        MyLog myLog = method.getAnnotation(MyLog<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 获取方法上的注解</span></span><br><span class="line">        <span class="keyword">if</span> (myLog != <span class="keyword">null</span>) &#123; <span class="comment">// 存在该注解 则需要进行日志记录</span></span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            Long startTime = startTimeThreadLocal.get();</span><br><span class="line">            <span class="keyword">long</span> optTime = endTime - startTime;</span><br><span class="line">            String requestURI = request.getRequestURI(); <span class="comment">// URI</span></span><br><span class="line">            String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();  <span class="comment">// 全类名.方法名</span></span><br><span class="line">            String desc = myLog.desc(); <span class="comment">// 方法描述</span></span><br><span class="line">            System.out.println(<span class="string">"请求uri: "</span> + requestURI);</span><br><span class="line">            System.out.println(<span class="string">"请求方法名："</span> + methodName);</span><br><span class="line">            System.out.println(<span class="string">"方法描述："</span> + desc);</span><br><span class="line">            System.out.println(<span class="string">"方法执行时间："</span> + optTime + <span class="string">"ms"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加拦截器到配置中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个自动配置类，容器启动时，将MyLogAutoConfiguration注入到容器中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 想容器中注册新的拦截器</span></span><br><span class="line"><span class="comment">     * 这个拦截器的作用：统计加入MyLog注解中的方法一个执行周期内的花费的时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry: 被注册的拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyLogIntercepter()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/images/**"</span>, <span class="string">"/js/**"</span>, <span class="string">"/css/**"</span>, <span class="string">"/toLogin"</span>, <span class="string">"/login"</span>, <span class="string">"/bootstrap-3.3.7-dist/**"</span>, <span class="string">"/favicon.ico"</span>, <span class="string">"/bizhi.jpg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将自定义的过滤器进行注册，并设定拦截的路径；</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之适配器模式</title>
      <link href="/2021/07/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/07/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h4><p>概念：一个类的接口转换成客户端希望的另一个接口。适配器模式让那些接口不兼容的类可以一起工作。<strong>即根据已有的接口，生成想要的接口。</strong></p><p>先看下面这个小例子体会一下适配器模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 符合开闭原则，源代码没有进行修改</span></span><br><span class="line"><span class="comment">     * 也符合组合优于继承原则(只是进行复用)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calculate calculate = <span class="keyword">new</span> Calculate(); <span class="comment">// 原来的接口是接两个</span></span><br><span class="line">        CalcAdapter calcAdapter = <span class="keyword">new</span> CalcAdapter(calculate); <span class="comment">// 做个适配器，可以接收三个</span></span><br><span class="line">        <span class="keyword">int</span> add = calcAdapter.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(add);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变化来了，客户想要计算三个数的和 - 采用适配器模式的方式，将接口转换成我们需要的形式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalcAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Calculate calculate; <span class="comment">// 复用其功能，采用组合的方式。组合需要被是适配的类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalcAdapter</span><span class="params">(Calculate calculate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.calculate = calculate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calculate.add(a, calculate.add(b, c)); <span class="comment">// 做到对功能的复用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h4><p>该章节中对适配器模式的讲解，采用Java编程思想的实例，进行介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upcase</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="comment">// 重写中，返回值可以进行向上转型</span></span><br><span class="line">        <span class="keyword">return</span> ((String) input).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownCase</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="comment">// 重写中，返回值可以进行向上转型</span></span><br><span class="line">        <span class="keyword">return</span> ((String) input).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Splitter</span> <span class="keyword">extends</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="comment">// 重写中，返回值可以进行向上转型</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(((String) input).split(<span class="string">"  "</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apply</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Processor p, Object s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Using Process: "</span> + p.name());</span><br><span class="line">        System.out.println(p.process(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"How are you"</span>;</span><br><span class="line">        Apply.process(<span class="keyword">new</span> Upcase(), s);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> DownCase(), s);</span><br><span class="line">        Apply.process(<span class="keyword">new</span> Splitter(), s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">=== 结果 ===</span><br><span class="line">Using Process: Upcase</span><br><span class="line">HOW ARE YOU</span><br><span class="line">Using Process: DownCase</span><br><span class="line">how are you</span><br><span class="line">Using Process: Splitter</span><br><span class="line">[How are you]</span><br></pre></td></tr></table></figure><p>该段代码中，主要是为了复用<code>Processor</code>类中的<code>process</code>方法，对process的方法采用三种不同实现方式，即设计三个不同的子类。</p><p>现在又发现了一个跟<code>process</code>功能相似的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waveform</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> counter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id = counter++;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"waveform"</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowPass</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cutoff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LowPass</span><span class="params">(<span class="keyword">double</span> cutoff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cutoff = cutoff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input; <span class="comment">// 对该input的 Dummy processing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HighPass</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cutoff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HighPass</span><span class="params">(<span class="keyword">double</span> cutoff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cutoff = cutoff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input; <span class="comment">// 对该input的 Dummy processing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BandPass</span> <span class="keyword">extends</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cutoff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BandPass</span><span class="params">(<span class="keyword">double</span> cutoff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cutoff = cutoff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Waveform <span class="title">process</span><span class="params">(Waveform input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input; <span class="comment">// 对该input的 Dummy processing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这段代码中，我们可以看到<code>Filter</code>和前面我们自己定义的<code>Processor</code>类似，同样的有三个子类也同<code>Processor</code>的子类。</p><p>此时，我们如果想要复用<code>Apply</code>的方法，参数却无法传入。因为，<code>Apply</code>参数接收的是<code>Processor</code>类及其子类。这个时候，你肯定想，那就直接将<code>Filter</code>继承<code>Processor</code>类，让其成为子类不就好了？但是，不要忘记，<code>Filter</code>代码是别人的代码，我们无法对其进行修改。同时，即使进行了修改，那也违反了<strong>开闭原则</strong>。</p><p>所以我们需要用接口的方式，让Apply接收的是接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">process</span><span class="params">(Object input)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProcess</span> <span class="keyword">implements</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getSimpleName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upcase</span> <span class="keyword">extends</span> <span class="title">AbstractProcess</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="comment">// 重写中，返回值可以进行向上转型</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ((String) input).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownCase</span> <span class="keyword">extends</span> <span class="title">AbstractProcess</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="comment">// 重写中，返回值可以进行向上转型</span></span><br><span class="line">        <span class="keyword">return</span> ((String) input).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Splitter</span> <span class="keyword">extends</span> <span class="title">AbstractProcess</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(Object input)</span> </span>&#123; <span class="comment">// 重写中，返回值可以进行向上转型</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(((String) input).split(<span class="string">"  "</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面中，我们将Process设计成了接口，并且使用了一个AbstractProcess抽象类，实现这个接口，再用子类去继承这个抽象类。设计这个抽象类的原因是，子类如果直接实现<code>Process</code>接口，那么<code>name()</code>这个方法都是重复实现，所以直接使用<strong>抽象类</strong>进行该方法的实现，即对一些固定功能进行实现，再设计子类直接继承这个抽象类对<code>process</code>方法进行自己所需要的实现。所以也能看见，抽象类是对接口中固定功能的实现进行抽取，即定义出一些模板方法，这样子类就不需要进行重复实现了。</p><p>现在继续看Apply类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apply</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Processor p, Object s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Using Process: "</span> + p.name());</span><br><span class="line">        System.out.println(p.process(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时接收的参数Process是接口，表明只要是实现了该接口的类及其实现类的子类都能被传入。那么我们该如何传入这个参数呢？即采用适配器模式。设计一个适配器去实现该接口，将被适配的类和适配器进行关联，而适配器作为接口的具体的实现，这样适配器就能够被作为参数进行传入，而具体使用的是被适配类的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterAdapter</span> <span class="keyword">implements</span> <span class="title">Processor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Filter filter; <span class="comment">// 和被适配的对象产生关联关系</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FilterAdapter</span><span class="params">(Filter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filter = filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filter.name();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        Waveform process = filter.process((Waveform) input); <span class="comment">// 真正调用的process方法，还是所发现的类中的process方法；目的是让发现的类的process能够适配我们自己的process接口，目的是让接口复用；而不用再写一个接口</span></span><br><span class="line">        <span class="keyword">return</span> process;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们就可以直接复用<code>process</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"How are you"</span>;</span><br><span class="line">        <span class="comment">// 当调用process方法时，传入的是适配器，调用适配的process方法，最终是调用的Filter的process方法，而调用p.name()，最终也是调用的filter的filter.name()方法，这样就能让我们所要适配的类去使用之前已经实现的代码了</span></span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdapter(<span class="keyword">new</span> LowPass(<span class="number">1</span>)), <span class="keyword">new</span> Waveform());</span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdapter(<span class="keyword">new</span> HighPass(<span class="number">1</span>)), <span class="keyword">new</span> Waveform());</span><br><span class="line">        Apply.process(<span class="keyword">new</span> FilterAdapter(<span class="keyword">new</span> BandPass(<span class="number">1</span>)), <span class="keyword">new</span> Waveform());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">===结果===</span><br><span class="line">Using Process: LowPass</span><br><span class="line">waveform: [<span class="number">0</span>]</span><br><span class="line">Using Process: HighPass</span><br><span class="line">waveform: [<span class="number">1</span>]</span><br><span class="line">Using Process: BandPass</span><br><span class="line">waveform: [<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>适配器实现接口而没有继承类的原因是，如果使用继承，后面就不能再继承其它类了，而接口可以进行多实现，也可以看出接口比继承有着更宽松的规则(不仅可以是接口的实现类，其实现类的子类也能够作为参数进行传递)。</p><p>如果，我们不使用适配器，而是直接使用这个类会发生什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Filter lowPass = <span class="keyword">new</span> LowPass(<span class="number">1</span>);</span><br><span class="line">        System.out.println(lowPass.name());</span><br><span class="line">        System.out.println(lowPass.process(<span class="keyword">new</span> Waveform()));</span><br><span class="line">        Filter highPass = <span class="keyword">new</span> HighPass(<span class="number">1</span>);</span><br><span class="line">        System.out.println(highPass.name());</span><br><span class="line">        System.out.println(highPass.process(<span class="keyword">new</span> Waveform()));</span><br><span class="line">        Filter bandPass= <span class="keyword">new</span> BandPass(<span class="number">1</span>);</span><br><span class="line">        System.out.println(bandPass.name());</span><br><span class="line">        System.out.println(bandPass.process(<span class="keyword">new</span> Waveform()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无法使用Apply类提供的方法，明明所实现的都是一样的，可还需要多写一套代码，使用适配器，将需要被使用类的接口，转换成能够被适配的接口。</p><h4 id="三、使用步骤"><a href="#三、使用步骤" class="headerlink" title="三、使用步骤"></a>三、使用步骤</h4><p>自定义适配器类，适配器继承被适配的接口，自定义的适配器类中组合被适配的类，在实现的方法中调用被适配类的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 适配器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之开闭原则及迪米特法则</title>
      <link href="/2021/07/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
      <url>/2021/07/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h3 id="一、开闭原则"><a href="#一、开闭原则" class="headerlink" title="一、开闭原则"></a>一、开闭原则</h3><h4 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h4><p>开闭原则是设计模式中最重要也是最基本的原则，可以说其它的原则都是为了开闭原则进行服务的。</p><p>核心概念：</p><ol><li>一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。对抽象构建框架，用实现扩展细节。</li><li>当软件需要实现时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</li><li>编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。</li></ol><p>综合：对扩展新功能是开放的，对修改原有功能是关闭的。也就说，在对功能进行扩展时，是对原有的类上进行扩展(继承、接口设计等等)</p><a id="more"></a><h4 id="1-2-实例演示"><a href="#1-2-实例演示" class="headerlink" title="1.2 实例演示"></a>1.2 实例演示</h4><p>需求：商家可以卖不同类型的车以及各种促销活动。</p><p>对<code>Car</code>的类设计：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> louYou;</span><br><span class="line"><span class="comment">// 省略getter和setter及toString()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在对该类的正常使用，表明正常构造的一辆车。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(); </span><br><span class="line">        car.setBrand(<span class="string">"奔驰"</span>);</span><br><span class="line">        car.setColor(<span class="string">"black"</span>);</span><br><span class="line">        car.setLouYou(<span class="keyword">true</span>);</span><br><span class="line">        car.setPrice(<span class="number">6666666</span>);</span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在变化出现了。如果商家需要对，所有车进行打折、促销活动，在<code>原价格的基础上*0.8</code>。</p><p>此时，要符合开闭原则，就是对修改关闭，对扩展开放。所以，我们不能在源代码上进行修改，而是在对源代码不改变的基础上，进行类功能的扩展。所以，我们可以扩展出一个<code>DiscountCar</code>来继承Car，即对Car的功能的扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscountCar</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice()*<span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> DiscountCar(); <span class="comment">// 向上转型，调用方法，只和new 的对象有关</span></span><br><span class="line">        car.setBrand(<span class="string">"奔驰"</span>);</span><br><span class="line">        car.setColor(<span class="string">"black"</span>);</span><br><span class="line">        car.setLouYou(<span class="keyword">true</span>);</span><br><span class="line">        car.setPrice(<span class="number">6666666</span>);</span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>DiscountCar</code>是对源代码的扩展，而没有修改源代码，所以符合开闭原则。</p><h3 id="二、迪米特法则"><a href="#二、迪米特法则" class="headerlink" title="二、迪米特法则"></a>二、迪米特法则</h3><h4 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h4><p>迪米特法则也叫最少知道原则。即一个类，对于其他类，要知道的越少越好，只和朋友进行通信。</p><ol><li><p>一个对象应该对其他对象保持最少的了解</p></li><li><p>类与类的关系越密切，耦合度越大</p></li><li><p>迪米特法则(Demeter Principle)又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息。</p></li><li><p>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。 </p><p>具体看一看什么不是朋友。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">        A a = b.getA(); <span class="comment">// 此时a是局部变量就不是test方法中的朋友，不能直接使用a的方法</span></span><br><span class="line">        <span class="comment">// 如果要想使用a，该怎么办？</span></span><br><span class="line">        f1(a);<span class="comment">// 即将对其使用的逻辑再进行封装成一个方法，将其作为朋友传入。此时a就是f1中的朋友，可以对其直接使用</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">(A a)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 处理逻辑 此时a是f1的朋友，可以任意调用其方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> A <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-实例"><a href="#2-2-实例" class="headerlink" title="2.2 实例"></a>2.2 实例</h4><p>需求：给用户生产一台电脑供用户使用(只实现简单的关机功能)。</p><p>看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭程序"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭屏幕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"断电"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    <span class="comment">// 此时，这个Person对于Computer的细节就知道的太多了。实际意义是：让用户关个机，他自己需要做那么多步骤才能够关机</span></span><br><span class="line">    <span class="comment">// 对于Person，只需要知道，关机按钮在哪里就行了，不需要知道如何保存数据，如果关闭程序...</span></span><br><span class="line">    <span class="comment">// 这样的话，代码的复杂度就提升了，万一用户操作错误，就会出现错误</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.saveDate();</span><br><span class="line">        computer.killProcess();</span><br><span class="line">        computer.closeScreen();</span><br><span class="line">        computer.powerOff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将生产的电脑交给用户使用，但是对于用户来说，它知道的太多了，就是说这个用户拿到电脑时，要想对电脑关机，需要按下四个按钮才能将电脑关闭。</p><p>正确的设计，就是将上面的四个功能封装到一个接口中，交给用户这一个接口使用就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭程序"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeScreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭屏幕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">powerOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"断电"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接将上面的关机步骤进行封装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        saveDate();</span><br><span class="line">        killProcess();</span><br><span class="line">        closeScreen();</span><br><span class="line">        powerOff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.shutDown(); <span class="comment">// 直接点击关机按钮即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-注意事项和细节"><a href="#2-3-注意事项和细节" class="headerlink" title="2.3 注意事项和细节"></a>2.3 注意事项和细节</h4><ol><li><p>迪米特法则的核心是降低类之间的耦合。</p></li><li><p>但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系， 并不是要求完全没有依赖关系。</p></li></ol><p>其实迪米特法则讲究的就是一个封装。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 开闭原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/2021/05/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/05/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>本文用来记录工厂模式中，简单工厂、工厂方法和抽象工厂。</p><h3 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/30/hYfyAP.png" alt="image-20210710144613164"></p><p>上图中，每个功能可以看成一个模块，每个模块要想能正常、更好的使用，一定也会依赖其他的模块，所以需要满足：</p><ul><li>每个模块负责自己的职责(单一职责)，各个模块之间通过接口隔离原则对外暴露功能的使用(接口隔离原则)。</li><li>每个模块都应该”承诺”自己对外暴露的接口是不变的。当模块内部发生变化时，其他模块是不需要知道的。这便是依赖于抽象而不依赖于实现(依赖倒置原则)</li><li>上层模块只需要知道下层模块暴露出的接口即可，至于实现细节不需要也不应该知道。(迪米特法则)</li></ul><p>为了对下面的实例代码进行演示，先明确两个概念：</p><ol><li>产品：对应着类。</li><li>抽象产品：抽象类或接口</li></ol><p>需求：</p><p>设计一个食物的项目，便于食物种类的扩展，且便于维护。</p><ol><li>食物存在各种各样的种类</li><li>客户端可以对其进行扩展自己所需要的食物。</li></ol><a id="more"></a><h3 id="二、简单工厂"><a href="#二、简单工厂" class="headerlink" title="二、简单工厂"></a>二、简单工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hamburger</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃汉堡包..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==================================服务端/客户端==========================================</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Food f = <span class="keyword">new</span> Hamburger();</span><br><span class="line">        f.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面中，存在抽象产品(Food)，而具体产品依赖于抽象产品(对其进行实现)。抽象产品和具体产品都是由服务端提供，而客户端就是直接对其使用。</p><p>现在考虑如果服务端代码设计成这样会出现什么问题：</p><p>上面的代码中，如果服务端作者，修改了具体产品的产品名(Hamburger -&gt; Hamburger2)，那么客户端也需要将所有的名称进行修改。</p><p>这种设计相当脆弱！因为，作者(服务端)修改了具体产品的类名，那么客户端代码，也要随之一起改变。这样服务器端代码，和客户端代码就是耦合的，这<strong>违反了迪米特法则！</strong></p><p>我们希望的效果是，无论服务器端代码如何修改，客户端代码都应该不知道，不用修改客户端的代码！</p><p>针对上面的问题，服务端一旦修改，客户端代码也要跟着修改！因此，服务单修改代码如下，使用简单工厂模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hamburger</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃汉堡包..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RiceNoodle</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃过桥米线..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoodFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Food <span class="title">getFood</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Food food = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                food = <span class="keyword">new</span> Hamburger();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                food = <span class="keyword">new</span> RiceNoodle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> food;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==============================服务端/客户端==============================================</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Food f = FoodFactory.getFood(<span class="number">1</span>);</span><br><span class="line">        f.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用这种方法，客户端获取具体的产品时，是通过工厂的获得的，即使服务端将产品的名字修改了，而客户端并不用进行修改，这样就达到一个解耦的目的。</p><p>简单工厂的优点：</p><ol><li>把具体产品的类型，从客户端代码中，解耦出来。</li><li>服务器端，如果修改了具体产品的类名，客户端不用关心。</li></ol><p>这符合了”面向接口编程”的思想，客户端对服务端暴露的接口进行使用(接口是趋于稳定的，不会随便修改名字之类的，前置中提到过每个模块都应该”承诺”自己对外暴露的接口是不变的)。</p><p>简单工厂的缺点：</p><ol><li>客户端不得不死记硬背那些常量与具体产品的映射，比如：1对应汉堡包，2对应米线。</li><li>如果具体产品特别多，则简单工厂，就会变得十分臃肿。比如有100个具体产品，则需要在简单工厂的swich中写出100个case!。</li><li>最重要的是，变化来了：客户端需要扩展<strong>具体产品</strong>的时候，势必要修改简单工厂中的代码(修改工厂中的映射关系)，这样便违反了”开闭原则”。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/30/hYf6tf.png" alt="image-20210615163848346"></p><h3 id="三、工厂方法"><a href="#三、工厂方法" class="headerlink" title="三、工厂方法"></a>三、工厂方法</h3><p>根据简单工厂中所提出的确定，接下来采用工厂方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hamburger</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃汉堡包..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RiceNoodle</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃过桥米线..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FoodFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Food <span class="title">getFood</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HamburgerFactory</span> <span class="keyword">implements</span> <span class="title">FoodFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hamburger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RiceNoodleFactory</span> <span class="keyword">implements</span> <span class="title">FoodFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RiceNoodle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bussiness</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taste</span><span class="params">(FoodFactory foodFactory)</span> </span>&#123;</span><br><span class="line">        Food food = foodFactory.getFood();</span><br><span class="line">        System.out.println(<span class="string">"评委1,品尝"</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">        System.out.println(<span class="string">"评委2,品尝"</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">        System.out.println(<span class="string">"评委3,品尝"</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ==============================服务端/客户端==============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从这里扩展出了新的功能（食物种类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lp</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃凉皮..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新功能对应的工厂 - 通过工厂获得具体产品(该新功能对应的工厂，用于生产具体产品)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LpFactory</span> <span class="keyword">implements</span> <span class="title">FoodFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Lp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下进行了替换，符合开闭原则</span></span><br><span class="line">        FoodFactory ff = <span class="keyword">new</span> LpFactory();</span><br><span class="line">        Food food = ff.getFood();</span><br><span class="line">        food.eat();</span><br><span class="line">        Bussiness.taste(ff);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码，工厂方法的思路：</p><p>每个抽象产品对应一个工厂接口，每个具体产品都有其对应的具体工厂的实现类对其进行返回。总的思路，工厂用于生产用户所需的产品，每个具体工厂实现抽象工厂的接口，即每个产品对应一个工厂实现，由这个具体的工厂实现返回所需的产品。</p><p>优点：</p><ol><li>仍然具有简单工厂的优点，服务器端修改了<strong>具体产品的类名</strong>以后，客户端不知道</li><li>当客户端需要<strong>扩展一个新的产品</strong>时，不需要修改作者原来的代码，只是<strong>扩展一个新的工厂</strong>而已。</li></ol><p>吐槽点：</p><ol><li>我们已经知道，简单工厂也好，工厂方法也好，都有一个优点，就是服务器端的具体产品类名变换了以后，客户端不知道，但是，反观我们现在的代码，客户端依然依赖于具体的工厂的类名啊！此时，如果服务器端修改了具体工厂的类名，那么客户端也要随之一起修改。</li></ol><p>解释：</p><p>工厂的名字，是视为接口的。作者有责任、义务，保证工厂的名字是稳定的。也就是说，虽然客户端依赖于工厂的具体类名，可是IT业内，所有工厂的名字都是趋向于稳定的(并不是说100%不会变的)。至少工厂类的名字，要比具体产品类的名字更加稳定！</p><ol start="2"><li>既然产品是我们自己客户端扩展出来的，那为什么不直接自己实例化呢？毕竟这个扩展出来的Lp这个产品，我们自己就是作者。我们想怎么改类名自己都能把控！为什么还要为自己制作的产品做工厂呢？</li></ol><p>解释：</p><p>因为，作者在开发功能时，不仅仅只会开发一些抽象产品、具体产品、对应的工厂，还会配套搭配一些提前做好的框架。比如：</p><p>在服务端有这么一个业务代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bussiness</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taste</span><span class="params">(FoodFactory foodFactory)</span> </span>&#123;</span><br><span class="line">        Food food = foodFactory.getFood();</span><br><span class="line">        System.out.println(<span class="string">"评委1,品尝"</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">        System.out.println(<span class="string">"评委2,品尝"</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">        System.out.println(<span class="string">"评委3,品尝"</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的框架中，只能传入工厂，因此在客户端我们对代码进行扩展时，也要给出对应的工厂对象，才能使用这个功能，同时我们扩展的功能可能也会被作为服务器端拿给别人使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// === 客户端 扩展出来的功能=== </span></span><br><span class="line"><span class="comment">// 从这里扩展出了新的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lp</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃凉皮..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新功能对应的工厂 - 通过工厂获得具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LpFactory</span> <span class="keyword">implements</span> <span class="title">FoodFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Lp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//        FoodFactory ff = new RiceNoodleFactory();</span></span><br><span class="line">        <span class="comment">//        Food food = ff.getFood();</span></span><br><span class="line">        <span class="comment">//        food.eat();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下进行了替换，符合开闭原则</span></span><br><span class="line">        FoodFactory ff = <span class="keyword">new</span> LpFactory();</span><br><span class="line">        Food food = ff.getFood();</span><br><span class="line">        food.eat();</span><br><span class="line">        Bussiness.taste(ff);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>现在制作出LpFatory，是为了能把LpFactory传入给Bussiness.taste方法，所以，必须定义这个LpFactory。那么为什么不从一开始，就让Bussiness.taste方法就直接接受Food参数呢？而不是现在的FoodFactory作为参数呢?</li></ol><p>解释：</p><p>如果是直接传入食物(具体产品)，那么在客户端是直接new出食物的对象传入，那么就又会回到，类名修改，违反迪米特法则，客户端也要跟着一起进行修改。</p><p>缺点：</p><p>如果有多个产品等级，那么工厂类的数量，就会爆炸式增长。(并且每个产品等级对应一个抽象产品和抽象工厂，一个具体产品又对应一个工厂类)</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/30/hYfr7t.png" alt="image-20210710152442599"></p><h4 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h4><p>针对工厂方法的问题，当有多个产品等级时(食物、饮料、甜品…)，工厂类就会有很多。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品 - 食物产品等级</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hamburger</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃汉堡包..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RiceNoodle</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃过桥米线..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FoodFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Food <span class="title">getFood</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HamburgerFactory</span> <span class="keyword">implements</span> <span class="title">FoodFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hamburger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RiceNoodleFactory</span> <span class="keyword">implements</span> <span class="title">FoodFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RiceNoodle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饮料产品等级</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cola</span> <span class="keyword">implements</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喝可乐..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IcePeak</span> <span class="keyword">implements</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"冰峰饮料..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DrinkFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Drink <span class="title">getDrink</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColaFactory</span> <span class="keyword">implements</span> <span class="title">DrinkFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Drink <span class="title">getDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cola();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IcePeakFactory</span> <span class="keyword">implements</span> <span class="title">DrinkFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Drink <span class="title">getDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IcePeak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bussiness</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taste</span><span class="params">(FoodFactory foodFactory)</span> </span>&#123;</span><br><span class="line">        Food food = foodFactory.getFood();</span><br><span class="line">        System.out.println(<span class="string">"评委1,品尝"</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">        System.out.println(<span class="string">"评委2,品尝"</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">        System.out.println(<span class="string">"评委3,品尝"</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==============================服务端/客户端==============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从这里扩展出了新的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lp</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃凉皮..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新功能对应的工厂 - 通过工厂获得具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LpFactory</span> <span class="keyword">implements</span> <span class="title">FoodFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Lp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/30/hYfch8.png" alt="image-20210517114346075"></p><p>这里多了一个<code>Drink</code>的产品等级，那么就需要多出具体产品的工厂实现类。</p><p>面对产品簇，使用工厂方法设计模式会造成类爆炸。上面的类图中存在两个产品等级，一个食物产品等级，一个饮料产品等级；其中一个产品等级对应一个工厂，一个工厂又存在多个产品工厂的实现类，用于生产产品。多一个产品等级，就会多出很多的类出来。</p><p>采用抽象工厂，将上面特定的工厂，进行抽象。即一个工厂能够生产多个产品等级(既能生产饮料，又能食物)。</p><p>代码改进如下：</p><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品 - 食物产品等级</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hamburger</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃汉堡包..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RiceNoodle</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃过桥米线..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123; </span><br><span class="line">    <span class="function">Food <span class="title">getFood</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Drink <span class="title">getDrink</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KFCFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123; <span class="comment">// 一个抽象工厂的实现类对应一个产品簇</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hamburger();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Drink <span class="title">getDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cola();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饮料产品等级</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cola</span> <span class="keyword">implements</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喝可乐..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IcePeak</span> <span class="keyword">implements</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"冰峰饮料..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SanQiFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RiceNoodle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Drink <span class="title">getDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IcePeak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将Food和Drink进行抽象成一个工厂。而不是单纯是只生产一个产品的工厂。这里将食物工厂和饮料工厂进行了合并，从而减少了类。即：一个工厂生成多个产品等级，而不是一个产品等级。</p><p>优点：</p><ol><li>仍然有简单工厂和工厂方法的优点</li><li>更重要的是，抽象工厂把工厂类的数量减少了！无论多少个产品等级，工厂就一套。从下面的抽象工厂的UML图中，可以看出，再多一个产品等级，工厂的数量却不会发生改变，多的就是那个产品等级自身的类，跟工厂数量无关。</li></ol><p>吐槽点:</p><ol><li>为什么三秦工厂时，就必须是米线搭配冰峰呢</li></ol><p>解释：</p><p>抽象工厂中，可以生产多个产品，这多个产品之间，必须有内在的联系。同一个工厂中的产品都属于同一个产品簇！不能把不同产品簇的产品进行混合使用(该设计模式的特点)。</p><p>缺点：</p><p>当产品等级发生变化时(增加产品等级、删除产品等级)，都要引起所有以前工厂代码的修改，这就违反了”开闭原则”。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/30/hYfWcQ.png" alt="image-20210517131940250"></p><p>在上面的图中，6mm螺丝和8mm螺母就形成了一个产品簇，而螺丝和螺母为各自的产品等级。这里6mmFactory只能生产6mm螺丝和6mm螺母。所以，他们之间的多个产品之间存在着必要的内在联系。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/30/hYf29S.png" alt="image-20210517114311388"></p><p><strong>产品簇</strong>：多个有内在联系，或者是有逻辑关系的产品，这里<code>Food</code>和<code>Drink</code>可以组成一组产品簇。</p><p><strong>产品等级</strong>：产品簇中的每一类产品，这里<code>Food</code>是一个产品等级，Drink是一个产品等级。</p><p>由下图说明：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/30/hYfR1g.png" alt="image-20210517132412560"></p><p>产品簇存在内在联系，这里中一个工厂5个get方法，分别返回洗衣机…笔记本。一个工厂有五个实现类，分别是格力、海尔、美的、华为、腾讯5个工厂实现类。</p><p>从图上也能看出，产品簇可以无限扩展，符合开闭原则，但是如果增加产品等级，就会去修改源代码，这样违反了开闭原则。也就是说，当产品等级发生变化时，就会引起原来抽象工厂的内部变化，这样就破坏了开闭原则。</p><p>结论：</p><ul><li>当产品等级比较固定时，可以考虑使用抽象工厂，否则不建议使用。</li><li>解决方法：通过<code>Spring</code>，动态工厂加反射。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/2021/05/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/05/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>本文用来介绍设计模式中的单例模式。</p><h4 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h4><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例， 并且该类只提供一个取得其对象实例的方法(静态方法)。</p><p>并且常见的单例设计模式共有八种：</p><ul><li>饿汉式(静态常量)</li><li>饿汉式(静态代码块的方式)</li><li>懒汉式(线程不安全)</li><li>懒汉式(线程安全，同步方法)</li><li>懒汉式(线程安全，同步代码块)</li><li>双重检查</li><li>静态内部类</li><li>枚举</li></ul><p>接下来，我们将逐一介绍这八种单例设计模式。</p><p>单例模式设计步骤如下：</p><ol><li>构造器私有化(防止new)</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法。</li></ol><a id="more"></a><h4 id="二、饿汉式"><a href="#二、饿汉式" class="headerlink" title="二、饿汉式"></a>二、饿汉式</h4><h5 id="2-1-饿汉式-静态常量"><a href="#2-1-饿汉式-静态常量" class="headerlink" title="2.1 饿汉式(静态常量)"></a>2.1 饿汉式(静态常量)</h5><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(<span class="string">"instance.hashCode="</span> + instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"instance1.hashCode="</span> + instance1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton(); <span class="comment">// 内部创建的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; <span class="comment">// 构造器私有化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="comment">// 外部调用的静态方法</span></span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====输出====</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">instance.hashCode=<span class="number">1554874502</span></span><br><span class="line">instance1.hashCode=<span class="number">1554874502</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>优点：这种写法比较简单，就是在类装载的时候就完成实例化，避免了线程同步问题。</p><p>缺点：在类装载的时候就完成实例化，没有达到 Lazy Loading 的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。</p><p> 这种方式基于<strong>classloder机制</strong>避免了多线程的同步问题(若多个线程同时调用getInstance()方法时，就本例来说，如果不存在SingleTon实例对象，则会触发类的初始化。已经存在类初始化，则直接会去调用)，不过，instance在类装载时就实例化，在单例模式中大多数都是调用 getInstance 方法， <strong>但是导致类装载的原因有很多种</strong>，可能是通过其它的方式不小心触发了类的加载从而造成了对象的创建。因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 就没有达到 lazy loading 的效果。</p><p>因此，<strong>这种单例模式可用，可能造成内存浪费。</strong></p><p>关于<strong>classloder机制</strong>避免了多线程的同步问题解释：当调用一个类的静态方法时，就会触发类加载(如果类未加载过则会对类进行加载)，而在类加载阶段中的初始化阶段，JVM负责对类的静态变量赋值(程序员设定的值)操作(执行<code>&lt;clinit&gt;()</code>方法的过程)。而执行<code>&lt;clinit&gt;()</code>方法时，JVM必须保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确地加锁同步，如果多个线程同时去初始化一个类，那么只会有其中一个线程去执行这个类的<code>&lt;clinit&gt;()</code>，其他线程都需要阻塞等待，直到活动线程执行完毕<code>&lt;clinit&gt;()</code>方法。所以在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton(); <span class="comment">// 内部创建的对象</span></span><br></pre></td></tr></table></figure><p>类加载时，<code>singleton</code>只会被赋值一次。</p><h5 id="2-2-饿汉式-静态代码块"><a href="#2-2-饿汉式-静态代码块" class="headerlink" title="2.2 饿汉式(静态代码块)"></a>2.2 饿汉式(静态代码块)</h5><p>采用静态代码的方式，是将new的方法直接方法在静态代码块中完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTonTest02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        SingleTon instance = SingleTon.getInstance();</span><br><span class="line">        SingleTon instance1 = SingleTon.getInstance();</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(<span class="string">"instance.hashCode="</span> + instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"instance1.hashCode="</span> + instance1.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleton;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        singleton = <span class="keyword">new</span> SingleTon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候(<code>&lt;clinit()&gt;</code>方法同时也执行static静态代码块)，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</p><p>结论：这种单例模式可用，但是可能造成内存浪费。</p><h4 id="三、懒汉式"><a href="#三、懒汉式" class="headerlink" title="三、懒汉式"></a>三、懒汉式</h4><h5 id="3-1-懒汉式——线程不安全实现方式"><a href="#3-1-懒汉式——线程不安全实现方式" class="headerlink" title="3.1 懒汉式——线程不安全实现方式"></a>3.1 懒汉式——线程不安全实现方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleTon == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleTon = <span class="keyword">new</span> SingleTon();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>1) 起到了 Lazy Loading 的效果，但是只能在单线程下使用。</p><p>2) 如果在多线程下，一个线程进入了 <code>if (singleton == null)</code>判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p><p>结论：在实际开发中，不要使用这种方式。</p><h5 id="3-2-懒汉式——线程安全-加同步方法"><a href="#3-2-懒汉式——线程安全-加同步方法" class="headerlink" title="3.2 懒汉式——线程安全 加同步方法"></a>3.2 懒汉式——线程安全 加同步方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>解决了线程安全问题</li><li>效率太低了，每个线程在想获得类的实例时候，执行 getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接 return 就行了。方法进行同步效率太低</li></ol><p>结论：在实际开发中，不推荐使用这种方式。</p><h5 id="3-3-懒汉式——线程安全-同步代码块"><a href="#3-3-懒汉式——线程安全-同步代码块" class="headerlink" title="3.3 懒汉式——线程安全 同步代码块"></a>3.3 懒汉式——线程安全 同步代码块</h5><p>错误演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个线程进入到<code>singleton==null</code>还未进行实例化对象时，另外一个线程可能也进入条件<code>singleton==null</code>，这样实例对象就会被覆盖，同时该种方式也是线程不安全的。</p><p>正确演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个同步代码块是无论singleTon有没有被实例化，都需要进入代码块才能确定，因此这种方式效率也较低，不推荐。</p><p>结论：不推荐使用。</p><h4 id="四、双重检查"><a href="#四、双重检查" class="headerlink" title="四、双重检查"></a>四、双重检查</h4><p>其实双重检查就是懒汉式线程不安全中同步代码块的变种，本质也是懒汉式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Double-Check 概念是多线程开发中常使用到的，如代码中所示，我们进行了两次 if (singleton == null)检查，这样就可以保证线程安全了。</li><li>这样，实例化代码只用执行一次，后面再次访问时，判断 if (singleton == null)，直接 return 实例化对象，也避免的反复进行方法同步。</li><li>线程安全；延迟加载；效率较高。</li><li>结论：在实际开发中，推荐使用这种单例设计模式</li></ol><p>关于使用valatile的原因，参见博客。<a href="https://www.cnblogs.com/zhuifeng523/p/11360012.html" target="_blank" rel="noopener">双重检查锁单例模式为什么要用volatile关键字?</a>。主要原因：</p><ol><li>指令重排序；2. new操作非原子操作，因此发生指令重排时，产生线程不安全的问题。</li></ol><p>new的关键字非原子操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> memory=allocate();<span class="comment">// 分配内存 相当于c的malloc</span></span><br><span class="line"><span class="number">2</span> ctorInstanc(memory) <span class="comment">//初始化对象</span></span><br><span class="line"><span class="number">3</span> instance=memory <span class="comment">//设置instance指向刚分配的地址</span></span><br><span class="line">上面的代码在编译器运行时，可能会出现重排序 从<span class="number">1</span>-<span class="number">2</span>-<span class="number">3</span> 排序为<span class="number">1</span>-<span class="number">3</span>-<span class="number">2</span></span><br></pre></td></tr></table></figure><p>比如线程A获取到锁，进入到同步代码块时，并且执行字节码文件中的对象创建时，执行的顺序是1-3-2，执行了1-3，即还未对对象进行初始化操作；而此时线程B刚进入方法执行到<code>if (singleton == null)</code>，那么此时由于线程A执行了3操作，有了地址，但是该对象是空的，而线程A拿到这个空对象进行返回，那这就发生了线程不安全的问题。</p><h4 id="五、静态内部类"><a href="#五、静态内部类" class="headerlink" title="五、静态内部类"></a>五、静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingleTon singleTon;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类，该类中有一个静态属性 SingleTon</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTonInstance</span> </span>&#123; <span class="comment">// 该类的加载 通过 getInstance方法进行加载</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingleTon INSTANCE = <span class="keyword">new</span> SingleTon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleTonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</li><li>静态内部类方式在SingleTon类被加载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletoInstance类，从而完成SingleTon的实例化。</li><li>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM 帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</li><li>优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</li></ol><p>结论：推荐使用。</p><p>静态内部类的优点是：外部类加载时并不需要立即加载内部类，内部类不被加载则不去初始化INSTANCE，故而不占内存。即当SingleTon第一次被加载时，并不需要去加载SingleTonInstance，只有当getInstance()方法第一次被调用时，才会去初始化INSTANCE,第一次调用getInstance()方法会导致虚拟机加载SingleTonInstance类，这种方法不仅能确保线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</p><h4 id="六、枚举方式"><a href="#六、枚举方式" class="headerlink" title="六、枚举方式"></a>六、枚举方式</h4><p>借助 JDK1.5 中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleToTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SingleTon instance = SingleTon.INSTANCE;</span><br><span class="line">        SingleTon instance1 = SingleTon.INSTANCE;</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line"></span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> SingleTon &#123;</span><br><span class="line">    INSTANCE; <span class="comment">// 属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用。</p><h4 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h4><ol><li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</li><li>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new。</li><li>单例模式使用的场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多(即：重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session 工厂等)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-接口隔离原则</title>
      <link href="/2021/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/"/>
      <url>/2021/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>本章用来叙述设计模式中的接口隔离原则。叙述方式同样采用实例演示的方式。</p><h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><p>接口隔离原则的核心：客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上。</p><h3 id="二、实例介绍"><a href="#二、实例介绍" class="headerlink" title="二、实例介绍"></a>二、实例介绍</h3><p>我们现在设计一个接口，接口中有5个功能，分别让B，D类实现这个接口；然后，我们再设计A，C类，其中A，C类分别依赖B，D类；A使用B类中的option1，option2，option3方法；C使用D类中option1，option4，option5方法。</p><a id="more"></a><p>将以上的情景展示成代码，就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口功能</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">option1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">option2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">option3</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">option4</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">option5</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B...o1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B...o2"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B...o3"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B...o4"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B...o5"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类D</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A...o1"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A...o1"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A...o1"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A...o1"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A...o1"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 interface1)</span> </span>&#123;</span><br><span class="line">        interface1.option1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(Interface1 interface1)</span> </span>&#123;</span><br><span class="line">        interface1.option2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(Interface1 interface1)</span> </span>&#123;</span><br><span class="line">        interface1.option3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类C</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 interface1)</span> </span>&#123;</span><br><span class="line">        interface1.option1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend4</span><span class="params">(Interface1 interface1)</span> </span>&#123;</span><br><span class="line">        interface1.option4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span><span class="params">(Interface1 interface1)</span> </span>&#123;</span><br><span class="line">        interface1.option5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中，我们可以看到类A只用到了接口中的1，2，3方法，但是上面的接口实现，却全部实现了；同样C类只使用了1，4，5方法，而依赖的D也实现了接口的全部方法。</p><p>现在将以上的类和接口呈现出UML图展示：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/25/gzQCzF.png" alt="1"></p><p>通过上面的图可以看到，</p><p> 类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法。其中B必须去实现4,5方法；D必须去实现2,3方法。</p><h3 id="三、接口隔离原则"><a href="#三、接口隔离原则" class="headerlink" title="三、接口隔离原则"></a>三、接口隔离原则</h3><p>按照接口隔离原则应当这样处理：</p><p>将接口 <strong>Interface1</strong>拆分为独立的几个接口(这里我们拆分成3个接口)，类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。将A,C公共使用的接口方法抽象成一个接口，各自不相交的部分再抽象各自成一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">option1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">option2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">option3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">option4</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">option5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Interface1</span>, <span class="title">Interface2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A...o1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A...o2"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A...o3"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Interface1</span>, <span class="title">Interface3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B...o1"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B...o4"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">option5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B...o5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 interface1)</span> </span>&#123;</span><br><span class="line">        interface1.option1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(Interface2 interface2)</span> </span>&#123;</span><br><span class="line">        interface2.option2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(Interface2 interface2)</span> </span>&#123;</span><br><span class="line">        interface2.option3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 interface1)</span> </span>&#123;</span><br><span class="line">        interface1.option1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend4</span><span class="params">(Interface3 interface3)</span> </span>&#123;</span><br><span class="line">        interface3.option4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span><span class="params">(Interface3 interface3)</span> </span>&#123;</span><br><span class="line">        interface3.option5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其UML类图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/25/gzQiM4.png" alt="2"></p><p>从类图中看出，A依赖使用到的方法只有1,2,3；C依赖使用到的方法只有1,4,5。其中A不用依赖接口2，C不用依赖接口2。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>在实例介绍代码一中，根据以上类图的改进原则：</p><ol><li>类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，如果接口 Interface1 对于类 A 和类 C来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法。</li><li>将接口 Interface1 拆分为独立的几个接口，类 A 和类 C <strong>分别</strong>与他们需要的接口建立依赖关系。也就是采用接口隔离原则。</li><li>接口 Interface1 中出现的方法，根据实际情况拆分为三个接口。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 接口隔离原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之原型模式</title>
      <link href="/2021/05/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/05/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>本章用来介绍设计模式中的原型模式，该模式也是设计模式中较为简单、也是比较常见的一种设计模式。同样给出场景及相应代码层层推进的方式来学习原型模式。</p><a id="more"></a><h4 id="一、场景"><a href="#一、场景" class="headerlink" title="一、场景"></a>一、场景</h4><p>假设现在公司内部要开发一款周报提交系统。周报需要填写的表单设计如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/19/g4XGDI.png" alt="1"></p><p>比如第一周我们填写了一份表单如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/19/g4X8KA.png" alt="2"></p><p>现在过了第二周，我们再填写一份表单，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/19/g4XlgH.png" alt="3"></p><p>仔细看这两份表单，有什么问题？是不是主要产生变化的，只有表单中被加粗的这三项(本周总结、下周计划、提交日期)，其它的几项是不是都不会怎么变动？如果，我们每周填写周报都要填写全部的项，是不是显得很虎？所以，我们的需求是能够保留上周填写的周报，在其基础上进行修改。</p><p>下面开始进行代码的模拟及步步推进。</p><h4 id="二、代码模拟"><a href="#二、代码模拟" class="headerlink" title="二、代码模拟"></a>二、代码模拟</h4><p>为了方便模式的讲解，我们用一个<code>WeekReport</code>类，来模拟这份表单。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException, InterruptedException </span>&#123;</span><br><span class="line">        WeekReport reportFirst = <span class="keyword">new</span> WeekReport(<span class="string">"Chemlez"</span>, <span class="string">"IT部门"</span>, <span class="string">"看了一本书"</span>, <span class="string">"再看一本书"</span>, <span class="string">"Nothing"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        WeekReport reportSecond = <span class="keyword">new</span> WeekReport(<span class="string">"Chemlez"</span>, <span class="string">"IT部门"</span>, <span class="string">"又看完了一本书"</span>, <span class="string">"看两本书"</span>, <span class="string">"Nothing"</span>, <span class="keyword">new</span> Date(<span class="keyword">new</span> Date().getTime() + <span class="number">7</span> * <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>));</span><br><span class="line">        System.out.println(reportFirst);</span><br><span class="line">        System.out.println(reportSecond);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该类用来模拟周报 不使用Cloneable接口就要重复输入很多内容</span></span><br><span class="line"><span class="comment"> * 下面是使用Cloneable接口进行原型模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeekReport</span>  </span>&#123; <span class="comment">// 该方式是浅拷贝，如果其中包含引用，将引用一并进行拷贝</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> String emp;</span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="keyword">private</span> String plain;</span><br><span class="line">    <span class="keyword">private</span> String suggestion;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeekReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeekReport</span><span class="params">( String emp, String summary, String plain, String suggestion, Date date)</span> </span>&#123;</span><br><span class="line">        ++id;</span><br><span class="line">        <span class="keyword">this</span>.emp = emp;</span><br><span class="line">        <span class="keyword">this</span>.summary = summary;</span><br><span class="line">        <span class="keyword">this</span>.plain = plain;</span><br><span class="line">        <span class="keyword">this</span>.suggestion = suggestion;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略setter和getter方法，以及toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===输出===</span><br><span class="line">WeekReport&#123;name=<span class="string">'Chemlez'</span>, dept=<span class="string">'IT部门'</span>, summary=<span class="string">'看了一本书'</span>, plain=<span class="string">'再看一本书'</span>, suggestion=<span class="string">'Nothing'</span>, date=Tue May <span class="number">18</span> <span class="number">21</span>:<span class="number">18</span>:<span class="number">38</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">WeekReport&#123;name=<span class="string">'Chemlez'</span>, dept=<span class="string">'IT部门'</span>, summary=<span class="string">'又看完了一本书'</span>, plain=<span class="string">'看两本书'</span>, suggestion=<span class="string">'Nothing'</span>, date=Tue May <span class="number">25</span> <span class="number">21</span>:<span class="number">18</span>:<span class="number">38</span> CST <span class="number">2021</span>&#125;</span><br></pre></td></tr></table></figure><p>我们看到第二周周报，尽管第二周周报的大部分内容与第一周周报内容一致，但是仍然需要重复设置。</p><p>此时，我们便可以通过使用”原型模式”来解决这个问题。</p><p>市容</p><h5 id="2-1-代码一"><a href="#2-1-代码一" class="headerlink" title="2.1 代码一"></a>2.1 代码一</h5><p>现在，我需要保留上周需要填写的内容。从面向对象的角度出发，就是我们能够”克隆”出原来的对象，然后复用这个对象的属性，直接在”克隆”出的对象上进行修改我们需要修改的部分即可，不用修改的部分就不去改动它即可。</p><p>这里使用<code>Java</code>中提供的接口,<code>Cloneable</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个接口没有定义任何的方法，其实这只是一个标记接口，类似于<code>Serializable</code>这个接口。只是告诉<code>JVM</code>该类实例化的对象是可以被”克隆”的。</p><p>要想达到这个上面”克隆”的效果，我们需要重写该接口。即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeekReport</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123; <span class="comment">// 该方式是浅拷贝，如果其中包含引用，将引用一并进行拷贝</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String dept;</span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="keyword">private</span> String plain;</span><br><span class="line">    <span class="keyword">private</span> String suggestion;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeekReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeekReport</span><span class="params">(String name, String dept, String summary, String plain, String suggestion, Date date)</span> </span>&#123;</span><br><span class="line">        ++id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">        <span class="keyword">this</span>.summary = summary;</span><br><span class="line">        <span class="keyword">this</span>.plain = plain;</span><br><span class="line">        <span class="keyword">this</span>.suggestion = suggestion;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123; <span class="comment">// 将修饰符提升到public，可以在任何类下进行使用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略getter、setter以及toString()方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>clone</code>方法是直接复制内存中的二进制(重新开辟的一块内容空间用来存储)，效率更高。</p><p>这个时候我们就可以直接进行对象的克隆，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException,InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        WeekReport reportFirst = <span class="keyword">new</span> WeekReport(<span class="string">"Chemlez"</span>, <span class="string">"IT部门"</span>, <span class="string">"看了一本书"</span>, <span class="string">"再看一本书"</span>, <span class="string">"Nothing"</span>, <span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        WeekReport reportSecond = (WeekReport) reportFirst.clone();</span><br><span class="line">        reportSecond.setSummary(<span class="string">"又看了一本书"</span>);</span><br><span class="line">        reportSecond.setPlain(<span class="string">"看两本书"</span>);</span><br><span class="line">        Date date = reportSecond.getDate();</span><br><span class="line">        date.setTime(date.getTime() + <span class="number">7</span>*<span class="number">24</span>*<span class="number">3600</span>*<span class="number">1000</span>); <span class="comment">// 模拟过了一周</span></span><br><span class="line">        System.out.println(reportFirst);</span><br><span class="line">        System.out.println(reportSecond);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====输出====</span><br><span class="line">WeekReport&#123;name=<span class="string">'Chemlez'</span>, dept=<span class="string">'IT部门'</span>, summary=<span class="string">'看了一本书'</span>, plain=<span class="string">'再看一本书'</span>, suggestion=<span class="string">'Nothing'</span>, date=Tue May <span class="number">25</span> <span class="number">21</span>:<span class="number">19</span>:<span class="number">35</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">WeekReport&#123;name=<span class="string">'Chemlez'</span>, dept=<span class="string">'IT部门'</span>, summary=<span class="string">'又看了一本书'</span>, plain=<span class="string">'看两本书'</span>, suggestion=<span class="string">'Nothing'</span>, date=Tue May <span class="number">25</span> <span class="number">21</span>:<span class="number">19</span>:<span class="number">35</span> CST <span class="number">2021</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看出，我们将源对象进行克隆，在现有对象上修改我们想要修改(通过set和get方法)的属性即可，是不是就满足了我们所提出的需求？</p><p>不过细心的读着可能看出了，为什么我们的周报一的时间和周报二的时间是一样的了？难道克隆出来的对象和源对象指向同一个地址？</p><p>我们可以来测试一下，比较两个对象是否指向同一个地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(reportFirst==reportSecond);</span><br><span class="line">===输出===</span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>结果为false，所以可以看到两个对象并非指向同一个地址。其实，在上面我们也写到了，<code>clone</code>方法是直接复制内存中的二进制(<strong>重新开辟的一块内容空间用来存储</strong>)，所以两个对象并非指向同一片地址。而这种拷贝的方式是一种浅拷贝方式。请看下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/19/g4XQ8e.png" alt="4"></p><p>一图胜千言。对象是两个对象，但是对象中的属性，如果是引用类型，那么在拷贝的时候就会指向同一片堆内存空间，也就是说他们的引用类型的属性指向的是同一个对象，所以改动其中一个属性也会改动另外一个对象的属性。</p><p>那么朝着这个目的，我们让其引用类型属性指向对象也是各自的对象，从而互不干扰。</p><h5 id="2-2-代码二"><a href="#2-2-代码二" class="headerlink" title="2.2 代码二"></a>2.2 代码二</h5><p>我们改造的思路是，将其中的引用类型属性通过<code>get</code>获取后，再进行<code>clone</code>，然后再通过<code>set</code>方法传回到原来<code>clone</code>对象中。这么说有点绕，直接看代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        WeekReport reportFirst = <span class="keyword">new</span> WeekReport(<span class="string">"Chemlez"</span>, <span class="string">"IT部门"</span>, <span class="string">"看了一本书"</span>, <span class="string">"再看一本书"</span>, <span class="string">"Nothing"</span>, <span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        WeekReport reportSecond = (WeekReport) reportFirst.clone();</span><br><span class="line">        Date date = reportSecond.getDate();</span><br><span class="line">        Date dateCloned = (Date) date.clone();</span><br><span class="line">        reportSecond.setDate(dateCloned); <span class="comment">// 保证我们可以保留原有的值，并且在后续的改动中，不会干扰到原对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置新值</span></span><br><span class="line">        reportSecond.setSummary(<span class="string">"又读完了一本书"</span>);</span><br><span class="line">        reportSecond.setPlain(<span class="string">"看两本书"</span>);</span><br><span class="line">        Date dateC = reportSecond.getDate();</span><br><span class="line">        dateC.setTime(dateC.getTime() + <span class="number">7</span> * <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(reportFirst);</span><br><span class="line">        System.out.println(reportSecond);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====输出====</span><br><span class="line">WeekReport&#123;id=<span class="number">1</span>, name=<span class="string">'Chemlez'</span>, dept=<span class="string">'IT部门'</span>, summary=<span class="string">'看了一本书'</span>, plain=<span class="string">'再看一本书'</span>, suggestion=<span class="string">'Nothing'</span>, date=Tue May <span class="number">18</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">29</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">WeekReport&#123;id=<span class="number">1</span>, name=<span class="string">'Chemlez'</span>, dept=<span class="string">'IT部门'</span>, summary=<span class="string">'又读完了一本书'</span>, plain=<span class="string">'看两本书'</span>, suggestion=<span class="string">'Nothing'</span>, date=Tue May <span class="number">25</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">29</span> CST <span class="number">2021</span>&#125;</span><br></pre></td></tr></table></figure><p>通过将<code>date</code>进行克隆，返回的对象也是二进制复制，并且是新的内存空间。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/19/g4X1vd.png" alt="5"></p><p>一图胜千言。在代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date dateCloned = (Date) date.clone(); <span class="comment">// 对象clone，返回新的对象，即新开辟的内存空间</span></span><br><span class="line">reportSecond.setDate(dateCloned); <span class="comment">// 保证我们可以保留原有的值，并且在后续的改动中，不会干扰到原对象</span></span><br></pre></td></tr></table></figure><p>第二句通过set，给<code>reportSecond</code>重新设置了一个<code>Date</code>对象，并且保证了，其内容值与原来的值一样，这样既能够保证我们可以复用原来的属性值，也可保证我们修改其属性，不会影响到过去的属性值。</p><p>到了这里，代码的改动似乎已经很完美了，但是肯定有读者有会产生这么一个疑问，你现在对象中只有一个引用类型的属性，如果我给你成百上千的引用类型的属性你该怎么办，难道还去一个一个clone么？如果你属性中引用类型的属性中中又存在引用类型的属性怎么办？层层嵌套的引用类型，用这种逐个属性克隆再赋值的方式，岂不是要累死。</p><p>因此，就需要对其继续进行改进。</p><h5 id="3-3-代码三"><a href="#3-3-代码三" class="headerlink" title="3.3 代码三"></a>3.3 代码三</h5><p>代码二遗留下的来的问题是：如果一个类中包含的引用型对象过多，即如果对象的深度比较深，则深拷贝实现起来较为繁琐。</p><p>进一步的改进，我们还是需要实现<code>Cloneable</code>接口，重写<code>clone</code>克隆方法。即：在这里就需要修改<code>WeekReport</code>的<code>clone</code>方法。不过，在这里我们还需要将类去<strong>实现<code>Serializable</code>接口</strong>。<strong>目的：是将对象进行序列化，然后再将对象进行反序列化，当反序列化为对象时，此时得到的对象就是一种天然的深拷贝方式得来的对象。</strong></p><p>对象中无论存在多少的层级关系(引用关系)，将这个对象序列化到硬盘上(二进制，序列化就是天生的深拷贝)，在序列化的同时，也会将这种层级关系进行序列化。</p><h6 id="实现方式一"><a href="#实现方式一" class="headerlink" title="实现方式一"></a>实现方式一</h6><p>根据上面的思路，现在我们将对象进行序列化，然后再将对象进行反序列化，从而达到深拷贝的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一周</span></span><br><span class="line">        WeekReport reportFirst = <span class="keyword">new</span> WeekReport(<span class="string">"Chemlez"</span>, <span class="string">"IT部门"</span>, <span class="string">"看了一本书"</span>, <span class="string">"再看一本书"</span>, <span class="string">"Nothing"</span>, <span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二周</span></span><br><span class="line">        WeekReport reportSecond = (WeekReport) reportFirst.clone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改写值</span></span><br><span class="line">        Date date = reportSecond.getDate();</span><br><span class="line">        date.setTime(date.getTime() + <span class="number">7</span> * <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>); <span class="comment">// 日期修改</span></span><br><span class="line">        reportSecond.setSummary(<span class="string">"又对了一本书"</span>);</span><br><span class="line">        reportSecond.setPlain(<span class="string">"再读两本书"</span>);</span><br><span class="line">        System.out.println(reportFirst);</span><br><span class="line">        System.out.println(reportSecond);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeekReport</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String dept;</span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="keyword">private</span> String plain;</span><br><span class="line">    <span class="keyword">private</span> String suggestion;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeekReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeekReport</span><span class="params">(String name, String dept, String summary, String plain, String suggestion, Date date)</span> </span>&#123;</span><br><span class="line">        ++id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">        <span class="keyword">this</span>.summary = summary;</span><br><span class="line">        <span class="keyword">this</span>.plain = plain;</span><br><span class="line">        <span class="keyword">this</span>.suggestion = suggestion;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>); <span class="comment">// 输出流</span></span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(os); <span class="comment">// 对象的输出流</span></span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>); <span class="comment">// 将对象输出</span></span><br><span class="line">            oos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            InputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">            Object clone = ois.readObject(); <span class="comment">// 需要返回的对象，该对象 "深拷贝"</span></span><br><span class="line">            ois.close();</span><br><span class="line">            <span class="keyword">return</span> clone; <span class="comment">// 将反序列化的对象进行返回</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====结果输出====</span><br><span class="line">WeekReport&#123;name=<span class="string">'Chemlez'</span>, dept=<span class="string">'IT部门'</span>, summary=<span class="string">'看了一本书'</span>, plain=<span class="string">'再看一本书'</span>, suggestion=<span class="string">'Nothing'</span>, date=Wed May <span class="number">19</span> <span class="number">13</span>:<span class="number">33</span>:<span class="number">51</span> CST <span class="number">2021</span>&#125;</span><br><span class="line">WeekReport&#123;name=<span class="string">'Chemlez'</span>, dept=<span class="string">'IT部门'</span>, summary=<span class="string">'又对了一本书'</span>, plain=<span class="string">'再读两本书'</span>, suggestion=<span class="string">'Nothing'</span>, date=Wed May <span class="number">26</span> <span class="number">13</span>:<span class="number">33</span>:<span class="number">51</span> CST <span class="number">2021</span>&#125;</span><br></pre></td></tr></table></figure><p>从结果看出，我们达到了所要的要求。</p><p>但是从代码中，我们又看到了一种问题，就是我们将序列化的路径给写死了，这里又产生了耦合。又有读着肯定想到，那我们干脆使用当前路径下的相对路径不就好了？但是，你有没有想过在<code>Linux</code>和<code>Windows</code>的路径设置有很大的区别，其中<code>Linux</code>中就不存在盘符的级别。如果设定写死的路径，那么就根本没有达到跨平台的目的。那么，有什么好的方法呢？</p><p>答案是肯定有的。我们可以将上面序列化到硬盘，再从硬盘反序列化到内存的操作，全部放到内存层面上进行操作。<strong>即：将对象序列化到内存上，再从内存上进行反序列化操作。</strong></p><h6 id="实现方式二"><a href="#实现方式二" class="headerlink" title="实现方式二"></a>实现方式二</h6><p>这里就只给出<code>clone</code>方法，其他方法都一样就不再重复写出了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();<span class="comment">// 内存层面上输出流</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos); <span class="comment">// 对象的输出流</span></span><br><span class="line">        oos.writeObject(<span class="keyword">this</span>); <span class="comment">// 序列化对象，对象的所有属性层级关系会被序列化进行自动处理</span></span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = bos.toByteArray(); <span class="comment">// 从内存中取出数据</span></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        Object clone = ois.readObject(); <span class="comment">// 需要返回的对象，该对象 "深拷贝"</span></span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，代码已经完美解决场景提出的问题。</p><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><p>通过原型模式，创建对象新的方式，即用原型实例指定创建对象的种类，并且通过拷贝这些原型创建<strong>新的对象</strong>。创建出的对象，和原对象属性值相同，但是修改不会影响源对象。</p><p>又由于原型模式是通过<code>clone</code>的方式，所以它创建对象的方式会很快。所以当直接创建对象的代价比较大时，则采用这种模式。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-依赖倒置原则</title>
      <link href="/2021/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/"/>
      <url>/2021/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>本文用来讲述设计模式中的依赖倒置原则。通过介绍，场景，代码推进的方式进行一步步的讲解。</p><h4 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h4><p>依赖倒置原则(Dependence Inversion Principle)是指：</p><ol><li>高层模块不应该依赖底层模块，二者都应该依赖其抽象。这里调用者就是上层，被调用者就是下层。</li><li>抽象不应该依赖细节，细节应该依赖抽象。（抽象是指接口或者抽象类，细节是指具体实现及使用）</li><li><strong>依赖倒置的中心思想是面向接口编程</strong>。</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在 java 中，抽象指的是接口或抽象类，细节就是具体的实现类</li><li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</li><li><strong>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</strong></li></ol><a id="more"></a><h4 id="二、场景介绍"><a href="#二、场景介绍" class="headerlink" title="二、场景介绍"></a>二、场景介绍</h4><p>实现场景，一个人通过不同的通讯方式进行通信。例如，可以通过邮箱，通过微信，通过手机等等方式进行通信。</p><h4 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h4><h5 id="3-1-实现代码"><a href="#3-1-实现代码" class="headerlink" title="3.1 实现代码"></a>3.1 实现代码</h5><p>假设现在我们需要通过微信，短信，邮箱进行信息的传递。代码都较为简单，请先直接看代码，再进行代码的讲解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependenceInversionPrinciple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.getInfoByEmail(<span class="keyword">new</span> Email());</span><br><span class="line">        person.getInfoByMessage(<span class="keyword">new</span> Message());</span><br><span class="line">        person.getInfoByWeChat(<span class="keyword">new</span> WeChat());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfoByMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        message.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfoByEmail</span><span class="params">(Email email)</span> </span>&#123;</span><br><span class="line">        email.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfoByWeChat</span><span class="params">(WeChat weChat)</span> </span>&#123;</span><br><span class="line">        weChat.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 短信 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 邮箱 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 微信 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过 邮箱 传递信息</span><br><span class="line">通过 短信 传递信息</span><br><span class="line">通过 微信 传递信息</span><br></pre></td></tr></table></figure><p>通过上面的代码，我们实现了上面的场景描述。同时下图给出了类之间的关系。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/17/g2z37T.png" alt="1"></p><p>从图中可以看到，Person类依赖WeChat，Message，Email类。</p><p>如果我们的需求不变，这样写代码是没有什么问题的。但是如果有一天，我们的需求扩大了，不再满足上面的三种通信方式。此时，我还需要使用钉钉和QQ进行通行呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependenceInversionPrinciple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.getInfoByEmail(<span class="keyword">new</span> Email());</span><br><span class="line">        person.getInfoByMessage(<span class="keyword">new</span> Message());</span><br><span class="line">        person.getInfoByWeChat(<span class="keyword">new</span> WeChat());</span><br><span class="line">        person.getInfoByWeChat(<span class="keyword">new</span> QQ());</span><br><span class="line">        person.getInfoByWeChat(<span class="keyword">new</span> DingDing());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfoByMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        message.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfoByEmail</span><span class="params">(Email email)</span> </span>&#123;</span><br><span class="line">        email.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfoByWeChat</span><span class="params">(WeChat weChat)</span> </span>&#123;</span><br><span class="line">        weChat.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfoByDingDing</span><span class="params">(DingDing ding)</span> </span>&#123;</span><br><span class="line">        weChat.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfoByWeChat</span><span class="params">(QQ qq)</span> </span>&#123;</span><br><span class="line">        weChat.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 短信 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 邮箱 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 微信 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingDing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 钉钉 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QQ</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 QQ 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照上面的方式，我们是不是需要新增钉钉和QQ类，同时需要在Person类中去新增方法，那么这里就违反了设计模式中的<strong>开闭原则</strong>，当我们改动服务端代码时，客户端代码也不得不改动。而我们增加需求所要做到的就是，就在客户端不需要进行结构上的变化，达到对其功能的扩充。不然，以后是不是每新增一个需求就需要把客户端的代码拿来进行大刀阔斧一番？</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/17/g2zGAU.png" alt="2"></p><p>从上图中，我们看到上层模块(Person)依赖下层模块(WeChat,Message,Email)。如果我们在其中开辟一个中间层，让上层Person，无法感知到下层的存在，是不是要好些呢？这样说有些抽象，我们继续看代码改动。</p><h5 id="3-2-改进代码"><a href="#3-2-改进代码" class="headerlink" title="3.2 改进代码"></a>3.2 改进代码</h5><p>现在对3.1中的代码进行改进。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependenceInversionPrinciple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        IReceiver message = <span class="keyword">new</span> Message();</span><br><span class="line">        IReceiver WeChat = <span class="keyword">new</span> WeChat();</span><br><span class="line">        IReceiver Email = <span class="keyword">new</span> Email();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.getInfoByMessage(message);</span><br><span class="line">        person.getInfoByMessage(WeChat);</span><br><span class="line">        person.getInfoByMessage(Email);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfoByMessage</span><span class="params">(IReceiver iReceiver)</span> </span>&#123;</span><br><span class="line">        iReceiver.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 短信 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 邮箱 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChat</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 微信 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过 短信 传递信息</span><br><span class="line">通过 微信 传递信息</span><br><span class="line">通过 邮箱 传递信息</span><br></pre></td></tr></table></figure><p>继续看此时类之间的关系图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/17/g2z1BV.png" alt=""></p><p>我们看到Person从过去直接依赖WeChat、Message、Email现在只依赖IReceiver，它根本就感知不到其下层的模块变化。</p><p>如果，此时我们再新增钉钉，QQ的通信方式，只需要让这两个类去实现IReceiver接口，而Person类根本就不需要改动，就能实现新增的通信方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependenceInversionPrinciple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        IReceiver message = <span class="keyword">new</span> Message();</span><br><span class="line">        IReceiver weChat = <span class="keyword">new</span> WeChat();</span><br><span class="line">        IReceiver email = <span class="keyword">new</span> Email();</span><br><span class="line">        IReceiver qq = <span class="keyword">new</span> QQ();</span><br><span class="line">        IReceiver ding = <span class="keyword">new</span> DingDing();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.getInfoByMessage(message);</span><br><span class="line">        person.getInfoByMessage(weChat);</span><br><span class="line">        person.getInfoByMessage(email);</span><br><span class="line">        person.getInfoByMessage(qq);</span><br><span class="line">        person.getInfoByMessage(ding);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfoByMessage</span><span class="params">(IReceiver iReceiver)</span> </span>&#123;</span><br><span class="line">        iReceiver.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 短信 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 邮箱 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChat</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 微信 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingDing</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 钉钉 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QQ</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"通过 QQ 传递信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=====输出======</span><br><span class="line">通过 短信 传递信息</span><br><span class="line">通过 微信 传递信息</span><br><span class="line">通过 邮箱 传递信息</span><br><span class="line">通过 QQ 传递信息</span><br><span class="line">通过 钉钉 传递信息</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/17/g2zln0.png" alt="4"></p><p>我们服务端对需求的扩展根本就没有影响到客户端代码(Person)，这里的Person根本就没有增删代码。实现了上层和下层模块的解耦.这里的上层Person根本就没有感知到下层模块WeChat，…，QQ等。</p><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p>现在我们再来看一看依赖倒置的定义：</p><ol><li>现在再看是不是高层模块(Person)和底层模块(WeChat,..,QQ)都依赖其抽象，而不是直接的高层模块依赖其底层模块。这里细节是具体实现，它依赖着抽象(接口)。</li><li>核心是面向接口面层，这里的高层模块依赖的就是IRecevier接口。</li><li>如果违反了该原则，下层模块改动就要带动上层模块一起跟着动(3.1节中的实例代码)。</li></ol><p>使用及注意事项：</p><ol><li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.即子类上层应具有抽象类或接口</li><li>变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化。</li><li>继承时遵循里氏替换原则。</li></ol><p>依赖倒置体现在：在代码一中，是不是Person都依赖着WeChat，…，Email，箭头向下的；经过代码的优化处理，采取依赖倒置原则，是不是原来的箭头向下，即下层模块被依赖，而现在全都去实现其上层接口，即依赖着其接口，箭头向上反转了，所以<strong>依赖倒置由此而得名</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 依赖倒置原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-组合优于继承原则</title>
      <link href="/2021/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E4%BC%98%E4%BA%8E%E7%BB%A7%E6%89%BF%E5%8E%9F%E5%88%99/"/>
      <url>/2021/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E4%BC%98%E4%BA%8E%E7%BB%A7%E6%89%BF%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>本章用来讲述设计模式中的另一个原则——组合优于继承原则，又称为合成复用原则。</p><h4 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h4><p>该原则是尽量使用合成/聚合的方式，而不是使用继承。</p><p>上面一句话就是对该原则的核心，但单单看这么一句话还是显得过于枯燥与不知所云，下面我们还是结合具体的场景进行代码推进，对该原则进行讲解。</p><h4 id="二、场景"><a href="#二、场景" class="headerlink" title="二、场景"></a>二、场景</h4><p>假设我们需要设计这样一个集合，每次向里面加入元素时，<code>count</code>都加一。例如：</p><p>最初集合是空集合，此时我们向里面加入<code>&quot;a&quot;</code>，此时集合为<code>{&quot;a&quot;}</code>，那么此时<code>count = 1</code>；当加入<code>&quot;b&quot;,&quot;c&quot;</code>两个元素时，集合为<code>{&quot;a&quot;,&quot;b&quot;,&quot;c&quot;}</code>，此时<code>count=3</code>；此时再删除<code>&quot;a&quot;,&quot;c&quot;</code>两个元素，集合为<code>{&quot;b&quot;}</code>,<code>count</code>仍然等于<code>3</code>;最后再加入<code>&quot;d&quot;</code>，集合为<code>{&quot;b&quot;,&quot;d&quot;}</code>，<code>count=4</code>。</p><p>所以该场景是，不论中间是否删除元素，我们只统计加入到集合中的元素的次数，进行返回。</p><a id="more"></a><h4 id="三、代码演进"><a href="#三、代码演进" class="headerlink" title="三、代码演进"></a>三、代码演进</h4><p>根据上面的场景，我们开始一步步编写代码。</p><h5 id="3-1-代码一"><a href="#3-1-代码一" class="headerlink" title="3.1 代码一"></a>3.1 代码一</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySet01</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span>  <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (E e : c)</span><br><span class="line">            <span class="keyword">if</span> (add(e))</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，<code>HashSet</code>源码中，所有<code>add</code>的入口就是该方法<code>add</code>方法。</p><p>但是如果这么设计，出现的问题有：</p><ol><li>如果在新的jdk版本中，<code>HahsSet</code>突然多了一个元素加入集合的入口方法，例如<code>addSome</code>，这个方法是我们不可预知的。我们的<code>MySet01</code>根本没有重写新版本中出现的<code>addSome</code>方法。这样，在新版本中，我们的MySet也继承了addSome方法，当使用<code>addSome</code>方法添加元素时，根本不会去统计元素的数量。</li><li>我们重写了addAll方法，和add方法。在<code>HashSet</code>的所有方法中，难免有一些其他方法，会依赖<code>addAll</code>方法和<code>add</code>方法。如果我们就这样随便重写了<code>HashSet</code>类中的某些方法，就会导致其他依赖于这些方法的方法，容易出现问题，不好排查。</li></ol><p>那么为了避免以上的问题，肯定就会有人想到那我们自己定义两个方法，不重写<code>HashSet</code>中的这两个方法不就好了，说得很对，我们继续改写来看一看。</p><h5 id="3-2-代码二"><a href="#3-2-代码二" class="headerlink" title="3.2 代码二"></a>3.2 代码二</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySet02</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add2</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll2</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (E e : c)</span><br><span class="line">            <span class="keyword">if</span> (add(e))</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中，我们自己定义了两个方法—— add2和addAll2。此时这段代码看起来是解决了我们上面一段代码所遗留的问题，但是该问题又产生了两个新问题。</p><p>首先，如果用户需要用到该计数功能时，我们需要提供一份文档给用户，告诉他你需要调用add2和addAll2才能使用该功能，这种方式未免对用户太过于苛刻了。</p><p>以上这个问题还不是最致命的。现在就将产生的问题做一个总结：</p><ol><li>目前这种情况对用户要求过于苛刻，用户必须看类的API文档，看完了还要使用add2和addAll2这两个方法，不能出错。</li><li>更加致命的是，如果在未来的jdk版本中，HashSet恰恰多两个API，叫add2和addAll2，那么就又出现了代码一种的两个问题了。</li></ol><p>因此，继承应该就已经走到绝境了。这个时候，我们就要考虑到组合大于继承的原则了。</p><h5 id="3-3-代码三"><a href="#3-3-代码三" class="headerlink" title="3.3 代码三"></a>3.3 代码三</h5><p>针对代码二出现的问题，先做出如下改进：</p><ol><li>我们的MySet，再也不要去继承HashSet了。</li><li>取而代之，我们让MySet和HashSet发生关联关系(组合)。</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySet03</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;E&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">return</span> set.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        count += e.size();</span><br><span class="line">        <span class="keyword">return</span> set.addAll(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该段代码中，对于用户来说，完全隐藏了add和addAll细节，用户只管调用它们即可。哪怕在未来的JDK中，<code>HashSet</code>又增加了其他的add方法，但是用户只能调用我提供这两个add方法。所以，是不是此时组合的优势就体现出来了。</p><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p>通过代码演进这一节，我们看出了组合的优势。这时有人肯定会产生怀疑，组合既然这么好，我们干嘛还要继承呢？</p><p>难道以后都不能使用继承了吗？</p><p>难道以后都不能进行方法重写了吗？</p><p>非也！请看以下的情况。</p><p>如果父类作者，和子类的作者，不是同一个人。<strong>那么就不要使用继承</strong>，因为你不知道父类作者以后会对代码改动时，做出啥事，你两又沟通不上。因为，父类作者不知道，未来的子类，会重写自己的哪个方法；那么子类作者不知道，未来的父类，会加入什么新方法(和自己的产生冲突)。</p><p>如果父类作者和子类作者是同一个人，<strong>那么就可以随意使用继承了</strong>。因为，自己当然知道，每个方法都是什么作用，作者可以很好的控制父类和子类。</p><p>我们自己写代码，继承，重写，随便使用；如果我们仅仅是为了复用代码，而继承别人的类，难免会出现“沟通”上的问题，所以谨慎使用继承。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 组合优于继承原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单一职责原则</title>
      <link href="/2021/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
      <url>/2021/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>在对设计模式的学习中，首先需要了解、掌握设计模式的七大原则，这样后续对设计模式的学习才能够更加的轻松与透彻。本章用于总结设计模式中的单一职责原则，该原则也是比较容易理解的。</p><h4 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h4><p>对类来说的，<strong>即一个类应该只负责一项职责</strong>。如类 A 负责两个不同职责：职责 1，职责 2。当职责 1 需求变更而改变 A 时，可能造成职责 2 执行错误，所以需要将类 A 的粒度分解为 A1，A2。</p><h4 id="二、场景应用"><a href="#二、场景应用" class="headerlink" title="二、场景应用"></a>二、场景应用</h4><h5 id="2-1-场景一"><a href="#2-1-场景一" class="headerlink" title="2.1 场景一"></a>2.1 场景一</h5><p>该场景模拟交通工具使用场景。</p><p>目的：模拟交通工具的运输形式。</p><h6 id="反例代码"><a href="#反例代码" class="headerlink" title="反例代码"></a>反例代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Vehicle vehicle = <span class="keyword">new</span> Vehicle();</span><br><span class="line">        vehicle.run(<span class="string">"汽车"</span>);</span><br><span class="line">        vehicle.run(<span class="string">"摩托车"</span>);</span><br><span class="line">        vehicle.run(<span class="string">"飞机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">"在公路上运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">汽车在公路上运行</span><br><span class="line">摩托车在公路上运行</span><br><span class="line">飞机在公路上运行</span><br></pre></td></tr></table></figure><p>该方式<code>run</code>方法中，违反了单一职责原则(飞机也在公路上跑了)。</p><p>解决方案：根据不同的交通工具运行方法不同，分解成不同类即可。</p><h6 id="修改代码一"><a href="#修改代码一" class="headerlink" title="修改代码一"></a>修改代码一</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleExample02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RoadVehicle roadVehicle = <span class="keyword">new</span> RoadVehicle();</span><br><span class="line">        roadVehicle.run(<span class="string">"汽车"</span>);</span><br><span class="line">        WaterVehicle waterVehicle = <span class="keyword">new</span> WaterVehicle();</span><br><span class="line">        waterVehicle.run(<span class="string">"轮船"</span>);</span><br><span class="line">        AirVehicle airVehicle = <span class="keyword">new</span> AirVehicle();</span><br><span class="line">        airVehicle.run(<span class="string">"飞机"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoadVehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">"公路运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterVehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">"水中运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirVehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">"天空运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">汽车公路运行</span><br><span class="line">轮船水中运行</span><br><span class="line">飞机天空运行</span><br></pre></td></tr></table></figure><p>该方案严格遵守单一职责原则(每个类中只负责一项职能)，但是这样做改动较大，同时对客户端(Main)也进行了大改动。在功能、业务逻辑较为简单时，我们可以缩小单一职责原则的范围，可以将该职责落在方法上。</p><h6 id="修改代码二"><a href="#修改代码二" class="headerlink" title="修改代码二"></a>修改代码二</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Vehicle vehicle = <span class="keyword">new</span> Vehicle();</span><br><span class="line">        vehicle.runRoad(<span class="string">"汽车"</span>);</span><br><span class="line">        vehicle.runWater(<span class="string">"轮船"</span>);</span><br><span class="line">        vehicle.runAir(<span class="string">"飞机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runRoad</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>公路交通的相关逻辑</span></span><br><span class="line">        System.out.println(vehicle + <span class="string">"在公路上运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWater</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>水中交通的相关逻辑</span></span><br><span class="line">        System.out.println(vehicle + <span class="string">"在公路上运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAir</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>空中交通的相关逻辑</span></span><br><span class="line">        System.out.println(vehicle + <span class="string">"在公路上运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种修改方法没有对原来的类做大的修改，只是增加方法，这里虽然没有在类这个级别上遵守单一职责原则，但是在方法级别上，仍然是遵守单一职责。</p><h4 id="三、总结——单一职责原则注意事项和细节"><a href="#三、总结——单一职责原则注意事项和细节" class="headerlink" title="三、总结——单一职责原则注意事项和细节"></a>三、总结——单一职责原则注意事项和细节</h4><ol><li>降低类的复杂度，一个类只负责一项职责</li><li>提高类的可读性，可维护性</li><li>降低变更引起的风险</li><li>通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则(例如修改代码二)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单一职责原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx学习笔记及牛刀小试</title>
      <link href="/2021/05/10/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E7%89%9B%E5%88%80%E5%B0%8F%E8%AF%95/"/>
      <url>/2021/05/10/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E7%89%9B%E5%88%80%E5%B0%8F%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Nginx的安装"><a href="#一、Nginx的安装" class="headerlink" title="一、Nginx的安装"></a>一、Nginx的安装</h3><p>本次安装的环境为<code>centos7.0</code>的版本。</p><h4 id="1-1-pcre依赖包的相关安装"><a href="#1-1-pcre依赖包的相关安装" class="headerlink" title="1.1 pcre依赖包的相关安装"></a>1.1 pcre依赖包的相关安装</h4><ol><li><p>安装<code>pcre</code>压缩包中的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>压缩包解压并进入解压后的文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf pcre-8.37.tar.gz</span><br></pre></td></tr></table></figure></li><li><p><code>C++</code>方面的依赖(openssl、zlib、gcc等依赖)</p><p>因为<code>Nginx</code>依赖<code>C++</code>的编译环境，故需要安装<code>C++</code>方面的依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</span><br></pre></td></tr></table></figure></li><li><p><code>./configure</code></p><p>作用：是用来检测你的安装平台的目标特征的。比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，一般用来生成 <code>Makefile</code>，为下一步的编译做准备</p></li><li><p><code>make &amp;&amp; make install</code> </p><p>进行编译与安装</p></li></ol><a id="more"></a><h4 id="1-2-安装Nginx"><a href="#1-2-安装Nginx" class="headerlink" title="1.2 安装Nginx"></a>1.2 安装Nginx</h4><p>下载<btn><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">Nginx</a></btn>安装包后(为方便管理安装目录同<code>pcre</code>)，其安装步骤同上面的<code>1,2,4,5</code>；一路安装下来若没有报错则表明此时安装完成。安装完成后的目录，默认在<code>/usr/local/nginx</code>下。</p><p>之后进入<code>/usr/local/nginx/sbin/</code>启动服务启动服务，启用命令<code>./nginx</code>。几个常用的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">./nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">./nginx -s stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不重启nginx服务器，重加载配置文件</span></span><br><span class="line">./nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本号</span></span><br><span class="line">./nginx -v</span><br></pre></td></tr></table></figure><h4 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h4><p>因为<code>Nginx</code>默认监听的是<code>80</code>端口，故可以直接访问<code>http:ip</code>即可，例如装载在本机<code>Linux</code>系统中，则直接访问<code>http:localhost</code>，即可。若出现以下画面，则表明安装成功。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/01/13/sNRzWT.png" alt="2"></p><h3 id="二、配置文件说明"><a href="#二、配置文件说明" class="headerlink" title="二、配置文件说明"></a>二、配置文件说明</h3><p><code>Nginx</code>的配置文件在<code>/usr/local/nginx/conf/nginx.conf</code>中。配置文件中的内容包含三部分：</p><ol><li><p>全局块：配置服务器整体运行的配置指令。例如：<code>worker_processes 1</code>；处理并发数的配置，数字越大，并发处理量就越大(会受到硬件、软件等设备的制约)。</p><p>从配置文件开始到 <code>events</code> 块之间的内容，主要会设置一些影响 <code>nginx</code> 服务器整体运行的配置指令，主要包括配置运行 <code>Nginx</code> 服务器的用户（组）、允许生成的 <code>worker process</code> 数，进程 <code>PID</code> 存放路径、日志存放路径和类型以及配置文件的引入等。</p></li><li><p><code>events</code>块：影响<code>Nginx</code>服务器与用户的网络连接。例如：<code>worker_connections 1024</code>；支持的最大连接数为<code>1024</code>。</p><p><code>events</code> 块涉及的指令主要影响 <code>Nginx</code> 服务器与用户的网络连接，常用的设置包括是否开启对多 <code>work process</code> 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 <code>word process</code> 可以同时支持的最大连接数等。</p></li><li><p><code>http</code>块：包含两部分，分别为<code>http全局块</code>和<code>server</code>块。这算是 <code>Nginx</code> 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p><ul><li><p><code>http全局块</code></p><p><code>http</code> 全局块配置的指令包括文件引入、<code>MIME-TYPE</code> 定义、日志自定义、连接超时时间、单链接请求数上限等。</p></li><li><p><code>server</code>块：这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。</p><p>每个 <code>http</code> 块可以包括多个 <code>server</code> 块，而每个 <code>server</code> 块就相当于一个虚拟主机。</p><p>而每个 <code>server</code> 块也分为全局 <code>server</code> 块，以及可以同时包含多个 <code>locaton</code> 块。</p></li><li><p>全局<code>server</code>块：最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</p></li><li><p><code>location块</code>：一个 <code>server</code> 块可以配置多个 <code>location</code> 块。</p><p>这块的主要作用是基于 <code>Nginx</code> 服务器接收到的请求字符串（例如 <code>server_name/uri-string</code>），对虚拟主机名称（也可以是 <code>IP</code> 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行，进行负载均衡、反向代理以及动静分类等配置都涉及到<code>location</code>块。</p></li></ul></li></ol><h3 id="三、反向代理"><a href="#三、反向代理" class="headerlink" title="三、反向代理"></a>三、反向代理</h3><p><code>Nginx</code>最重要的功能之一就是反向代理，这一节会实操如何实现<code>Nginx</code>的反向代理操作，即对<code>Nginx</code>进行相关配置。</p><h4 id="3-1-正向代理"><a href="#3-1-正向代理" class="headerlink" title="3.1 正向代理"></a>3.1 正向代理</h4><p><code>Nginx</code>不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。</p><p>正向代理：如果把局域网外的 <code>Internet</code> 想象成一个巨大的资源库，则局域网中的客户端要访问<code>Internet</code>，则需要通过代理服务器来访问，这种代理服务就称为正向代理。即：需要在客户端配置代理服务进行指定网站访问。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/01/13/sNWCy4.png" alt="3"></p><p>如上图，客户端需要访问谷歌网站时，需要在客户端(浏览器端)进行配置，去访问代理服务器，再由代理服务器进行谷歌网站的访问。</p><h4 id="3-2-反向代理"><a href="#3-2-反向代理" class="headerlink" title="3.2 反向代理"></a>3.2 反向代理</h4><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器 IP 地址。即：对于用户而言，只知道代理服务器，而无法感知到真实服务器。<strong>暴露的是代理服务器地址，隐藏了真实服务器<code>IP</code>地址</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/01/13/sNWPOJ.png" alt="4"></p><h4 id="3-3-Nginx配置反向代理实验一"><a href="#3-3-Nginx配置反向代理实验一" class="headerlink" title="3.3 Nginx配置反向代理实验一"></a>3.3 Nginx配置反向代理实验一</h4><p>实现效果：使用<code>nginx</code>反向代理，访问106.15.65.210(代理服务器地址，Nginx服务器地址)，跳转到106.12.65.210:8999真实服务器上。</p><p>首先，在未配置反向代理前，访问106.15.65.210</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/01/13/sNRzWT.png" alt="2"></p><p>则上面直接访问的是<code>nginx</code>服务器地址(即为代理服务器)。</p><p>访问106.15.65.210:8999</p><p>现在看到访问路径(106.15.65.210)下，展示的<code>nginx</code>页面。</p><p>这里的使用反向代理能够做到的是：</p><p>访问106.15.65.210，真实访问的是106.15.65.210:8999，这里省略了域名操作，假设我们给106.15.65.210绑定了<code>www.123.com</code>，则直接访问的是106.15.65.210:8999.如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/01/13/sNWVFx.png" alt="7"></p><p>这里省略域名的绑定操作，我们直接访问106.15.65.210代理服务器地址，转发到后面真实<code>tomcat</code>服务器中。</p><ol><li>在<code>nginx</code>进行请求转发的配置(反向代理配置)</li></ol><p>只需要配置代理服务器地址(域名)，以及真实转发地址即可。</p><p>访问106.15.65.210，显示：</p><p>可以看到跳转到我们所配置的<code>tomcat</code>服务器，<code>106.15.65.210:8999</code>。如果没有生效，检查下是否是浏览器缓存的原因。</p><p>配置：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/01/13/sNWpSU.png" alt="6"></p><h4 id="3-4-Nginx配置反向代理实验二"><a href="#3-4-Nginx配置反向代理实验二" class="headerlink" title="3.4 Nginx配置反向代理实验二"></a>3.4 Nginx配置反向代理实验二</h4><p>实现效果：使用<code>Nginx</code>反向代理，根据访问的路径跳转到不同端口的服务器中。这里<code>Nginx</code>端口为默认的<code>80</code>端口。</p><p>访问<code>http://106.15.65.210/edu/</code> 直接跳转到<code>http://106.15.65.210:8080</code></p><p>访问<code>http://106.15.65.210/vod/</code>直接跳转到<code>http://106.15.65.210:8999</code></p><p>根据不同的访问路径，最终来到不同的服务器请求数据。</p><p>准备工作：</p><ol><li><p>准备两个<code>tomcat</code>服务器，一个<code>8080</code>端口,一个是<code>8999</code>端口。（如果用的是云服务器，开头端口权限以及防火墙设置）</p></li><li><p>创建文件夹和测试页面(只是用于区别根据访问路径的不同，请求的服务器不同)</p><p>即在<code>8080</code>端口的<code>tomcat</code>服务器下的<code>webapps</code>中创建一个<code>edu</code>文件夹，创建一个<code>index.html</code>页面，内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>tomcat8.5.9<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在在<code>8999</code>端口的<code>tomcat</code>服务器下的<code>webapps</code>中创建一个<code>vod</code>文件夹，创建一个<code>index.html</code>页面,内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>tomcat9<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，分别访问<code>106.15.65.210:8080/edu/</code>和<code>106.15.65.210:8080/vod/</code>时，页面分别显示</p><p><code>tomcat8.5.9</code>及<code>tomcat9</code></p></li></ol><p><code>Nginx</code>配置：</p><p><strong>注意：</strong>在配置该项方向代理实验之前，需要备份之前的配置文件。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/01/13/sNWkwR.png" alt="8"></p><p>当<code>Nginx</code>代理服务器中，存在<code>edu</code>路径时，跳转到8080的服务上请求相应的服务；存在<code>vod</code>路径时，跳转到<code>8999</code>的服务器上请求相应的服务。</p><p>效果如下图：</p><p>请求:<code>http://106.15.65.210/edu/</code></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/01/13/sNWAT1.png" alt="9"></p><p>请求:<code>http://106.15.65.210/vod/</code></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/01/13/sNWZY6.png" alt="10"></p><h3 id="四、负载均衡"><a href="#四、负载均衡" class="headerlink" title="四、负载均衡"></a>四、负载均衡</h3><h4 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h4><p>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡.即：将原来一台服务器做的事情，现在增加到多台服务器来完成(每台服务器的功能模块相同，即存放的资源相同)。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/01/13/sNWefK.png" alt="11"></p><h4 id="4-2-实验"><a href="#4-2-实验" class="headerlink" title="4.2 实验"></a>4.2 实验</h4><p>实现效果：</p><p>请求访问<code>http://106.15.65.210/edu/a.html</code>，负载均衡效果，平均到<code>8080</code>和<code>8999</code>端口中。</p><p>准备工作：</p><ol><li>准备两台<code>tomcat</code>服务器，一台<code>8080</code>，一台<code>8081</code></li><li>在两台<code>tomcat</code>里面<code>webapps</code>目录中创建名称为<code>edu</code>的文件夹，在<code>edu</code>文件夹中创建页面<code>a.html</code>，内容用于标识两台服务即可，不做具体要求了，只用作测试罢了。</li></ol><p>配置：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/10/gNyaKf.png" alt="image-20210510210451404"></p><h4 id="4-3-Nginx分配服务器策略"><a href="#4-3-Nginx分配服务器策略" class="headerlink" title="4.3 Nginx分配服务器策略"></a>4.3 Nginx分配服务器策略</h4><ul><li>第一种：轮询(默认)</li></ul><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，则自动剔除。</p><ul><li>第二种：weight，即设置权重访问</li></ul><p><code>weight</code>代表权重默认为1，权重越高被分配的客户端越多。</p><ul><li>第三种：<code>ip_hash</code></li></ul><p>每个请求按访问<code>ip</code>的<code>hash</code>结果分配，这样每个访客固定访问一个后端服务器</p><ul><li>第四种：<code>fair</code>(第三方)</li></ul><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><p>注意：当使用<code>docker</code>启动多个tomcat服务器时，做端口映射时，不需要修改默认端口8080，只需要映射端口时，选用不同的端口即可。</p><h3 id="五、动静分离"><a href="#五、动静分离" class="headerlink" title="五、动静分离"></a>五、动静分离</h3><p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面，Tomcat 处理动态页面。动静分离从目前实现角度来讲大致分为两种，一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。</p><p>通过location指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/10/gNyNxP.png" alt="image-20210510150522509"></p><p>从上图中也可以看到，当发送请求时，静态资源请求静态资源服务器，动态资源请求动态服务器。</p><h3 id="六、Nginx工作原理初探"><a href="#六、Nginx工作原理初探" class="headerlink" title="六、Nginx工作原理初探"></a>六、Nginx工作原理初探</h3><p><code>ps -ef | grep nginx</code></p><p>首先发送请求，由<code>Nginx</code>中的<code>master</code>进程进行接收；随后，<code>master</code>将请求分发给<code>worker</code>进程，由<code>worker</code>进程进行”争抢”，获取到任务的<code>worker</code>通过反向代理转发请求到<code>tomcat</code>，进行处理。</p><p>一个<code>master</code>和多个<code>worker</code>机制的好处：</p><p><code>worker</code>设置的数量：<code>worker</code>数量和<code>cpu</code>数量设置相等。</p><p>连接数<code>worker_connection</code>：2个或者4个；如果采用的动态分离机制，静态请求和动态请求是分别请求，各占用两个<code>connection</code>。这里是指，发送一个请求，占用的<code>worker</code>的连接数是多少。</p><p>问：<code>Nginx</code>有一个<code>master</code>，有四个<code>worker</code>，每个<code>worker</code>支持最大的连接数据为1024(<code>worker_connections</code>)，支持的<strong>最大并发数</strong>是多少？(最大并发数可以理解为，能够承受的最大请求数量)</p><p>答：一共四个<code>worker</code>，则全部<code>worker</code>最大支持的连接数为：<code>1024*4</code>;因为一个请求占用两个连接或四个连接，则最大并发数(请求)为<code>1024*4/2</code>或者<code>1024*4/4</code>.</p><h3 id="附：docker常用命令"><a href="#附：docker常用命令" class="headerlink" title="附：docker常用命令"></a>附：docker常用命令</h3><p>因为，上述实验需要配置两台<code>tomcat</code>服务器，这里我选择使用的<code>docker</code>配合完成，附上一些<code>docker</code>常用命令。</p><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p>首先在Linux中安装docker及相关命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、检查内核版本，必须是3.10及以上</span><br><span class="line">uname -r</span><br><span class="line">2、安装docker</span><br><span class="line">yum install docker</span><br><span class="line">3、输入y确认安装</span><br><span class="line">4、启动docker</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl start docker</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker -v</span></span><br><span class="line">Docker version 1.12.6, build 3e8e77d/1.12.6</span><br><span class="line">5、开机启动docker</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl enable docker</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">6、停止docker</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><ol><li>镜像操作</li></ol><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker  search 关键字  eg：docker  search redis</td><td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rm image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><ol start="2"><li>容器操作</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1、搜索镜像</span><br><span class="line">[root@localhost ~]<span class="comment"># docker search tomcat</span></span><br><span class="line">2、拉取镜像</span><br><span class="line">[root@localhost ~]<span class="comment"># docker pull tomcat</span></span><br><span class="line">3、根据镜像启动容器</span><br><span class="line">docker run --name mytomcat -d tomcat:latest</span><br><span class="line">4、docker ps  </span><br><span class="line">查看运行中的容器</span><br><span class="line">5、 停止运行中的容器</span><br><span class="line">docker stop  容器的id</span><br><span class="line">6、查看所有的容器</span><br><span class="line">docker ps -a</span><br><span class="line">7、启动容器</span><br><span class="line">docker start 容器id</span><br><span class="line">8、删除一个容器</span><br><span class="line"> docker rm 容器id</span><br><span class="line">9、启动一个做了端口映射的tomcat</span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d -p 8888:8080 tomcat</span></span><br><span class="line">-d：后台运行</span><br><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br><span class="line"></span><br><span class="line">10、为了演示简单关闭了linux的防火墙</span><br><span class="line">service firewalld status ；查看防火墙状态</span><br><span class="line">service firewalld stop：关闭防火墙</span><br><span class="line">11、查看容器的日志</span><br><span class="line">docker logs container-name/container-id</span><br><span class="line">12、进入容器终端进行操作</span><br><span class="line">docker <span class="built_in">exec</span> -it container-id /bin/bash</span><br><span class="line">更多命令参看</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/docker/</span><br><span class="line">可以参考每一个镜像的文档</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中第K大问题之堆排序</title>
      <link href="/2021/03/18/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%ACK%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/03/18/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%ACK%E5%A4%A7%E9%97%AE%E9%A2%98%E4%B9%8B%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>这次在刷<code>Leetcode</code>时，在求解数组中的第<code>K</code>大问题时，想到了使用堆排序，因此本篇文章用于巩固对堆排序的学习以及代码实现。</p><blockquote><p>题目描述：在未排序的数组中找到第 <strong>k</strong> 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><p>输入：[3,2,3,1,2,4,5,5,6] 和 k = 4</p><p>输出：4</p></blockquote><p>当时看到此题时，第一反应就是想到使用大顶堆来求解，在第<code>K</code>次调堆后，就能够得到最<code>K</code>大元素。后续以大顶堆进行为例。</p><p>先来简单回顾堆排序：堆是一棵完全二叉树。如果是一个大顶堆，则根节点递归的大于其左右孩子节点的值。</p><p>以大顶堆为例：<code>(3,2,3,1,2,4,5,5,6)</code>，对该待排序列进行堆排序。</p><a id="more"></a><p>首先，将该序列建立一棵完全二叉树。(这里可以假定建立完全二叉树，可以以数组的位序模拟对二叉树的操作)。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2021/03/18/6g268x.png" alt="image-20210318110035310"></p><p>从第一个(从右向左，从下向上看起)非叶子节点为根节点的子树开始，将其调整为大根堆。因为<code>6&gt;5</code>，所以6和1进行交换。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2021/03/18/6g2c26.png" alt="image-20210318110418419"></p><p>开始调整第二个非叶子节点作为根节点的子树，这里第二个非叶子节点为3。因为5&gt;4，所以根节点3和5进行交换。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2021/03/18/6g2r5R.png" alt="image-20210318110937984"></p><p>接下来，来到非叶节点2，因为 6 &gt; 2，所以根节点2与6进行交换。此时，该子树因为根的调整，以2为根节点的子树不满足大顶堆的性质，因此需要递归的调整子树，将5和2进行调换。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2021/03/18/6g2Da9.png" alt="image-20210318111210360"></p><p>此时来到最后一个非叶节点，即根节点。因为6 &gt; 5，所以3和6进行调换，同时需要递归修改此时以3为根节点的子树进行调整为大顶堆。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2021/03/18/6g2BVJ.png" alt="image-20210318111603757"></p><p>至此，最后得到的一个二叉树就为大顶堆，每个节点的值都大于其左右子树的值。其中，根节点为最大值，就是第一大元素。</p><p>将根节点输出，以最后一个叶子节点将其补上，然后重复上述的步骤。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2021/03/18/6g2yP1.png" alt="image-20210318111752758"></p><p>备注：当左、右节点值相同时，替换哪一个依据代码的具体形式。</p><p>该题解的具体代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxHeapMethod(nums,k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxHeapMethod</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            采用堆排序该方法</span></span><br><span class="line"><span class="comment">            利用数组进行建堆：</span></span><br><span class="line"><span class="comment">            如果根为 i，则其左子树为 i*2+1，则其右子树为 i*2+2</span></span><br><span class="line"><span class="comment">            建堆的过程为：</span></span><br><span class="line"><span class="comment">            从下至上进行建堆，一边建堆，一边调整堆</span></span><br><span class="line"><span class="comment">            调堆的过程为：</span></span><br><span class="line"><span class="comment">            其左右孩子节点，依次和其父亲节点的值进行比较；如果大于父亲节点则和父亲节点的值进行交换。</span></span><br><span class="line"><span class="comment">            调堆的整个过程为递归过程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            模拟完全二叉树</span></span><br><span class="line"><span class="comment">            这里用来建立最大堆.</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="keyword">int</span> heapLength = nums.length;</span><br><span class="line">        generateHeap(nums); <span class="comment">// 建堆</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.length - <span class="number">1</span>;i &gt; nums.length - k;--i)&#123; <span class="comment">// 调整K次堆以后，则此时数组中的第一个元素，即为第K个最大元素</span></span><br><span class="line">            swapNums(nums,<span class="number">0</span>,i);</span><br><span class="line">            heapLength -= <span class="number">1</span>;</span><br><span class="line">            adjustHeap(nums,<span class="number">0</span>,heapLength);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateHeap</span><span class="params">(<span class="keyword">int</span>[] splitNums)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            该函数用于建堆:</span></span><br><span class="line"><span class="comment">                如果根为 i，则其左子树为 i*2+1，则其右子树为 i*2+2</span></span><br><span class="line"><span class="comment">                建堆的过程为：</span></span><br><span class="line"><span class="comment">                从下至上进行建堆，一边建堆，一边调整堆</span></span><br><span class="line"><span class="comment">            从最后一个非叶节(最近)点依次向上进行建堆并且调整</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> heapLength = splitNums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = heapLength / <span class="number">2</span>;i &gt;= <span class="number">0</span>;--i) &#123; <span class="comment">// 从下至上进行建堆，最后一个非叶节点开始。</span></span><br><span class="line">            adjustHeap(splitNums,i,heapLength);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] splitNums,<span class="keyword">int</span> rootIndex,<span class="keyword">int</span> heapLength)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            从下至上进行调堆</span></span><br><span class="line"><span class="comment">            比较root和左右孩子的大小，</span></span><br><span class="line"><span class="comment">            如果是调换的root和左孩子，调换完以后。那么再递归该左孩子(以左孩子为root)的调堆。</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> leftIndex = rootIndex * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">// 左孩子</span></span><br><span class="line">        <span class="keyword">int</span> rightIndex = rootIndex * <span class="number">2</span> + <span class="number">2</span>; <span class="comment">// 右孩子</span></span><br><span class="line">        <span class="keyword">int</span> maxIndex = rootIndex;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下两个条件，将左右孩子中的最大值与根节点做比较，使得根为最大值</span></span><br><span class="line">        <span class="keyword">if</span>(leftIndex &lt; heapLength &amp;&amp; splitNums[leftIndex] &gt; splitNums[maxIndex]) &#123;</span><br><span class="line">            maxIndex = leftIndex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rightIndex &lt; heapLength &amp;&amp; splitNums[rightIndex] &gt; splitNums[maxIndex]) &#123;</span><br><span class="line">            maxIndex = rightIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(maxIndex != rootIndex) &#123; <span class="comment">// 递归对堆进行调整</span></span><br><span class="line">            swapNums(splitNums,rootIndex,maxIndex); <span class="comment">// 将左、右孩子中的最大一个与父节点值进行交换</span></span><br><span class="line">            adjustHeap(splitNums,maxIndex,heapLength); <span class="comment">// 以调换的孩子节点为root节点，继续递归调整堆</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swapNums</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> indexA,<span class="keyword">int</span> indexB)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp = nums[indexA];</span><br><span class="line">        nums[indexA] = nums[indexB];</span><br><span class="line">        nums[indexB] = temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探并查集</title>
      <link href="/2021/03/17/%E5%88%9D%E6%8E%A2%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2021/03/17/%E5%88%9D%E6%8E%A2%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>本文用来记录对并查集的学习与总结，并通过<code>leetcode</code>的两道题目来加深对其的理论与实战学习(实现代码<code>Java</code>)。学习一种数据结构，最高效的方式，就是学以致用，所以这里，以<code>leetcode</code>的题目为例。</p><blockquote><p>给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 equations[i] 的长度为 4，并采用两种不同的形式之一：”a==b” 或 “a!=b”。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。</p><p>只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回 false。 </p><p>示例1：</p><blockquote><p>输入：<code>[&quot;a==b&quot;,&quot;b!=a&quot;]</code><br>输出：false<br>解释：如果我们指定，a = 1 且 b = 1，那么可以满足第一个方程，但无法满足第二个方程。没有办法分配变量同时满足这两个方程。</p></blockquote><p>示例2：</p><blockquote><p>输入：<code>[&quot;b==a&quot;,&quot;a==b&quot;]</code><br>输出：true<br>解释：我们可以指定 a = 1 且 b = 1 以满足满足这两个方程。</p></blockquote></blockquote><a id="more"></a><h4 id="一、并查集介绍"><a href="#一、并查集介绍" class="headerlink" title="一、并查集介绍"></a>一、并查集介绍</h4><p>并查集：并查集支持<code>查找</code>和<code>合并</code>两种操作的数据结构。并查集是一种树型的数据结构，用于处理一些不相交集合(disjoint sets)的合并及查询问题。常常在使用中以森林来表示。主要用于解决一些元素分组的问题。管理一系列不相交的集合。</p><p><strong>本质</strong>：用集合中的某个元素来代表整个集合，该元素称为集合的代表元。</p><p>操作：</p><ul><li>合并(Union):把两个不相交的集合合并为一个集合。</li><li>查询(Find):查询两个元素是否在一个集合中。</li></ul><p>并查集的基本使用场景：</p><ul><li>相等传递(例如：等式判断的连通性)。由于相等关系具有传递性，所有相等的变量属于一个集合中。</li><li>只关心连通性，不关心距离。</li></ul><p>具有以上的条件，就可以考虑并查集。</p><p>特点：</p><ul><li>并查集用于判断一个元素是否相连，它们的关系是动态添加的，这一类问题叫做动态连通性问题。</li><li>主要支持合并与查询是否在同一个集合的操作。</li><li>底层结构是数组或者哈希表，用于表示节点指向的父节点，初始化时指向自己。</li><li>合并就是把一个集合的根节点指向另一个集合的根节点，只表示在同一个集合里。</li><li>这种表示不相交集合的方法称为代表元法，以每个节点的根节点作为一个集合的代表元。</li></ul><p>典型应用：最小生成树、<code>Kruskal</code>算法。</p><p>优化：采用压缩算法。路径压缩，按秩压缩。</p><p>以上是理论部分：</p><p>结合：<a href="https://zhuanlan.zhihu.com/p/93647900" target="_blank" rel="noopener">算法学习笔记:并查集</a>，简单易懂，<strong>强烈推荐</strong>。</p><h4 id="二、题解"><a href="#二、题解" class="headerlink" title="二、题解"></a>二、题解</h4><p>针对题一：</p><p><code>==</code>看作是连接两个节点的边。变量看作是图中的一个节点。所有相等的变量属于同一个连通分量。</p><ol><li>首先遍历所有的等式，构造并查集。同一个等式中的两个变量属于同一个连通分量，因此将两个变量进行合并。</li><li>遍历所有的不等式。同一个不相等的两个变量不能属于同一个连通分量，因此对两个变量分别查找其所在的连通分量，如果两个变量在同一个连通分量中，则产生矛盾，返回<code>false</code>。</li><li>实现方式：使用一个数组<code>parent</code>存储每个变量的连通分量信息，其中的每个元素表示当前变量所在的连通分量的父节点信息，如果父节点是自身，说明该变量为所在的连通分量的根节点。一开始所有变量的父节点都是它们自身。对于合并操作，我们将第一个变量的根节点的父节点指向第二个变量的根节点；对于查找操作，我们沿着当前变量的父节点一路向上查找，直到找到根节点。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unionSetMethod</span><span class="params">(String[] equations)</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        思路：采用并查集。</span></span><br><span class="line"><span class="comment">        1.首先遍历所有的等式，将等式中的character添加到同一个集合中；如果出现相交情况就将两个集合进行合并。</span></span><br><span class="line"><span class="comment">        2.其次对所有的不等式进行遍历，对不等式两边的字母进行查询，如果属于同一个集合，就返回false;</span></span><br><span class="line"><span class="comment">        3.当遍历完所有的不等式后，如果未返回false，则表示所有的不等式\等式成立。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意：字符串的长度为 定长4.</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] union = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>]; <span class="comment">// 代表26个字符; 0-&gt;a,1-&gt;b,2-&gt;c,3-&gt;d,....,25-&gt;z</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化并查集，当前每个元素的根节点就是其自身</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; union.length;++i)&#123;</span><br><span class="line">        union[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历全部的等式，添加到union中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; equations.length;++i)&#123;</span><br><span class="line">        String currentString = equations[i];</span><br><span class="line">        <span class="keyword">if</span>(currentString.charAt(<span class="number">1</span>) == <span class="string">'='</span>) &#123; <span class="comment">// 当前式子 是等式 其中 char 是基本类型，直接使用 == 比较即可，对等式两边进行merge操作</span></span><br><span class="line">            <span class="keyword">int</span> indexOne = currentString.charAt(<span class="number">0</span>) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">int</span> indexTwo = currentString.charAt(<span class="number">3</span>) - <span class="string">'a'</span>;</span><br><span class="line">            merge(indexOne,indexTwo,union);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; equations.length;++i)&#123;</span><br><span class="line">        String currentString = equations[i];</span><br><span class="line">        <span class="keyword">if</span>(currentString.charAt(<span class="number">1</span>) == <span class="string">'!'</span>) &#123; <span class="comment">// 当前等式是 不等式，对不等式两边进行查询操作，判断两变量是否在同一个集合中</span></span><br><span class="line">            <span class="keyword">int</span> indexOne = currentString.charAt(<span class="number">0</span>) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">int</span> indexTwo = currentString.charAt(<span class="number">3</span>) - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(find(indexOne,union) == find(indexTwo,union)) &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 同属于同一个集合中，矛盾。返回 false.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回当前节点的根节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> array[x] == x ? x : (array[x] = find(array[x],array)); <span class="comment">// 路径压缩  边查询 边将 当前节点 接入到根节点上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span>[] array)</span></span>&#123; <span class="comment">// 第一个节点根节点 连接到 第二个节点的根节点上</span></span><br><span class="line">    array[find(i,array)] = find(j,array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题二：</p><blockquote><p>给你一个变量对数组 equations 和一个实数值数组 values 作为已知条件，其中 equations[i] = [Ai, Bi] 和 values[i] 共同表示等式 Ai / Bi = values[i] 。每个 Ai 或 Bi 是一个表示单个变量的字符串。</p><p>另有一些以数组 queries 表示的问题，其中 queries[j] = [Cj, Dj] 表示第 j 个问题，请你根据已知条件找出 Cj / Dj = ? 的结果作为答案。</p><p>返回 所有问题的答案 。如果存在某个无法确定的答案，则用 -1.0 替代这个答案。如果问题中出现了给定的已知条件中没有出现的字符串，也需要用 -1.0 替代这个答案。</p><p>注意：输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。</p><p>示例一：</p><blockquote><p>输入：equations = [[“a”,”b”],[“b”,”c”]], values = [2.0,3.0], queries = [[“a”,”c”],[“b”,”a”],[“a”,”e”],[“a”,”a”],[“x”,”x”]]<br>输出：[6.00000,0.50000,-1.00000,1.00000,-1.00000]<br>解释：<br>条件：a / b = 2.0, b / c = 3.0<br>问题：a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?<br>结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]</p></blockquote><p>实例二：</p><blockquote><p>输入：equations = [[“a”,”b”],[“b”,”c”],[“bc”,”cd”]], values = [1.5,2.5,5.0], queries = [[“a”,”c”],[“c”,”b”],[“bc”,”cd”],[“cd”,”bc”]]<br>输出：[3.75000,0.40000,5.00000,0.20000]</p></blockquote></blockquote><p><strong>实现核心</strong>：变量和变量之间具有倍数关系。由于变量之间的倍数关系具有传递性，处理具有传递性关系的问题，可以使用<code>并查集</code>.在并查集的<code>合并</code>和<code>查询</code>操作中维护这些变量之间的倍数关系。<br>构建方式：采用带权的有向图(其中一个边对应一个权值，每个点都有自己的权值，初始化时，默认的权值是1)；并且，在维护该并查集时，除了根节点以外，所有同在一个连通分量中的父亲节点均为根节点。<br>路径压缩：在查询一个结点<code>a</code>的根节点同时，把节点<code>a</code>到根节点的沿途所有节点的父亲节点都指向根节点。这样，除了根结点以外，所有结点的父亲结点都指向了根结点。<br><strong>结果：两个同在一个连通分量中的不同的变量，它们分别到根结点（父亲结点）的权值的比值，就是题目的要求的结果。</strong>即先判断两个节点是否在同一个集合中，如果在同一个集合中，就分别取出其对应的weight值，然后求出相应的比值就是结果。<br>细节点：并查集的<strong>查询</strong>操作会执行<strong>路径压缩</strong>。<br>并查集的特点：一边查询，一边修改节点指向是并查集的特色。(修改的方式：采用路径压缩算法。具体的实现：采用递归的方式)。<br><strong>tips:</strong><br>处理数字比处理字母方便的多，因此将变量的值与id进行唯一映射；此后就可以用该<code>id</code>唯一表示这个变量。</p><p>具体的实现步骤：</p><ol><li>遍历每个等式，并传入相应的<code>value</code>值。</li><li>将该等式中的两个<code>value</code>传入相应的集合中。</li><li>查询给定的<code>queries</code>中的值，将结果添加到结果集中。</li><li>返回结果</li></ol><p><code>UinonFindSet</code>类的设计模式。</p><ol><li>初始化构造方法的编写。</li><li><code>union</code>，合并集合的方法。</li><li>查找方法。边查找，边调整并查集。（采用递归的方式）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">double</span>[] unionSetMethod(List&lt;List&lt;String&gt;&gt; equations, <span class="keyword">double</span>[] values, List&lt;List&lt;String&gt;&gt; queries) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span>[] res = <span class="keyword">new</span> <span class="keyword">double</span>[queries.size()];</span><br><span class="line">    Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 用于做出字母和id的映射</span></span><br><span class="line">    UnionSet unionSet = <span class="keyword">new</span> UnionSet(equations.size() * <span class="number">2</span>); <span class="comment">// 并查集的创建，这里是其最大的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 做字母和id的映射</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; equations.size();++i)&#123;</span><br><span class="line">        String oString = equations.get(i).get(<span class="number">0</span>);</span><br><span class="line">        String tString = equations.get(i).get(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(oString))&#123;</span><br><span class="line">            map.put(oString,id);</span><br><span class="line">            ++id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(tString)) &#123;</span><br><span class="line">            map.put(tString,id);</span><br><span class="line">            ++id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unionSet.union(map.get(oString),map.get(tString),values[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; queries.size();++i)&#123;</span><br><span class="line">        Integer x = map.get(queries.get(i).get(<span class="number">0</span>));</span><br><span class="line">        Integer y = map.get(queries.get(i).get(<span class="number">1</span>));</span><br><span class="line">        res[i] = unionSet.isConnection(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对该并查集类的设计</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] parent; <span class="comment">// 并查集实现 -- 采用数组的形式实现</span></span><br><span class="line">    <span class="keyword">double</span>[] weight; <span class="comment">// 每个点的权值 初始化1.0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionSet</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = <span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line">        <span class="keyword">this</span>.weight = <span class="keyword">new</span> <span class="keyword">double</span>[count];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; count;++i)&#123;</span><br><span class="line">            <span class="keyword">this</span>.parent[i] = i; <span class="comment">// 当前节点的父节点是其自身</span></span><br><span class="line">            <span class="keyword">this</span>.weight[i] = <span class="number">1.0</span>d; <span class="comment">// 权重初始值为 1.0d</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find Method 查询出当前节点的根节点，并且查询时，采用路径压缩算法，对沿途的节点全指向根节点(根节点除外)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x == parent[x])&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> origin = parent[x]; <span class="comment">// 记录该层的父节点 -- 便于利用当前父节点的权值</span></span><br><span class="line">            parent[x] = find(parent[x]); <span class="comment">// 路径压缩</span></span><br><span class="line">            weight[x] *= weight[origin]; <span class="comment">// 更新权值</span></span><br><span class="line">            <span class="keyword">return</span> parent[x];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// merge Method 合并两个集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">double</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(find(x) == find(y))&#123; <span class="comment">// 当前两个元素已经在同一个集合中</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rootX = find(x); <span class="comment">// x 的根节点</span></span><br><span class="line">        <span class="keyword">int</span> rootY = find(y); <span class="comment">// y 的根节点</span></span><br><span class="line">        weight[rootX] = value * weight[y] / weight[x]; <span class="comment">// 更新 rootX 的权值</span></span><br><span class="line">        parent[rootX] = rootY; <span class="comment">// 连接两个根节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果求解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">isConnection</span><span class="params">(Integer x,Integer y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="keyword">null</span> || y == <span class="keyword">null</span>)&#123; <span class="comment">// 不在原等式中的字母</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1.0</span>d;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(find(x) != find(y)) &#123; <span class="comment">// 当前两个节点 不在同一个集合中，返回false(-1.0d)</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1.0</span>d;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> weight[x] / weight[y]; <span class="comment">// 返回结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><p>初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时每个节点的父节点都是自身。</p><p>查询操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> find(fa[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归查询，每个节点都指向其父节点，只有查询到当前集合的根节点时，其父节点是指向其自身，那么就返回当前集合的代表元。即：一层一层访问父节点，直至根节点（根节点的标志就是父节点是本身）。要判断两个元素是否属于同一个集合，只需要看它们的根节点是否相同即可。</p><p>合并操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[find(i)] = find(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并操作也是很简单的，先找到两个集合的代表元素，然后将前者的父节点设为后者即可。当然也可以将后者的父节点设为前者，这里暂时不重要。这里没有采用压缩算法，最终造成的结果是树的深度很长，形成一条直链，导致查询效率较低。</p><p>路径压缩：把沿途的每个节点的父节点都设为根节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == fa[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        fa[x] = find(fa[x]);  <span class="comment">//父节点设为根节点</span></span><br><span class="line">        <span class="keyword">return</span> fa[x];         <span class="comment">//返回父节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该算法的核心是，边查找边进行压缩。这里是将每个节点都直接指向该集合中的代表元(通过递归的方式)。</p><p>按秩合并：将简单的树往复杂的树上合并，因为这样合并后，到根节点距离变长的节点个数比较少。(这里简单和复杂是指树的高度，高度越高越为复杂)</p><p>初始化：(按秩合并)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">        rank[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并（按秩合并）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = find(i), y = find(j);    <span class="comment">//先找到两个根节点</span></span><br><span class="line">    <span class="keyword">if</span> (rank[x] &lt;= rank[y])</span><br><span class="line">        fa[x] = y;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        fa[y] = x;</span><br><span class="line">    <span class="keyword">if</span> (rank[x] == rank[y] &amp;&amp; x != y)</span><br><span class="line">        rank[y]++;                   <span class="comment">//如果深度相同且根节点不同，则新的根节点的深度+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java比较器之Comparator和Comparable</title>
      <link href="/2021/03/11/Java%E6%AF%94%E8%BE%83%E5%99%A8%E4%B9%8BComparator%E5%92%8CComparable/"/>
      <url>/2021/03/11/Java%E6%AF%94%E8%BE%83%E5%99%A8%E4%B9%8BComparator%E5%92%8CComparable/</url>
      
        <content type="html"><![CDATA[<p>本文用来简单记录<code>Java</code>中<code>Comparator</code>和<code>Comparable</code>接口特点与使用。</p><p>首先，分别查看官方对这两个接口的描述定义：</p><h4 id="一、Comparator接口"><a href="#一、Comparator接口" class="headerlink" title="一、Comparator接口"></a>一、Comparator接口</h4><blockquote><p>This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.</p><p>A comparison function, which imposes a <em>total ordering</em> on some collection of objects.</p></blockquote><p>可以看出官方对该接口的描述是，它是一种比较函数，用于对一些集合中的对象进行总的排序。即：对集合中的元素进行排序。通过其源码可以看出，除了<code>compare(T o1,T o2)</code>方法，其他方法都给了默认实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br></pre></td></tr></table></figure><p>所以要想使用该接口，就得实现该接口的此方法。那么，该接口的作用是什么呢？</p><a id="more"></a><p>实现接口<code>Comparator&lt;T&gt;</code>类型的任何类都必须要有一个<code>compare</code>的方法，该方法有两个泛型类型(AnyType)的参数 并返回一个<code>int</code>型的量，遵守和<code>compareTo</code>(Comparable接口中需要实现的方法)相同的约定。</p><p>简而言之，是对集合中的元素，进行比较。该接口用来返回<code>int</code>类型的结果。当返回是一个正数时，表明<code>o1</code>在集合中的排列在<code>o2</code>之前(<strong>注意：这里只是说<code>o1</code>排列在<code>o2</code>之前，并没有说<code>o1</code>大于/小于<code>o2</code>，因此这里的比较，只是用来确定元素在集合中的排列顺序，说大小的比较其实并不太准确</strong>)；当返回是一个负数时，表明<code>o2</code>在集合中排列在<code>o1</code>之前；如果返回0，那么<code>o1</code>和<code>o2</code>的排列先后顺序没有关系，简单理解成两个对象”相等”。</p><p>我们以最简单的例子，来对上面的说法进行实践：</p><p><code>Java</code>中的<code>java.util.Arrays</code>中的<code>sort</code>方法如果对<code>int</code>类型的数组进行排序，默认是升序排序，这里我们自定义一个<code>Comparator</code>接口来实现降序排序。</p><ol><li>自定义<code>Comparator</code>接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o1 - o2 &gt; <span class="number">0</span>) &#123; <span class="comment">//  该条件表明o1大于o2，o1排列在o2之后</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o1 - o2 &lt; <span class="number">0</span>) &#123; <span class="comment">// 该条件表明o1小于o2，o1排列在o2之前</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 顺序无关</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComparatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Integer[] res = <span class="keyword">new</span> Integer[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">            res[i] = random.nextInt(<span class="number">50</span>) + <span class="number">50</span>; <span class="comment">// 随机生成 50 到 100 之间的随机整数</span></span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(res, <span class="keyword">new</span> MyComparator());</span><br><span class="line">        System.out.println(Arrays.toString(res));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=====结果=====</span><br><span class="line">[<span class="number">96</span>, <span class="number">87</span>, <span class="number">87</span>, <span class="number">85</span>, <span class="number">84</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">78</span>, <span class="number">78</span>, <span class="number">74</span>, <span class="number">68</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">64</span>, <span class="number">63</span>, <span class="number">53</span>, <span class="number">53</span>, <span class="number">53</span>, <span class="number">51</span>]</span><br></pre></td></tr></table></figure><p>所以，<code>Comparator</code>用于指定集合中对象的排列方式，并且我们在使用<code>Comparator</code>接口时，是专门定义类(工具类)去实现该接口，使得该工具类与被比较对象的类进行了分离。如果对被需要比较的对象修改了比较策略，那么只需要修改我们的工具类即可，因此大大降低了对象之间的耦合性(与<code>Comparable</code>接口最大的不同之处)，更具有灵活性。</p><h4 id="二、Comparable接口"><a href="#二、Comparable接口" class="headerlink" title="二、Comparable接口"></a>二、Comparable接口</h4><blockquote><p>This interface imposes a total ordering on the objects of each class that implements it. This ordering is referred to as the class’s <em>natural ordering</em>, and the class’s <code>compareTo</code> method is referred to as its <em>natural comparison method</em>.</p></blockquote><p>从上面的实现中看出，对实现该接口的对象进行一个”总”的排序。即：如果想要使用该接口的排列策略，让需要排列的对象的类实现该接口。</p><p>其源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compares this object with the specified object for order.  Returns a</span></span><br><span class="line"><span class="comment">     * negative integer, zero, or a positive integer as this object is less</span></span><br><span class="line"><span class="comment">     * than, equal to, or greater than the specified object.</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</span><br></pre></td></tr></table></figure><p>使用方式同<code>Comparator</code>接口，只是这里是实现<code>compareTo</code>接口。</p><p>这里我们自定义一个<code>People</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span>  <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Object</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(<span class="keyword">int</span> age, String name, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    getter / setter / toString 方法的省略</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        People tempPeople = (People) o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &gt; tempPeople.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt; tempPeople.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.salary &gt; tempPeople.getSalary()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.salary &lt; tempPeople.getSalary()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看出我们自定义的<code>People</code>类实现了<code>Comparable</code>接口，实现的比较规则是，先按照年龄的大小进行排序，如果年龄大小相同，按照工资的大小进行排序，否则最终返回<code>0</code>.(代表此时两个对象”相等”)。</p><p>接下来来对该类进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    People p1 = <span class="keyword">new</span> People(<span class="number">24</span>, <span class="string">"Lisa"</span>, <span class="number">4000</span>d);</span><br><span class="line">    People p2 = <span class="keyword">new</span> People(<span class="number">24</span>, <span class="string">"Lisa"</span>, <span class="number">5000</span>d);</span><br><span class="line">    People p3 = <span class="keyword">new</span> People(<span class="number">25</span>, <span class="string">"Lisa"</span>, <span class="number">5000</span>d);</span><br><span class="line"></span><br><span class="line">    People[] people = &#123;p1, p2, p3&#125;;</span><br><span class="line">    Arrays.sort(people);</span><br><span class="line">    System.out.println(Arrays.toString(people));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">====结果====</span><br><span class="line">[People&#123;age=<span class="number">24</span>, name=<span class="string">'Lisa'</span>, salary=<span class="number">4000.0</span>&#125;, People&#123;age=<span class="number">24</span>, name=<span class="string">'Lisa'</span>, salary=<span class="number">5000.0</span>&#125;, People&#123;age=<span class="number">25</span>, name=<span class="string">'Lisa'</span>, salary=<span class="number">5000.0</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><blockquote><p><code>Comparable</code>接口和<code>Comparator</code>接口区别</p></blockquote><ol><li><code>Comparator</code>位于包<code>Java.util</code>下，而<code>Comparable</code>位于包<code>Java.lang</code>包下。</li><li><code>Comparable</code>接口将比较代码嵌入需要进行比较的自身代码中，而<code>Comparator</code>接口在一个独立的类中实现比较。</li><li><code>Comparable</code>接口需要实现重写<code>comparaTo</code>方法，同时<code>Comparable</code>是排序接口，若一个类实现了<code>Comparable</code>接口，该类支持排序，相当于内部比较器，<code>Comparator</code>相当于外部比较器。<code>Comparable</code>接口强制进行自然排序，<code>Comparator</code>不强制，可以指定排序。</li><li><code>Comparator</code>更适用于<code>Java</code>提供的类使用；<code>Comparable</code>适用我们自定义的类使用(嵌入在自定义的类中)</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从Servlet到HttpServlet都经历了什么</title>
      <link href="/2020/11/29/%E4%BB%8EServlet%E5%88%B0HttpServlet%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>/2020/11/29/%E4%BB%8EServlet%E5%88%B0HttpServlet%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>在之前的文章<btn><a href="http://www.chemlez.cn/2020/11/27/Servlet执行原理浅谈/" target="_blank" rel="noopener">Servlet执行原理浅谈</a></btn>中对<code>Servlet</code>的整个原理做了大概介绍。我们知道客户端发送的请求是交给<code>Servlet</code>中的<code>service</code>方法进行处理。而在实际使用时，并没有直接重写<code>service</code>方法，而是继承了<code>HttpServlet</code>，重写了<code>doGet</code>、<code>doPost</code>等方法，而这期间又发生了什么呢。</p><p>首先，我们观察<code>Servlet</code>这个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Servlet</code>是一个接口，其中包含5个方法，我们大多真正使用的是<code>service</code>方法，其他的几个方法并不常用。因此，就出现了以下两个实现类：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/17/g2zVAS.png" alt="image-20201129170130519"></p><a id="more"></a><p>首先我们看<code>GenericServlet</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 其他方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为方便展示，这里只罗列出了其实现的父类方法，自身的方法未列出。</p><p>从其源码中可以看出，除了<code>service</code>方法(改写成抽象方法)，其他四个方法都具体实现了(有的只有<code>return</code>，也是实现)。因此，当我们使用继承<code>GenericServlet</code>类时，只需要具体实现<code>service</code>方法即可。从上面的类图上看出，<code>Servlet</code>容器帮我们设计好了继承类——<code>HttpServlet</code>。</p><p>我们继续看<code>HttpServlet</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String msg = lStrings.getString(<span class="string">"http.method_get_not_supported"</span>);</span><br><span class="line">        <span class="keyword">this</span>.sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String msg = lStrings.getString(<span class="string">"http.method_post_not_supported"</span>);</span><br><span class="line">        <span class="keyword">this</span>.sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String method = req.getMethod();</span><br><span class="line">        <span class="keyword">long</span> lastModified;</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">            lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1L</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(<span class="string">"If-Modified-Since"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">                    ifModifiedSince = -<span class="number">1L</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="number">1000L</span> * <span class="number">1000L</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(<span class="number">304</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"HEAD"</span>)) &#123;</span><br><span class="line">            lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">            <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">            <span class="keyword">this</span>.doHead(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doPut(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"DELETE"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doDelete(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doOptions(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"TRACE"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doTrace(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[]&#123;method&#125;;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">            resp.sendError(<span class="number">501</span>, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request = (HttpServletRequest)req;</span><br><span class="line">            response = (HttpServletResponse)res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(lStrings.getString(<span class="string">"http.non_http"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便展示，我们只保留了<code>doGet</code>、<code>doPost</code>以及<code>service</code>方法。</p><p>从<code>HttpServlet</code>中的源码可以看出，它不仅实现了<code>service</code>方法，还增加了重载形式。在之前的原理讲解中，我们知道客户端发送的请求首先交给<code>Servlet</code>中的<code>service</code>方法进行处理。</p><p>在这里，首先发送的请求来到第一个<code>service</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpServletRequest request;</span><br><span class="line">    HttpServletResponse response;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        request = (HttpServletRequest)req;</span><br><span class="line">        response = (HttpServletResponse)res;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(lStrings.getString(<span class="string">"http.non_http"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.service(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面的参数<code>req</code>就包含着我们的请求信息(请求头、请求体、请求参数…)。在其方法体中，首先将请求(req)与响应(res)进行转型 –&gt; <code>Http</code>。最后，调用了其重载方法<code>this.service(request, response);</code></p><p>具体再看该段重载方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String method = req.getMethod();</span><br><span class="line">    <span class="keyword">long</span> lastModified;</span><br><span class="line">    <span class="keyword">if</span> (method.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">        lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">        <span class="keyword">if</span> (lastModified == -<span class="number">1L</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ifModifiedSince = req.getDateHeader(<span class="string">"If-Modified-Since"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">                ifModifiedSince = -<span class="number">1L</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="number">1000L</span> * <span class="number">1000L</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">                <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resp.setStatus(<span class="number">304</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"HEAD"</span>)) &#123;</span><br><span class="line">        lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">        <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">        <span class="keyword">this</span>.doHead(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doPut(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"DELETE"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doDelete(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doOptions(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"TRACE"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doTrace(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">        Object[] errArgs = <span class="keyword">new</span> Object[]&#123;method&#125;;</span><br><span class="line">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">        resp.sendError(<span class="number">501</span>, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它对获得的请求<code>req</code>进行方法的请求判断，如果是<code>method=GET</code>，就调用<code>doGet</code>方法；如果<code>method=POST</code>，就调用<code>doPost</code>方法，如果<code>method</code>等于其他5种类型之一，就调用其相应的方法。</p><p>这里我们继续看<code>doGet</code>、<code>doPost</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String msg = lStrings.getString(<span class="string">"http.method_get_not_supported"</span>);</span><br><span class="line">    <span class="keyword">this</span>.sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String msg = lStrings.getString(<span class="string">"http.method_post_not_supported"</span>);</span><br><span class="line">    <span class="keyword">this</span>.sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是不是我们在实际应用中，经常重写的两个方法。我们对请求的处理和响应的设置是不是都在这里面。所以归根结底，我们的请求还是交给了<code>service</code>方法进行处理，是在<code>service</code>中又继而调用更加具体的方法(<code>doGet</code>、<code>doPost</code>…)来为我们处理请求。</p><p>现在对整个<code>Servlet</code>处理请求做个流程图总结：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/05/17/g2zehQ.png" alt="请求处理过程"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet执行原理浅谈</title>
      <link href="/2020/11/27/Servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E6%B5%85%E8%B0%88/"/>
      <url>/2020/11/27/Servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E6%B5%85%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<p>在介绍<code>Servlet</code>之前，简单对<code>web</code>方面的知识做个小结。</p><h3 id="一、Web知识小结"><a href="#一、Web知识小结" class="headerlink" title="一、Web知识小结"></a>一、Web知识小结</h3><h4 id="1-1-软件架构"><a href="#1-1-软件架构" class="headerlink" title="1.1 软件架构"></a>1.1 软件架构</h4><p>这里的软件架构，指服务器软件工作的两种方式：</p><ol><li><code>C/S</code>：客户端/服务器端</li><li><code>B/S</code>：浏览器/服务器端</li></ol><h4 id="1-2-网络通信三要素"><a href="#1-2-网络通信三要素" class="headerlink" title="1.2 网络通信三要素"></a>1.2 网络通信三要素</h4><ol><li><code>IP</code>：电子设备(计算机)在网络中的<strong>唯一标识</strong>。作用：用于定位到具体的电子设备，这里指具体的一台计算机。</li><li><code>port(端口)</code>：应用程序在计算机中的<strong>唯一标识</strong>，其范围在<code>0~65536</code>。作用：用于定位计算机中的具体应用程序(每个应用程序都在监听着具体的端口号)。</li><li>传输协议：规定了数据传输的规则(该如何发送数据，又该如何接受数据，最后该对接受到的数据如何解析)。<ol><li>基础协议<ul><li><code>tcp</code>：安全协议，三次握手，速度稍慢。</li><li><code>udp</code>：不安全协议，速度较快。</li></ul></li></ol></li></ol><a id="more"></a><h4 id="1-2-资源分类"><a href="#1-2-资源分类" class="headerlink" title="1.2 资源分类"></a>1.2 资源分类</h4><ol><li><p>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源，静态资源可以直接被浏览器解析。</p><p>如：<code>html、css、JavaScript...</code></p></li><li><p>动态资源：每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器。</p><p>如：<code>servlet/jsp、php、asp...</code></p></li></ol><p>客户端像服务器端请求的形式如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/11/28/Ds4WsP.jpg" alt="资源分类"></p><p>浏览器通过具体的<code>ip:port</code>向服务器端发送请求，当请求的资源是静态资源时，服务器将请求的资源返回(响应)给客户端，浏览器对静态资源进行解析，展示给用户；当请求的资源时动态资源时，服务器内部先将动态资源转换为静态资源，再将该资源响应给浏览器，最后由浏览器对资源进行解析，展示给用户。</p><h3 id="二、Servlet相关介绍"><a href="#二、Servlet相关介绍" class="headerlink" title="二、Servlet相关介绍"></a>二、Servlet相关介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/11/28/Ds44Z8.jpg" alt="Servlet执行原理"></p><p>概念：<code>Servlet</code>是<code>J2EE</code>众多规范中的一种，是运行在服务器端的小程序。其中，<code>Servlet</code>就是一个接口，定义了<code>Java</code>类被浏览器访问到(<code>tomcat</code>识别)的规则。以后，只要我们自定义一个类，实现<code>Servlet</code>接口，复写其方法，就可进行<code>Web</code>开发。</p><p>从上图中我们可以看到，浏览器端对服务器发送请求，请求动态资源时，是由服务器内部的服务器软件(这里假设是<code>Tomcat</code>服务器)对该请求进行处理。其中我们定义的<code>Java</code>类必须遵守一定的规范(<code>Servlet/JSP</code>规范)，这个类才能被<code>Tomcat</code>识别，进而对请求进行处理。</p><h4 id="2-1-执行原理"><a href="#2-1-执行原理" class="headerlink" title="2.1 执行原理"></a>2.1 执行原理</h4><p>首先创建<code>JavaEE</code>项目，定义一个类，实现<code>Servlet</code>接口，并实现其中的<code>service</code>抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后配置<code>Servlet</code>，即<code>web.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类标识名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/11/28/Ds4fqf.jpg" alt="Servlet执行原理"></p><p>首先客户端发送请求，请求来到<code>Tomcat</code>服务器，查询<code>web.xml</code>配置文件，由于请求路径中包含<code>demo1</code>资源路径，对应着<code>&lt;url-pattern&gt;</code>中的值，继而就找到了<code>&lt;servlet-name&gt;</code>标签中的值(因为两者同属于<code>&lt;servlet-mapping&gt;</code>标签)——<code>demo1</code>，然后通过<code>demo1</code>定位到<code>servlet</code>标签中的<code>&lt;servlet-name&gt;</code>，继而找到<code>&lt;servlet-class&gt;</code>中的全类名，通过反射将全类名对应的字节码文件加载进内存，创建对象，由于必须符合<code>serlvet</code>规范，所以调用能够<code>service</code>方法。</p><p>执行原理总结：</p><ol><li><p>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径;</p></li><li><p>查找web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容;</p></li><li><p>如果有，则在找到对应的<code>&lt;servlet-class&gt;</code>全类名;</p></li><li><p><code>tomcat</code>会将字节码文件加载进内存，并且创建其对象;</p></li><li><p>调用其方法。</p></li></ol><h4 id="2-2-实现原理"><a href="#2-2-实现原理" class="headerlink" title="2.2 实现原理"></a>2.2 实现原理</h4><p>Servlet具体原理见下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/11/29/DcRdJJ.png" alt="4servlet原理"></p><p>首先客户端将发送<code>http</code>请求到服务器中(<code>Web</code>容器，这里是<code>Tomcat</code>)，由<code>Tomcat</code>创建<code>Servlet</code>容器，调用其<code>service</code>方法对请求进行处理，处理的逻辑是由我们自己进行编写。将处理的结果交给<code>Response</code>，最终由<code>web</code>容器将<code>Response</code>响应给客户端。</p><p>因为<code>Servlet</code>是<code>J2EE</code>中的规范之一，其中处理请求的方法<code>servcice</code>是事先约定好的，我们只需要重写<code>servcie</code>方法，由<code>Tomcat</code>创建的<code>Servlet</code>容器自行帮我们处理请求。</p><h4 id="2-4-Mapping详解"><a href="#2-4-Mapping详解" class="headerlink" title="2.4 Mapping详解"></a>2.4 Mapping详解</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类标识名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>mapping</code>是请求路径的映射，可以将<code>Mapping</code>想象成一个<code>value</code>，而<code>servlet</code>是一个<code>key</code>，我们通过<code>value</code>来映射<code>key</code>，所以我们的访问路径可以设置多组，由访问路径找到<code>servlet-class</code>，最终将<code>class</code>加载进内存由<code>Servlet</code>容器对其进行处理。因此，我们可以设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类标识名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，访问路径demo1,demo2,demo3都可以映射到<code>&lt;servlet-class&gt;cn.itcast.web.servlet.ServletDemo1&lt;/servlet-class&gt;</code>，对其<code>servlet</code>进行处理。</p><p>同时也可以使用通配符：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类标识名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  <span class="comment">&lt;!-- 任何请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 访问路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> <span class="comment">&lt;!-- 以.do结尾的请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简化Mybatis的使用——通用Mapper</title>
      <link href="/2020/11/22/%E7%AE%80%E5%8C%96Mybatis%E7%9A%84%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E9%80%9A%E7%94%A8Mapper/"/>
      <url>/2020/11/22/%E7%AE%80%E5%8C%96Mybatis%E7%9A%84%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E9%80%9A%E7%94%A8Mapper/</url>
      
        <content type="html"><![CDATA[<p>使用通用<code>Mapper</code>的目的是为了替我们生成常用增删改查操作的<code>SQL</code>语句，并能够简化对于<code>Mybatis</code>的操作。</p><h3 id="一、快速入门"><a href="#一、快速入门" class="headerlink" title="一、快速入门"></a>一、快速入门</h3><h4 id="1-1-数据库表的创建"><a href="#1-1-数据库表的创建" class="headerlink" title="1.1 数据库表的创建"></a>1.1 数据库表的创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;tabple_emp&#96; (</span><br><span class="line">&#96;emp_id&#96; INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">&#96;emp_name&#96; VARCHAR ( 500 ) NULL,</span><br><span class="line">&#96;emp_salary&#96; DOUBLE ( 15, 5 ) NULL,</span><br><span class="line">&#96;emp_age&#96; INT NULL,</span><br><span class="line">PRIMARY KEY ( &#96;emp_id&#96; ) </span><br><span class="line">);</span><br><span class="line">INSERT INTO &#96;tabple_emp&#96; ( &#96;emp_name&#96;, &#96;emp_salary&#96;, &#96;emp_age&#96; )</span><br><span class="line">VALUES</span><br><span class="line">( &#39;tom&#39;, &#39;1254.37&#39;, &#39;27&#39; );</span><br><span class="line">INSERT INTO &#96;tabple_emp&#96; ( &#96;emp_name&#96;, &#96;emp_salary&#96;, &#96;emp_age&#96; )</span><br><span class="line">VALUES</span><br><span class="line">( &#39;jerry&#39;, &#39;6635.42&#39;, &#39;38&#39; );</span><br><span class="line">INSERT INTO &#96;tabple_emp&#96; ( &#96;emp_name&#96;, &#96;emp_salary&#96;, &#96;emp_age&#96; )</span><br><span class="line">VALUES</span><br><span class="line">( &#39;bob&#39;, &#39;5560.11&#39;, &#39;40&#39; );</span><br><span class="line">INSERT INTO &#96;tabple_emp&#96; ( &#96;emp_name&#96;, &#96;emp_salary&#96;, &#96;emp_age&#96; )</span><br><span class="line">VALUES</span><br><span class="line">( &#39;kate&#39;, &#39;2209.11&#39;, &#39;22&#39; );</span><br><span class="line">INSERT INTO &#96;tabple_emp&#96; ( &#96;emp_name&#96;, &#96;emp_salary&#96;, &#96;emp_age&#96; )</span><br><span class="line">VALUES</span><br><span class="line">( &#39;justin&#39;, &#39;4203.15&#39;, &#39;30&#39; );</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-2-对应实体类的创建"><a href="#1-2-对应实体类的创建" class="headerlink" title="1.2 对应实体类的创建"></a>1.2 对应实体类的创建</h4><p>基本数据类型在<code>Java</code>类中都有默认值，会导致<code>Mybatis</code>在执行相关操作时很难判断当前字段是否为<code>Null</code>。因此，在<code>Mybatis</code>环境下使用<code>Java</code>实体类时尽量不要使用基本数据类型，都使用对应的包装类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">    <span class="keyword">private</span> Double empSalary;</span><br><span class="line">    <span class="keyword">private</span> Integer empAge;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(Integer empId, String empName, Double empSalary, Integer empAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empId = empId;</span><br><span class="line">        <span class="keyword">this</span>.empName = empName;</span><br><span class="line">        <span class="keyword">this</span>.empSalary = empSalary;</span><br><span class="line">        <span class="keyword">this</span>.empAge = empAge;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 省略了getter、setter以及toString()方法的展示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-Spring-SpringMVC-Mybatis的整合"><a href="#1-3-Spring-SpringMVC-Mybatis的整合" class="headerlink" title="1.3 Spring-SpringMVC-Mybatis的整合"></a>1.3 Spring-SpringMVC-Mybatis的整合</h4><p>整合步骤见此文<btn><a href="http://www.chemlez.cn/2020/11/18/ssm框架的整合/" target="_blank" rel="noopener">ssm框架的整合</a></btn>。</p><h3 id="二、通用Mapper的MBG"><a href="#二、通用Mapper的MBG" class="headerlink" title="二、通用Mapper的MBG"></a>二、通用Mapper的MBG</h3><p>原生的<code>MBG</code>和通用的<code>MBG</code>做对比。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/11/22/DGko3d.png" alt="image-20201119201340940"></p><p><code>通用Mapper</code>的逆向工程，通过其特点的插件，同样的生成<code>Java</code>实体类对象，带有注解(<code>@Id</code>、<code>@Column</code>等注解)；在<code>dao</code>接口层，即<code>mapper</code>接口继承<code>通用Mapper</code>中核心的接口<code>Mapper&lt;T&gt;</code>；生成的实体类<code>Mapper</code>文件(<code>XXxMapper</code>文件)没有<code>SQL</code>语句标签。</p><p>当<code>通用Mapper</code>与<code>Spring</code>或<code>SpringBoot</code>整合完以后,<code>通用Mapper</code>的<code>MBG</code>可参考<a href="https://github.com/abel533/Mapper/wiki/4.1.mappergenerator" target="_blank" rel="noopener">官方文档</a>使用<code>Maven</code>执行<code>MBG</code>的方式。</p><h4 id="2-1-自定义Mapper接口"><a href="#2-1-自定义Mapper接口" class="headerlink" title="2.1 自定义Mapper接口"></a>2.1 自定义<code>Mapper</code>接口</h4><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/11/22/DGkeXt.png" alt="image-20201119211319793"></p><p>其自己的<code>Mapper&lt;T&gt;</code>接口层次结构如上所示。</p><p>作用，根据我们自身的需要，继承上方的层级结构中的<code>mapper</code>接口，供我们自身开发。</p><p>举例：</p><p>自定义接口：</p><p>自定义的Mapper不能和原有的实体类Mapper放在同一级的目录下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">ExampleMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title">MyMapper</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<code>MapperScannerConfigurer</code>注册<code>MyMapper&lt;T&gt;</code>，或者在我们自定义的<code>Mapper</code>接口中加入注解<code>@RegisterMapper</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"tk.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描所有dao接口的实现，加入到ioc容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.lizhi.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            mapper=cn.lizhi.myInterface.MyMapper</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>value</code>值默认的是原生<code>mapper</code>的值。</p><h4 id="2-2-通用Mapper接口扩展"><a href="#2-2-通用Mapper接口扩展" class="headerlink" title="2.2 通用Mapper接口扩展"></a>2.2 通用Mapper接口扩展</h4><p>其扩展用来指增加通用Mapper中没有提供的功能。</p><p>示例：批量更新。</p><p>思路：当我们写<code>SQL</code>语句时，如何能做到批量更新呢？即用<code>;</code>分割我们需要更新的<code>SQL</code>语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_emp <span class="keyword">SET</span> emp_name=?,emp_age=?,emp_salary=? <span class="keyword">WHERE</span> emp_id=?;</span><br><span class="line"><span class="keyword">UPDATE</span> table_emp <span class="keyword">SET</span> emp_name=?,emp_age=?,emp_salary=? <span class="keyword">WHERE</span> emp_id=?;</span><br><span class="line"><span class="keyword">UPDATE</span> table_emp <span class="keyword">SET</span> emp_name=?,emp_age=?,emp_salary=? <span class="keyword">WHERE</span> emp_id=?;</span><br><span class="line"><span class="keyword">UPDATE</span> table_emp <span class="keyword">SET</span> emp_name=?,emp_age=?,emp_salary=? <span class="keyword">WHERE</span> emp_id=?;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>那么<code>Mybatis</code>又是如何做到上面这种形式的呢？即，通过<code>foreach</code>标签达到语句的拼接。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;foreach collection=<span class="string">'list'</span> item=<span class="string">'record'</span> separator=<span class="string">';'</span>&gt;</span><br><span class="line">UPDATE table_emp</span><br><span class="line">    SET </span><br><span class="line">    emp_name=#&#123;record.empName&#125;,</span><br><span class="line">    emp_age=#&#123;record.empAge&#125;,</span><br><span class="line">    emp_salay=#&#123;record.empSalary&#125;</span><br><span class="line">    WhERE emp_id=#&#123;record.empId&#125;</span><br><span class="line">&lt;/foreach&gt;</span><br></pre></td></tr></table></figure><p>即我们需要使用通用Mapper能够做到动态的生成上面的<code>SQL</code>语句，供我们使用，即可做到接口的扩展。</p><h5 id="2-2-1-需要提供的接口和实现类"><a href="#2-2-1-需要提供的接口和实现类" class="headerlink" title="2.2.1 需要提供的接口和实现类"></a>2.2.1 需要提供的接口和实现类</h5><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/11/22/DGknnP.png" alt="image-20201121101818164"></p><p>在我们自定义的<code>MyMapper&lt;T&gt;</code>接口中除了需要继承<code>Mapper&lt;T&gt;</code>中下方层次结构的接口，它还需要继承我们自己自定义功能的<code>Mapper</code>接口，这里是<code>MyBatchUpdateProvider</code>。</p><p>其中<code>MyBatchUpdateProvider</code>是我们自己编写的类(需要继承模板)，用于解析<code>xml</code>的<code>SQL</code>语句。</p><p>代码示例：</p><p>首先编写我们自定义的接口<code>MyBatchUpdateMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RegisterMapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyBatchUpdateMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UpdateProvider</span>(type=MyBatchUpdateProvider<span class="class">.<span class="keyword">class</span>, <span class="title">method</span></span>=<span class="string">"dynamicSQL"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">batchUpdateMapper</span><span class="params">(List&lt;T&gt; list)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>batchUpdateMapper</code>就是我们后续需要生成模板代码的方法。</p><p>编写<code>MyBatchUpdateProvider</code>类，继承<code>MapperTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatchUpdateProvider</span> <span class="keyword">extends</span> <span class="title">MapperTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBatchUpdateProvider</span><span class="params">(Class&lt;?&gt; mapperClass, MapperHelper mapperHelper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mapperClass, mapperHelper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 下方的函数目的是为了拼接此字符串,但是需要能做到通用性,又不仅仅局限于下面的单一情况</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">         &lt;foreach collection='list' item='record' separator=';'&gt;</span></span><br><span class="line"><span class="comment">             UPDATE table_emp</span></span><br><span class="line"><span class="comment">             &lt;SET&gt;</span></span><br><span class="line"><span class="comment">                 emp_name=#&#123;record.empName&#125;,</span></span><br><span class="line"><span class="comment">                 emp_age=#&#123;record.empAge&#125;,</span></span><br><span class="line"><span class="comment">                 emp_salay=#&#123;record.empSalary&#125;,</span></span><br><span class="line"><span class="comment">                 WhERE emp_id=#&#123;record.empId&#125;,</span></span><br><span class="line"><span class="comment">             &lt;/SET&gt;</span></span><br><span class="line"><span class="comment">         &lt;/foreach&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">batchUpdateMapper</span><span class="params">(MappedStatement ms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; entityClass = <span class="keyword">super</span>.getEntityClass(ms); <span class="comment">// 用于获取实体类对象</span></span><br><span class="line">        <span class="keyword">final</span> String tableName = <span class="keyword">super</span>.tableName(entityClass); <span class="comment">// 用于获取实体类对应的表名</span></span><br><span class="line">        <span class="comment">// 修改返回值类型为实体类型</span></span><br><span class="line">        <span class="keyword">super</span>.setResultType(ms, entityClass);</span><br><span class="line">        <span class="comment">// 拼接动态SQL语句</span></span><br><span class="line">        StringBuilder sql = <span class="keyword">new</span> StringBuilder(); <span class="comment">// 用于生成最终的SQL语句</span></span><br><span class="line">        sql.append(<span class="string">"&lt;foreach collection='list' item='record' separator=';'&gt;"</span>); <span class="comment">// foreach的开标签</span></span><br><span class="line">        String updateClause = SqlHelper.updateTable(entityClass, tableName); <span class="comment">// 设置实体类对象、表的映射</span></span><br><span class="line">        sql.append(updateClause); <span class="comment">// 生成 UPDATE 部分</span></span><br><span class="line">        sql.append(<span class="string">"&lt;set&gt;"</span>);</span><br><span class="line">        Set&lt;EntityColumn&gt; columns = EntityHelper.getColumns(entityClass); <span class="comment">// 获取实体属性对象</span></span><br><span class="line">        String Id_column = <span class="keyword">null</span>;</span><br><span class="line">        String Id_columnHolder = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (EntityColumn entityColumn : columns) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = entityColumn.isId();</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123; <span class="comment">// 判断是否是主键</span></span><br><span class="line">                Id_column = entityColumn.getColumn(); <span class="comment">// 主键实体类名</span></span><br><span class="line">                Id_columnHolder = entityColumn.getColumnHolder(<span class="string">"record"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String column = entityColumn.getColumn(); <span class="comment">// 对应属性的名称</span></span><br><span class="line">                String columnHolder = entityColumn.getColumnHolder(<span class="string">"record"</span>); <span class="comment">// 通过record进行引用，和foreach中相同</span></span><br><span class="line">                sql.append(column).append(<span class="string">"="</span>).append(columnHolder).append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sql.append(<span class="string">"&lt;/set&gt;"</span>);</span><br><span class="line">        sql.append(<span class="string">"where "</span>).append(Id_column).append(<span class="string">"="</span>).append(Id_columnHolder);</span><br><span class="line">        sql.append(<span class="string">"&lt;/foreach&gt;"</span>); <span class="comment">// foreach的闭标签</span></span><br><span class="line">        <span class="keyword">return</span> sql.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通用代码编写的方法要和我们前面接口中定义的方法名相同，这个方法就是最后我们使用接口时，需要使用的方法。</p><p>最后，编写我们自定义的<code>Mapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RegisterMapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;,<span class="title">MyBatchUpdateMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用时，我们实体类Mapper接口中的用法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title">MyMapper</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即，只需要继承我们自定义的Mapper即可。</p><p>测试类编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchUpdateEmployeeTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">        Employee emp01 = <span class="keyword">new</span> Employee(<span class="number">1</span>, <span class="string">"小明"</span>, <span class="number">120000</span>d, <span class="number">18</span>);</span><br><span class="line">        Employee emp02 = <span class="keyword">new</span> Employee(<span class="number">2</span>, <span class="string">"小红"</span>, <span class="number">130000</span>d, <span class="number">19</span>);</span><br><span class="line">        Employee emp03 = <span class="keyword">new</span> Employee(<span class="number">3</span>, <span class="string">"小黑"</span>, <span class="number">140000</span>d, <span class="number">20</span>);</span><br><span class="line">        Employee emp04 = <span class="keyword">new</span> Employee(<span class="number">4</span>, <span class="string">"小娜"</span>, <span class="number">150000</span>d, <span class="number">21</span>);</span><br><span class="line">        list.add(emp01);</span><br><span class="line">        list.add(emp02);</span><br><span class="line">        list.add(emp03);</span><br><span class="line">        list.add(emp04);</span><br><span class="line">        employeeService.batchUpdateEmployee(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要需要在<code>dbConfig.xml</code>中的<code>url</code>里配置上批量查询的请求参数，即：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_mapper?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true</span></span><br></pre></td></tr></table></figure><h3 id="2-3-通用Mapper的二级缓存方式"><a href="#2-3-通用Mapper的二级缓存方式" class="headerlink" title="2.3 通用Mapper的二级缓存方式"></a>2.3 通用Mapper的二级缓存方式</h3><p>对同一内容查询两次，其查询两次数据库，默认并没有将第一次查询的内容进行缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; employees = employeeService.findAll();</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"----"</span>);</span><br><span class="line">    List&lt;Employee&gt; employeeList = employeeService.findAll();</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : employeeList) &#123;</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入二级缓存方式：</p><ol><li>在<code>Mybatis</code>全局配置文件<code>mybatis-config.xml</code>中开启二级缓存。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其他 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>实体类的Mapper接口加入<code>@CacheNamespace</code>注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@CacheNamespace</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title">MyMapper</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-实体类中含有复杂类型的注入"><a href="#2-4-实体类中含有复杂类型的注入" class="headerlink" title="2.4 实体类中含有复杂类型的注入"></a>2.4 实体类中含有复杂类型的注入</h3><h4 id="2-4-1-简单类型和复杂类型"><a href="#2-4-1-简单类型和复杂类型" class="headerlink" title="2.4.1 简单类型和复杂类型"></a>2.4.1 简单类型和复杂类型</h4><ol><li>基本数据类型：<code>byte、char、short、int、float、double、boolean</code></li><li>引用类型：<code>类、接口、数据、枚举...</code></li><li>简单类型：<code>只有一个值的类型</code></li><li>复杂类型：<code>多个简单类型组合起来</code></li></ol><h4 id="2-4-2-准备工作-——-相关类的创建"><a href="#2-4-2-准备工作-——-相关类的创建" class="headerlink" title="2.4.2 准备工作 —— 相关类的创建"></a>2.4.2 准备工作 —— 相关类的创建</h4><p>创建复杂类型的类。即创建一张表<code>table_user</code>，表的每个字段对应下面<code>User</code>实体类的属性，并没有进行主从表的建设，而是直接使用一张表进行操作。其对应的实体类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name=<span class="string">"table_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"user_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> SeasonEnum season;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略个无参数、有参数构造器以及getter、setter和toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Address</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String province;</span><br><span class="line"><span class="keyword">private</span> String city;</span><br><span class="line"><span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(String province, String city, String street)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.province = province;</span><br><span class="line"><span class="keyword">this</span>.city = city;</span><br><span class="line"><span class="keyword">this</span>.street = street;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略getter、setter以及toString()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SeasonEnum</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SeasonEnum &#123;</span><br><span class="line"></span><br><span class="line">SPRING(<span class="string">"spring @_@"</span>),SUMMER(<span class="string">"summer @_@"</span>),AUTUMN(<span class="string">"autumn @_@"</span>),WINTER(<span class="string">"winter @_@"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String seasonName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SeasonEnum</span><span class="params">(String seasonName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.seasonName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.seasonName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库表的建立：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE if EXISTS table_user;</span><br><span class="line">CREATE TABLE table_user(</span><br><span class="line">user_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">user_name VARCHAR(32) NULL,</span><br><span class="line">address VARCHAR(32) NULL,</span><br><span class="line">season ENUM(&quot;summer @_@&quot;,&quot;spring @_@&quot;,&quot;autumn @_@&quot;,&quot;winter @_@&quot;) NULL,</span><br><span class="line">PRIMARY KEY (user_id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当使用通用<code>mapper</code>对其进行表的查询时，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Integer userId = <span class="number">1</span>;</span><br><span class="line">    User user = userService.findById(userId);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [userId=<span class="number">1</span>, userName=Justin, address=<span class="keyword">null</span>, season=<span class="keyword">null</span>]</span><br></pre></td></tr></table></figure><p>自动忽略复杂类型的属性注入。对复杂类型不进行”从类到表”的映射。</p><p>解决办法：采用<code>typeHandler</code>。设定一种规则，实现复杂类型中的字段和实体类属性的映射。即自定义类型转换器。这里举例，针对<code>Address</code>对象。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/11/22/DGku0f.png" alt="image-20201122151103225"></p><p>首先顶级接口：<code>TypeHandler</code>，其实现接口为：</p><p><code>public abstract class BaseTypeHandler&lt;T&gt; extends TypeReference&lt;T&gt; implements TypeHandler&lt;T&gt;</code>是一个抽象类，其抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将parameter对象转换为字符串存入到ps对象的i位置上，此方法对应从Address转换为字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从结果集中获取数据库中对应查询结果；分别从列名、列索引、CallableStatement中获取</span></span><br><span class="line"><span class="comment">// 将字符串还原为原始的T类型对象</span></span><br><span class="line"><span class="comment">// 此三种方法对应从字符串转换为Address对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure><h4 id="2-4-3-自定义类型处理器的编写"><a href="#2-4-3-自定义类型处理器的编写" class="headerlink" title="2.4.3 自定义类型处理器的编写"></a>2.4.3 自定义类型处理器的编写</h4><p>接下来编写<code>AddressHandler</code>转换器的编写 —— 各个值之间使用<code>,</code>分开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">Address</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, Address parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象为空则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (parameter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义以 , 进行分割、拼接字符串</span></span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String province = parameter.getProvince();</span><br><span class="line">        String city = parameter.getCity();</span><br><span class="line">        String street = parameter.getStreet();</span><br><span class="line">        builder.append(province)</span><br><span class="line">            .append(<span class="string">","</span>)</span><br><span class="line">            .append(city)</span><br><span class="line">            .append(<span class="string">","</span>)</span><br><span class="line">            .append(street);</span><br><span class="line">        ps.setString(i, builder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String parameter = rs.getString(columnName);</span><br><span class="line">        <span class="comment">// Address字段中不含值或者没有按规则存放，则返回Null</span></span><br><span class="line">        <span class="keyword">if</span> (parameter == <span class="keyword">null</span> || parameter.length() == <span class="number">0</span> || !parameter.contains(<span class="string">","</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Address address = <span class="keyword">new</span> Address();</span><br><span class="line">        address.setProvince(parameter.split(<span class="string">","</span>)[<span class="number">0</span>]);</span><br><span class="line">        address.setCity(parameter.split(<span class="string">","</span>)[<span class="number">1</span>]);</span><br><span class="line">        address.setStreet(parameter.split(<span class="string">","</span>)[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String parameter = rs.getString(columnIndex);</span><br><span class="line">        <span class="comment">// Address字段中不含值或者没有按规则存放，则返回Null</span></span><br><span class="line">        <span class="keyword">if</span> (parameter == <span class="keyword">null</span> || parameter.length() == <span class="number">0</span> || !parameter.contains(<span class="string">","</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Address address = <span class="keyword">new</span> Address();</span><br><span class="line">        address.setProvince(parameter.split(<span class="string">","</span>)[<span class="number">0</span>]);</span><br><span class="line">        address.setCity(parameter.split(<span class="string">","</span>)[<span class="number">1</span>]);</span><br><span class="line">        address.setStreet(parameter.split(<span class="string">","</span>)[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String parameter = cs.getString(columnIndex);</span><br><span class="line">        <span class="comment">// Address字段中不含值或者没有按规则存放，则返回Null</span></span><br><span class="line">        <span class="keyword">if</span> (parameter == <span class="keyword">null</span> || parameter.length() == <span class="number">0</span> || !parameter.contains(<span class="string">","</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Address address = <span class="keyword">new</span> Address();</span><br><span class="line">        address.setProvince(parameter.split(<span class="string">","</span>)[<span class="number">0</span>]);</span><br><span class="line">        address.setCity(parameter.split(<span class="string">","</span>)[<span class="number">1</span>]);</span><br><span class="line">        address.setStreet(parameter.split(<span class="string">","</span>)[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-4-注册自定义类型处理器"><a href="#2-4-4-注册自定义类型处理器" class="headerlink" title="2.4.4 注册自定义类型处理器"></a>2.4.4 注册自定义类型处理器</h4><h5 id="2-4-4-1-方法一、字段级别：-ColumnType注解"><a href="#2-4-4-1-方法一、字段级别：-ColumnType注解" class="headerlink" title="2.4.4.1 方法一、字段级别：@ColumnType注解"></a>2.4.4.1 方法一、字段级别：<code>@ColumnType</code>注解</h5><p>即在对应的实体类中的属性上加入<code>@ColumnType(typeHandler=AddressTypeHandler.class)</code>注解进行标定。</p><p>这里是在<code>User</code>中的<code>Address</code>属性上加入此注解。</p><h5 id="2-4-4-2-方法二、全局级别：在Mybatis配置文件中配置typeHandlers"><a href="#2-4-4-2-方法二、全局级别：在Mybatis配置文件中配置typeHandlers" class="headerlink" title="2.4.4.2 方法二、全局级别：在Mybatis配置文件中配置typeHandlers"></a>2.4.4.2 方法二、全局级别：在Mybatis配置文件中配置typeHandlers</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"cn.lizhi.Handler.AddressHandler"</span> <span class="attr">javaType</span>=<span class="string">"cn.lizhi.domain.Address"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时对<code>Address</code>类复杂类型的注入进行测试，查询的返回结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Integer userId = <span class="number">1</span>;</span><br><span class="line">    User user = userService.findById(userId);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">User [userId=1, userName=Justin, address=Address&#123;province='aaa', city='bbb', street='ccc'&#125;, season=null]</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><h4 id="2-4-5-枚举类型的转换"><a href="#2-4-5-枚举类型的转换" class="headerlink" title="2.4.5 枚举类型的转换"></a>2.4.5 枚举类型的转换</h4><p>方法一：让通用Mapper把枚举类型作为简单类型处理</p><p>增加一个通用mapper的配置项，即在通用mapper的配置项中配置<code>enumAsSimpleType=true</code>，其本质是使用了<code>EnumTypeHandler</code>处理器。</p><p>方法二：为枚举类型配置对应的类型处理器</p><p>思路同Address转换为String，和String转化为Address思路相同。可以将枚举对象和String相互转换。</p><p>配置类型处理器</p><ol><li><p>内置</p><ul><li><code>org.apache.ibatis.type.EnumTypeHandler</code>：在数据库中配置的是枚举值本身</li><li><code>org.apache.ibatis.type.EnumOrdinalTypeHandler</code>：在数据库中存的是枚举类型的索引值(因为在枚举类型中，值是固定的)</li></ul></li><li><p>自定义</p></li><li><p>内置处理器使用说明</p><p>不能使用<code>@ColumnType</code>注解注册Mybatis原生注解；只能在<code>Mybatis</code>全局配置文件中进行属性配置,并在属性上使用<code>@Column</code>注解。如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"org.apache.ibatis.type.EnumTypeHandler"</span> <span class="attr">javaType</span>=<span class="string">"cn.lizhi.domain.SeasonEnum"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><blockquote><p><a href="https://github.com/abel533/Mapper/wiki" target="_blank" rel="noopener">通用Mapper官方文档</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Mapper </tag>
            
            <tag> MBG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm框架的整合</title>
      <link href="/2020/11/18/ssm%E6%A1%86%E6%9E%B6%E7%9A%84%E6%95%B4%E5%90%88/"/>
      <url>/2020/11/18/ssm%E6%A1%86%E6%9E%B6%E7%9A%84%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>初学<code>Spring</code>、<code>SpringMVC</code>以及<code>Mybatis</code>时，将其整合时步骤繁多，新手容易不理解，面对繁多的<code>XML</code>配置，往往也不易跑通代码，这里用于记录一次整合的配置。</p><p>整合的目的：通过<code>Spring</code>的<code>IoC</code>和<code>AOP</code>对组件进行管理。即：通过<code>IoC</code>解决组件间的动态依赖注入；通过<code>AOP</code>来对事务进行控制，即通过<code>Spring</code>来整合<code>SpringMVC</code>及<code>Mybatis</code>。</p><p>想法：对<code>Mybatis</code>的整合是，在<code>Service</code>层调用<code>dao</code>层的接口时，使其自动装配。</p><p>首先：一张数据库表对应一个实体类，一个实体类对应一张<code>Mapper.xml</code>配置文件。在<code>resources</code>文件夹下创建一个<code>mapper</code>文件夹，用于存放实体类的<code>Mapper</code>文件。这里创建<code>EmployeeMapper.xml</code>配置文件。</p><a id="more"></a><h3 id="一、pom-xml相关配置"><a href="#一、pom-xml相关配置" class="headerlink" title="一、pom.xml相关配置"></a>一、pom.xml相关配置</h3><h4 id="1-1-pom-xml中properties版本控制"><a href="#1-1-pom-xml中properties版本控制" class="headerlink" title="1.1 pom.xml中properties版本控制"></a>1.1 <code>pom.xml</code>中<code>properties</code>版本控制</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-Spring相关依赖导入"><a href="#1-2-Spring相关依赖导入" class="headerlink" title="1.2 Spring相关依赖导入"></a>1.2 Spring相关依赖导入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 切入点表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springAOP  AOP核心功能，例如代理工厂等 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springIOC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring的web依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring整合junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringJDBC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-Mybatis及Mybatis-Spring适配包依赖导入"><a href="#1-3-Mybatis及Mybatis-Spring适配包依赖导入" class="headerlink" title="1.3 Mybatis及Mybatis-Spring适配包依赖导入"></a>1.3 Mybatis及Mybatis-Spring适配包依赖导入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mybatis与Spring整合的中间适配包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-数据库相关"><a href="#1-4-数据库相关" class="headerlink" title="1.4 数据库相关"></a>1.4 数据库相关</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-5-其他相关"><a href="#1-5-其他相关" class="headerlink" title="1.5 其他相关"></a>1.5 其他相关</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet、jsp、jstl表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入pageHelper分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MBG --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--JSR303数据校验支持；tomcat7及以上的服务器，</span></span><br><span class="line"><span class="comment">  tomcat7以下的服务器：el表达式。额外给服务器的lib包中替换新的标准的el</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对json处理的包，即能够使用@ResponseBody --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、Mybatis相关配置文件"><a href="#二、Mybatis相关配置文件" class="headerlink" title="二、Mybatis相关配置文件"></a>二、Mybatis相关配置文件</h3><h4 id="2-1-Mybatis-config-xml配置文件"><a href="#2-1-Mybatis-config-xml配置文件" class="headerlink" title="2.1 Mybatis-config.xml配置文件"></a>2.1 Mybatis-config.xml配置文件</h4><p>创建<code>conf</code>文件夹，在其下方创建<code>Mybatis-config.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span> <span class="comment">&lt;!-- 引入Mybatis的配置声明dtd文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbcConfig.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.lizhi.domain.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lizhi.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 若想让environments环境起作用，下列的标签中的配置都需要起作用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql(default的值)环境 id值等于default的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源(连接池 -\- druid、c3p0..) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置数据库连接的基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"./mappers/EmployeeMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-数据库连接配置文件-——-jdbcConfig-properties"><a href="#2-2-数据库连接配置文件-——-jdbcConfig-properties" class="headerlink" title="2.2 数据库连接配置文件 —— jdbcConfig.properties"></a>2.2 数据库连接配置文件 —— jdbcConfig.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://url:3306/mybatis?characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h4 id="2-3-实体类对应的映射文件Mapper"><a href="#2-3-实体类对应的映射文件Mapper" class="headerlink" title="2.3 实体类对应的映射文件Mapper"></a>2.3 实体类对应的映射文件Mapper</h4><p>在<code>conf</code>文件夹下创建<code>mappers</code>文件包，继而用于存放全部的实体类映射文件。这里创建<code>EmployeeMapper.xml</code>配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lizhi.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有，resultType的作用就是返回封装的位置。这里是对User对象进行封装 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"employee"</span>&gt;</span></span><br><span class="line">        SELECT *FROM employee;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、web-xml相关配置文件"><a href="#三、web-xml相关配置文件" class="headerlink" title="三、web.xml相关配置文件"></a>三、web.xml相关配置文件</h3><h4 id="3-1-Spring的配置文件的加载"><a href="#3-1-Spring的配置文件的加载" class="headerlink" title="3.1 Spring的配置文件的加载"></a>3.1 Spring的配置文件的加载</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Spring的监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置加载类路径的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-前端控制器-——-对SpringMVC配置文件的加载"><a href="#3-2-前端控制器-——-对SpringMVC配置文件的加载" class="headerlink" title="3.2 前端控制器 —— 对SpringMVC配置文件的加载"></a>3.2 前端控制器 —— 对SpringMVC配置文件的加载</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置前端控制器：服务器启动必须加载，需要加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务器启动的时候，让DispatcherServlet对象创建 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-中文乱码过滤器"><a href="#3-3-中文乱码过滤器" class="headerlink" title="3.3 中文乱码过滤器"></a>3.3 中文乱码过滤器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-Restful风格配置"><a href="#3-4-Restful风格配置" class="headerlink" title="3.4 Restful风格配置"></a>3.4 Restful风格配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4、使用Rest风格的URI，将页面普通的post请求转为指定的delete或者put请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、SpringMVC配置文件的编写-——-Spring-servlet-xml"><a href="#四、SpringMVC配置文件的编写-——-Spring-servlet-xml" class="headerlink" title="四、SpringMVC配置文件的编写 —— Spring-servlet.xml"></a>四、SpringMVC配置文件的编写 —— Spring-servlet.xml</h3><p><code>SpringMVC</code>只是用来控制网站跳转逻辑。首先导入相关的名称空间。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-1-自动扫描所有的组件-——-只对控制器进行扫描"><a href="#4-1-自动扫描所有的组件-——-只对控制器进行扫描" class="headerlink" title="4.1 自动扫描所有的组件 —— 只对控制器进行扫描"></a>4.1 自动扫描所有的组件 —— 只对控制器进行扫描</h4><p>采用注解扫描，只扫描控制器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringMVC的配置文件，包含网站跳转逻辑的控制，配置  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lizhi"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只扫描控制器，采用注解扫描的方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-Springmvc处理器的配置-两个基本配置"><a href="#4-2-Springmvc处理器的配置-两个基本配置" class="headerlink" title="4.2 Springmvc处理器的配置(两个基本配置)"></a>4.2 Springmvc处理器的配置(两个基本配置)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--两个标准配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将springmvc不能处理的请求交给tomcat --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 能支持springmvc更高级的一些功能，JSR303校验，快捷的ajax...映射动态请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-视图解析器"><a href="#4-3-视图解析器" class="headerlink" title="4.3 视图解析器"></a>4.3 视图解析器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置视图解析器，方便页面返回  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-静态资源的处理"><a href="#4-4-静态资源的处理" class="headerlink" title="4.4 静态资源的处理"></a>4.4 静态资源的处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置静态资源不过滤 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/static/js/"</span> <span class="attr">mapping</span>=<span class="string">"/static/js/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/font/"</span> <span class="attr">mapping</span>=<span class="string">"/font/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/static/"</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、Spring的配置文件-——-applicationContext-xml"><a href="#五、Spring的配置文件-——-applicationContext-xml" class="headerlink" title="五、Spring的配置文件 —— applicationContext.xml"></a>五、Spring的配置文件 —— applicationContext.xml</h3><p>通过<code>Spring</code>来管理所有的业务逻辑组件。</p><h4 id="5-1-名称空间"><a href="#5-1-名称空间" class="headerlink" title="5.1 名称空间"></a>5.1 名称空间</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-配置注解扫描"><a href="#5-2-配置注解扫描" class="headerlink" title="5.2 配置注解扫描"></a>5.2 配置注解扫描</h4><p><code>controller</code>层交由给<code>SpringMVC</code>进行管理控制。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解扫描，不扫描controller层，controller层交给SpringMVC进行管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lizhi"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-3-业务逻辑等相关配置"><a href="#5-3-业务逻辑等相关配置" class="headerlink" title="5.3 业务逻辑等相关配置"></a>5.3 业务逻辑等相关配置</h4><p><code>Spring</code>用来控制业务逻辑。数据源、事务控制、<code>aop</code>等等都交由<code>Spring</code>进行控制。</p><p>数据源配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入数据源配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:dbconfig.properties"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pooledDataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事务控制：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--控制住数据源  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"pooledDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务增强，事务如何切入  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 所有方法都是事务方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以get开始的所有方法 只读  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启基于注解的事务，使用xml配置形式的事务（必要、主要的都是使用配置式）  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lizhi.service..*(..))"</span> <span class="attr">id</span>=<span class="string">"txPoint"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务增强 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPoint"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>整合mybatis：</p><p>目的：</p><ol><li><p><code>spring</code>来管理所有组件，即管理<code>mapper</code>的实现类。</p><p><code>service ==》dao @Autowired:自动注入mapper</code>;</p></li><li><p><code>spring</code>用来管理事务，<code>spring</code>声明式事务。</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建SqlSessionFactory对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定mybatis全局配置文件的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"pooledDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定mybatis，mapper文件的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描所有dao接口的实现，加入到ioc容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.lizhi.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置一个可以执行批量的sqlSession --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"executorType"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-4-重写Mybatis主配置文件"><a href="#5-4-重写Mybatis主配置文件" class="headerlink" title="5.4 重写Mybatis主配置文件"></a>5.4 重写Mybatis主配置文件</h4><p>当在<code>Spring</code>的配置文件中整合了<code>Mybatis</code>后，需要将<code>Mybatis</code>中主配置文件中多余的信息删除，此时<code>Mybatis</code>主配置文件只用来Mybatis中自身的配置，其余的交给<code>Spring</code>，进行管理。此时配置结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Mybatis的配置声明dtd文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lizhi.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="六-测试"><a href="#六-测试" class="headerlink" title="六 测试"></a>六 测试</h3><h4 id="6-1-dao层的编写"><a href="#6-1-dao层的编写" class="headerlink" title="6.1 dao层的编写"></a>6.1 dao层的编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Employee <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-service层的编写"><a href="#6-2-service层的编写" class="headerlink" title="6.2 service层的编写"></a>6.2 service层的编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeServiceImpl</span>  <span class="keyword">implements</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = employeeDao.findAll();</span><br><span class="line">        <span class="keyword">return</span> employees;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-controller层的编写"><a href="#6-3-controller层的编写" class="headerlink" title="6.3 controller层的编写"></a>6.3 controller层的编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/emps"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/allEmp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllEmployee</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = employeeService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"employees"</span>, employees);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"all"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-EmployeeMapper-xml的编写"><a href="#6-4-EmployeeMapper-xml的编写" class="headerlink" title="6.4 EmployeeMapper.xml的编写"></a>6.4 EmployeeMapper.xml的编写</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lizhi.dao.EmployeeDao"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"empFindAll"</span> <span class="attr">type</span>=<span class="string">"employee"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"empId"</span> <span class="attr">column</span>=<span class="string">"emp_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"empName"</span> <span class="attr">column</span>=<span class="string">"emp_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"empSalary"</span> <span class="attr">column</span>=<span class="string">"emp_salary"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"empAge"</span> <span class="attr">column</span>=<span class="string">"emp_age"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"employee"</span>&gt;</span></span><br><span class="line">        SELECT * FROM table_emp WHERE id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"empFindAll"</span>&gt;</span></span><br><span class="line">        SELECT * FROM table_emp;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> ssm </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot自定义starter</title>
      <link href="/2020/11/15/Springboot%E8%87%AA%E5%AE%9A%E4%B9%89starter/"/>
      <url>/2020/11/15/Springboot%E8%87%AA%E5%AE%9A%E4%B9%89starter/</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍与定义"><a href="#一、介绍与定义" class="headerlink" title="一、介绍与定义"></a>一、介绍与定义</h3><p>本章用于记录自定义<code>Springboot-starter</code>的学习过程。</p><p>在我们自定义<code>starter</code>之前，我们首先观察一下<code>SpringBoot</code>自身的<code>starter</code>的形式都是什么样的。我们以<code>spring-boot-starter-web</code>为例。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/11/15/DFISu8.png" alt="Spring-boot-starter-web"></p><p>通过<code>spring-boot-starter-web</code>，可以看出当前引入的依赖是空的<code>JAR</code>文件。它的作用是仅提供辅助依赖管理，这些依赖可用于自动装配或者其他类库。继续点入，可以看见其引入了<code>spring-boot-starter</code>，再进一步点入，又能看见其引入了<code>spring-boot-autoconfigure</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在spring-boot-starter-web中引入了以下依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在spring-boot-starter中引入了以下依赖 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>从以上总结出，<code>starter</code>的场景需要以下两个模块：</p><ul><li>启动器模块 – <code>xx-starter</code></li><li>自动配置模块</li></ul><p>自定义<code>starters</code>，即对自动装配的组件交给<code>SpringBoot</code>管理，继而供我们使用，需满足以下条件：</p><ul><li><p>自动装配<code>Bean</code></p><p>自动装配使用配置类(<code>@Configuration</code>)结合<code>Spring</code>提供的条件判断注解<code>@Conditional</code>，即<code>SpringBoot</code>的派生注解，如：<code>@ConditionOnClass</code>完成；</p></li><li><p>配置自动装配<code>Bean</code></p><p>将标注@<code>Configuration</code>的自动配置类，放在<code>classpath</code>下<code>META-INF/spring.factories</code>文件中。</p></li></ul><p>同样，以<code>WebMvcAutoConfiguration</code>为例的自动配置编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//指定这个类是一个配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnXXX</span>  <span class="comment">//在指定条件成立的情况下自动配置类生效</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>  <span class="comment">//指定自动配置类的顺序</span></span><br><span class="line"><span class="meta">@Bean</span>  <span class="comment">//给容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationPropertie</span> <span class="comment">// 结合相关xxxProperties类来绑定相关的配置</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span> <span class="comment">//让xxxProperties生效加入到容器中</span></span><br></pre></td></tr></table></figure><p>  自动配置类要是能够加载，那么就需要将启动加载的自动配置类，配置在<code>META-INF/spring.factories</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br></pre></td></tr></table></figure><p>所有自动配置：首先它是一个自动配置类；设定起作用的条件，再将相关配置加入到容器中。</p><p>启动器：启动器模块是一个空的<code>JAR</code>文件，仅提供辅助性依赖管理，这些依赖用于自动装配或者其他类库。</p><p>总结<code>starter</code>的使用模式：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/11/15/DF5vgP.png" alt="启动器-自动配置关系"></p><p>首先编写<code>xxx-starter</code>启动器，继续编写一个<code>xxx-starter-autoconfigurer</code>自动配置类，我的启动器则依赖此自动配置类。当需要使用我们的<code>starter</code>时，则只需要直接依赖我们的<code>xxx-starter</code>启动器即可。</p><p>命名规范：</p><ul><li>官方命名空间<ul><li>前缀：<code>spring-boot-starter-</code></li><li>模式：<code>spring-boot-starter-模块名</code></li><li>例子：<code>spring-boot-starter-web</code>、<code>spring-boot-starter-actuator</code>、<code>spring-boot-starter-jdbc</code></li></ul></li><li>自定义命名空间<ul><li>后缀：<code>-spring-boot-starter</code></li><li>模式：<code>模块-spring-boot-starter</code></li><li>举例：<code>mybatis-spring-boot-starter</code></li></ul></li></ul><p>自定义<code>starter</code>步骤：创建两个模块。一个作为启动器，一个作为自动配置模块。最终的目的，启动器中包含着自动配置模块，导入依赖时是导入启动器。</p><h3 id="二、自定义Starter的编写"><a href="#二、自定义Starter的编写" class="headerlink" title="二、自定义Starter的编写"></a>二、自定义Starter的编写</h3><p>新建工程，创建两个模块。分别作为启动器模块和自动配置模块。自定义<code>hello</code>的<code>starter</code>。</p><p>启动器模块命名：<code>selfdef-spring-boot-starter</code>。</p><p>自动配置模块：<code>selfdef-spring-boot-starter-autoconfigurer</code></p><p>启动器模块：</p><p>按照之前的描述，启动器模块不写入任何内容，只在<code>pom.xml</code>中引入自动配置模块的依赖。即：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.chemlez<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selfdef-springboot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动配置模块 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.chemlez.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selfdef-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自动配置模块：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.chemlez.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selfdef-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>sefldef-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入spring-boot-starter：所有starter的基本配置  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定属性，以 chemlez.hello 为开头的配置</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"chemlez.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写<code>HelloService</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix() + <span class="string">"-"</span> + name + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>供调用<code>starter</code>的使用者使用的类。最终这个类通过自动配置类，将其添加进容器中，供使用者使用。</p><p>编写自动配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">// web应用才能够生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties<span class="class">.<span class="keyword">class</span>) // 使属性文件生效</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将service注入到容器中,共我们使用</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们编写了一个简单的<code>starter</code>。其作用，就是在页面中返回<code>HelloService</code>中的以下这个函数的返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> helloProperties.getPrefix() + <span class="string">"-"</span> + name + helloProperties.getSuffix();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，分别将<code>selfdef-spring-boot-starter</code>、<code>selfdef-spring-boot-starter-autoconfigurer</code>通过<code>Maven</code>中的<code>install</code>，将其打包进<code>Maven</code>仓库供我们使用依赖。</p><p><strong>注意</strong>：因为，<code>selfdef-spring-boot-starter</code>中引入了<code>selfdef-spring-boot-starter-autoconfigurer</code>，供在打包时，先打包后者，再打包前者。</p><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><p>创建一个新的<code>web</code>工程的<code>Springboot</code>项目，在其<code>pom.xml</code>文件中，引入上面我们自定义的<code>selfdef-spring-boot-starter</code>依赖，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.chemlez<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-09<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-starter-09<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 当前依赖就是我们前面自定义的starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.chemlez<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seldef-springboot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写控制器类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String hello = helloService.sayHello(<span class="string">"Tom"</span>);</span><br><span class="line">        <span class="keyword">return</span> hello;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件的编写。因为我们在第二节中的配置类中，设定了前缀(<code>prefix</code>)和后缀(<code>suffix</code>)。因此，要在配置文件中，将其配置出。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chemlez.hello:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">李四</span></span><br></pre></td></tr></table></figure><p>启动<code>Springboot</code>项目，访问<code>8080</code>端口下的<code>hello</code>。结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">张三-Tom李四</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot-starter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb的安装配置及基本使用</title>
      <link href="/2020/11/09/Mongodb%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/11/09/Mongodb%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>本文记载一次在阿里云服务器装载<code>Mongodb</code>并远程连接成功使用的过程记录。</p><p>基本安装环境：<code>本次安装环境：CentOS7、Mongodb版本为4.2.10</code></p><h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p>通过<code>Mongodb</code>官网，安装<code>Mongodb</code>的<a href="https://www.mongodb.com/try/download/community" target="_blank" rel="noopener">社区版本</a>，选择自己需要安装的版本以及依赖的环境。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/11/09/B7TE6O.png" alt="mongodb"></p><ol><li>在服务器打开终端，应用centos中网络下载的方式下载<code>Mongodb</code>的安装包。</li></ol><p>首先，进入服务器端的<code>usr/local</code>，在其路径下创建文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir mongodb4</span><br><span class="line">cd mongodb4</span><br></pre></td></tr></table></figure><p>在此文件夹下远程网络下载<code>Mongodb</code>的安装包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wegt https://fastdl.mongodb.org/linux/mongodb-shell-linux-x86_64-rhel70-4.4.1.tgz</span><br></pre></td></tr></table></figure><p>解压文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mongodb-linux-x86_64-rhel70-4.2.10.tgz</span><br></pre></td></tr></table></figure><p>修改压缩包名称：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mongodb-linux-x86_64-rhel70-4.2.10 mongodb4.2</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h3><ol><li>全局配置</li></ol><p>配置系统环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>写入配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Mongodb</span></span><br><span class="line">export PATH="/usr/local/mongodb4/mongodb4.2/bin:$PATH"</span><br></pre></td></tr></table></figure><p>退出保存后，输入以下命令使环境变量生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ol start="2"><li>创建<code>Mongodb</code>数据存放文件夹和日志记录文件夹。</li></ol><p>在<code>root</code>的根目录下创建以下文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/db</span><br><span class="line">mkdir -p /logs</span><br></pre></td></tr></table></figure><ol start="3"><li>创建<code>Mongodb</code>运行时使用的配置文件。</li></ol><p>进入<code>mongodb4</code>文件夹下的<code>bin</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local//mongodb4/mongodb4.2/bin/</span><br></pre></td></tr></table></figure><p>此时所在的路径为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongodb4/mongodb4.2/bin</span><br></pre></td></tr></table></figure><p>创建<code>MongoDB.conf</code>配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mongodb.conf</span><br></pre></td></tr></table></figure><p>输入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dbpath = /data/db #数据文件存放目录</span><br><span class="line">logpath = /logs/mongodb.log #日志文件存放目录</span><br><span class="line">port = 27017 #端口</span><br><span class="line">fork = true #以守护程序的方式启用，即在后台运行</span><br><span class="line"><span class="meta">#</span><span class="bash"> auth=<span class="literal">true</span> <span class="comment">#需要认证。如果放开注释，就必须创建MongoDB的账号，使用账号与密码才可远程访问，第一次安装建议注释</span></span></span><br><span class="line">bind_ip=0.0.0.0 #允许远程访问，或者直接注释，127.0.0.1是只允许本地访问</span><br></pre></td></tr></table></figure><ol start="4"><li>加载配置文件，并启动<code>MongoDB</code>服务。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod  -f  mongodb.conf</span><br></pre></td></tr></table></figure><p>通过以下命令查看端口是否映射成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -nltp|grep mongod</span><br><span class="line">或者：</span><br><span class="line">netstat -nltp|grep 27017</span><br><span class="line">或者</span><br><span class="line">ps -ef | grep mongo</span><br></pre></td></tr></table></figure><p>以上命令查看<code>MongoDB</code>是否已经启动以及端口是否成功开启。</p><h3 id="三、Mongodb启动及账号创建"><a href="#三、Mongodb启动及账号创建" class="headerlink" title="三、Mongodb启动及账号创建"></a>三、Mongodb启动及账号创建</h3><p>查看<code>bin</code>目录下的问文件目录,通过<code>ls</code>命令。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/11/09/B7Tifx.png" alt="image-20201109101402352"></p><p>目录下存在<code>mongo</code>，启动<code>mongo</code>命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/11/09/B7Tn7d.png" alt="image-20201109110713339"></p><p>以上界面是<code>MongoDB</code>启动时，采用的超级权限(即关闭了认证，不需要认证即能登录<code>MongoDB</code>)。</p><p>由于第一次使用<code>MongoDB</code>时，<code>MongoDB</code>默认不存在任何用户，所以我们在前面的配置文件中关闭了认证的权限(<code># auth=true</code>)，以方便我们后续自己能够创建一个用户使用。</p><ol><li>使用<code>admin</code>数据库(<code>admin</code>数据库用来管理用户权限)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show dbs # 展示目前的所有数据库</span><br><span class="line">-----</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">huaJT   0.013GB</span><br><span class="line">local   0.000GB</span><br><span class="line">test    0.026GB</span><br></pre></td></tr></table></figure><p>进入<code>admin</code>数据库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">----</span><br><span class="line">switched to db admin</span><br></pre></td></tr></table></figure><p>创建管理员用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; use admin</span><br><span class="line">&gt; db.createUser(</span><br><span class="line">     &#123;</span><br><span class="line">       user:&quot;root&quot;,</span><br><span class="line">       pwd:&quot;123456&quot;,</span><br><span class="line">       roles:[&#123;role:&quot;root&quot;,db:&quot;admin&quot;&#125;]</span><br><span class="line">     &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>以上字段的含义，创建一个用户，用户名是:<code>root</code>;密码是:<code>123456</code>;赋予的权限是<code>root</code>权限，可以操控的数据库有<code>admin</code>数据库，这种用户的权限较高。</p><p>下面创建一个普通用户，供我们后续的实验测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(</span><br><span class="line">        &quot;user&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;pwd&quot; : &quot;123456&quot;,</span><br><span class="line">        &quot;roles&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;role&quot; : &quot;dbOwner&quot;,</span><br><span class="line">                        &quot;db&quot; : &quot;test1&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;role&quot; : &quot;dbOwner&quot;,</span><br><span class="line">                        &quot;db&quot; : &quot;test2&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>此次创建的用户名是：<code>user</code>，密码是：<code>123456</code>；用户角色是：<code>dbOwner</code>，是<code>test1</code>和<code>test2</code>数据库的用户管理者。</p><ol start="2"><li>给创建的用户赋予权限</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth("用户名","密码")</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.auth("user","123456")</span><br><span class="line">&gt; 1</span><br><span class="line">db.auth("root","123456")</span><br><span class="line">&gt; 1</span><br></pre></td></tr></table></figure><p>出现<code>1</code>表明操作操作成功。</p><h3 id="四、远端连接配置"><a href="#四、远端连接配置" class="headerlink" title="四、远端连接配置"></a>四、远端连接配置</h3><p>通过以上三步，我们已经安装了<code>Mongodb</code>并配置了<code>Mongodb</code>相关配置文件以及创建了</p><p><code>Mongodb</code>用户。接下来，就需要对<code>Mongodb</code>进行远程连接的配置。</p><ol><li>首先开启认证，关闭<code>MongoDB</code>服务端，重新启动，刷新配置文件使其生效。</li></ol><p>进入<code>bin</code>目录下，修改<code>mongodb.conf</code>,此时的路径为：<code>/usr/local/mongodb4/mongodb4.2/bin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mongodb.conf</span><br></pre></td></tr></table></figure><p>开启用户认证(以下的全部配置)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dbpath = /data/db <span class="comment">#数据文件存放目录</span></span><br><span class="line">logpath = /logs/mongodb.log <span class="comment">#日志文件存放目录</span></span><br><span class="line">port = 27017 <span class="comment">#端口</span></span><br><span class="line">fork = true <span class="comment">#以守护程序的方式启用，即在后台运行</span></span><br><span class="line">auth = true <span class="comment">#需要认证。如果放开注释，就必须创建MongoDB的账号，使用账号与密码才可远程访问，第一次安装建议注释</span></span><br><span class="line">bind_ip=0.0.0.0 <span class="comment">#允许远程访问，或者直接注释，127.0.0.1是只允许本地访问</span></span><br></pre></td></tr></table></figure><p>关闭<code>Mongodb</code>服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod  --shutdown</span><br></pre></td></tr></table></figure><p>重新启动服务器端并刷新配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;mongod  -f  mongodb.conf</span><br></pre></td></tr></table></figure><p>此时，关于认证的配置已经全部结束，下面我们对<code>Mongodb</code>进行服务器端的使用测试。</p><p>登录<code>Mongodb</code>类似于<code>MySQL</code>，采用以下命令。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo -uroot -proot</span><br></pre></td></tr></table></figure><p>登录我们之前的创建的<code>user</code>账户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo -uuser -p123456</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/11/09/B7Tkp6.png" alt="image-20201109132946205"></p><p>由于之前，我们创建<code>user</code>账户时，给予了它对<code>test1</code>、<code>test2</code>数据库的权限；所以我们此时可以创建<code>test1</code>、<code>test2</code>并使用。</p><p>首先明确以下概念：</p><p><code>Mongodb</code>中的<code>collection</code>对应着<code>Mysql</code>中的表；</p><p><code>Mongodb</code>中的<code>document</code>对应着<code>Mysql</code>中的记录。</p><p>在<code>Mongodb</code>中创建数据库就直接使用<code>use 数据库名称</code>;例如创建<code>test1</code>数据库，则<code>use test1</code>；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test1</span><br><span class="line">switched to db test1</span><br></pre></td></tr></table></figure><p>此时系统创建了<code>test1</code>，但只是预创建。如果，我们没有对其进行任何操作，即数据库中不存在任何信息，那么当我们切出这个数据库时，系统就会释放这个数据库的内存信息，就不再存在这个数据库。</p><p>向<code>test1</code>数据库中插入<code>collection</code>，并创建<code>document</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.firstCollection.save(&#123;"name":"Tom","age":"18"&#125;)</span><br></pre></td></tr></table></figure><p>这里创建了一个<code>collection</code>-<code>firstCollection</code>。存入了姓名和年龄信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show collections # 展示数据库中的所有collection</span><br><span class="line">db.firstCollection.find() # 展示firstCollection集合的全部文档信息</span><br></pre></td></tr></table></figure><p>至此，<code>Mongodb</code>本地使用的配置已经全部配置完毕，下面是开启远程连接的操作。</p><ol start="2"><li>登录阿里云，开启服务器端的安全组；因为<code>Mongodb</code>服务器端监听的端口是<code>27017</code>，故需要配置安全组，端口号为<code>27017</code>。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/11/09/B7TA1K.png" alt="image-20201109135100424"></p><p>同时配置内网入方向规则和内网出方向规则。</p><ol start="3"><li>阿里云服务器端开启防火墙，并放行<code>27017</code>端口。</li></ol><p>查看防火墙状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>开启防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><p>关闭防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>确认<code>firewalld</code>状态:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>开放<code>27017</code>端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=27017/tcp</span><br></pre></td></tr></table></figure><p>至此，通过以上的步骤，我们配置了阿里云的内网规则；服务器端放行了<code>27017</code>端口，允许远程可以访问。</p><ol start="4"><li>测试连接</li></ol><p>打开浏览器，访问自己服务器端的<code>IP地址:端口号</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IP地址:27017</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">106.65.34.210:27017</span><br></pre></td></tr></table></figure><p>若出现以下画面，则说明远程连接访问配置成功。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/11/09/B7TVXD.png" alt="image-20201109140130873"></p><h3 id="五、本地通过Pycharm连接Mongodb"><a href="#五、本地通过Pycharm连接Mongodb" class="headerlink" title="五、本地通过Pycharm连接Mongodb"></a>五、本地通过Pycharm连接Mongodb</h3><p>我们在远程服务器端的一系列配置，就是为了能够在客户端操作<code>Mongodb</code>数据库。我们采用最简单的方式，那就是利用<code>Pycharm</code>的插件<code>Mongo Explorer</code>来帮助我们进行可视化操作。</p><p>在<code>Pycharm</code>中的插件下载等工作就不再赘述。下面即对<code>Mongodb</code>的连接的操作：</p><p>进入<code>Mongo Explorer</code>的配置，<code>General</code>项的配置为：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/11/09/B7Tene.png" alt="image-20201109140820301"></p><p><code>Label</code>:随便填写，用于标识数据库。</p><p><code>Server url(s)</code>：<code>IP地址:端口号</code>。</p><p><code>User Database</code>：连接的数据库名称。</p><p>接下来进入第二项<code>Authentication</code>，进行配置。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/11/09/B7TX4I.png" alt="image-20201109141100431"></p><p>同<code>Mysql</code>一样，填上<code>Username</code>和<code>Password</code>即可，下方的<code>Auth.mechanism</code>选择第一项。</p><p>点击<code>Test Connection</code>进行测试。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/11/09/B7Tm0H.png" alt="image-20201109141505712"></p><p>大功告成！</p><p>至此，我们完成了<code>Mongodb</code>的下载安装以及相关配置，最后到客户端对服务器端的远程连接，完成了可视化操作。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote><p>[1] <a href="https://blog.csdn.net/yzh_1346983557/article/details/81735755" target="_blank" rel="noopener">Linux安装、运行MongoDB</a></p><p>[2] <a href="https://www.cnblogs.com/whiteBear/p/12722151.html" target="_blank" rel="noopener">MongoDB用户创建</a></p><p>[3] <a href="https://www.cnblogs.com/wayneliu007/p/10372601.html" target="_blank" rel="noopener">解决FirewallD is not running问题</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之IO流</title>
      <link href="/2020/10/14/Java%E5%9F%BA%E7%A1%80%E4%B9%8BIO%E6%B5%81/"/>
      <url>/2020/10/14/Java%E5%9F%BA%E7%A1%80%E4%B9%8BIO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="一、字节流与字符流"><a href="#一、字节流与字符流" class="headerlink" title="一、字节流与字符流"></a>一、字节流与字符流</h4><ul><li>输入流：用于读取数据 – 将数据写入内存进行展示，即将数据从其他设备读取到内存中的流。</li><li>输出流：用于数据保存 – 将数据写入磁盘，可持久化存储，即将数据从内存中写出到其他设备上的流。</li></ul><p>在字节流(以字节为单位)中，输出数据使用<code>OutStream</code>类完成，输入使用的是<code>InputStream</code>类完成。（所有字节流的父类）</p><p>在字符流(以字符为单位)中，输出数据使用<code>Writer</code>类完成，输入使用<code>Reader</code>完成。（所有字符流的父类）</p><p>其中，字节流主要操作<code>byte</code>类型数据，以<code>byte</code>数组为准。</p><p>如果想对文件进行读写，首先需要创建一个文件对象，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String pathname = <span class="string">"a.txt"</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(pathname);</span><br><span class="line">        System.out.println(file); <span class="comment">// a.txt</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码段可以看出，<code>File</code>接收的参数是文件路径，返回的是<code>File</code>对象。但是，直接打印<code>File</code>时，返回的是<code>pathname</code>，即为传入的参数。所以，在<code>File</code>类中，重写了<code>toString</code>方法。后面当我们拿到<code>File</code>对象后，就可以进行后续对当前文件的一系列操作了。</p><a id="more"></a><p><code>File</code>对象常见的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String pathname = <span class="string">"in.txt"</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(pathname);</span><br><span class="line">        System.out.println(file); </span><br><span class="line">        String absolutePath = file.getAbsolutePath(); <span class="comment">// 获取in.txt文件的绝对路径 --&gt;String</span></span><br><span class="line">        File absoluteFile = file.getAbsoluteFile(); <span class="comment">// 获取的是文件对象</span></span><br><span class="line">        String name = absoluteFile.getName(); <span class="comment">// 文件名 --&gt; in.txt</span></span><br><span class="line">        <span class="keyword">long</span> length = absoluteFile.length(); <span class="comment">// 文件长度</span></span><br><span class="line">        <span class="keyword">long</span> length1 = file.length(); <span class="comment">// 同上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、字节流的读写操作"><a href="#二、字节流的读写操作" class="headerlink" title="二、字节流的读写操作"></a>二、字节流的读写操作</h4><h5 id="1-字节流的输出"><a href="#1-字节流的输出" class="headerlink" title="1.字节流的输出"></a>1.字节流的输出</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><br><span class="line">字节流的写入</span><br><span class="line"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"test1.txt"</span>)</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file, <span class="keyword">true</span>);<span class="comment">// 在原有的内容进行追加</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes1 = <span class="string">"问:请再添加一条会怎么样"</span>.getBytes(); <span class="comment">// 获取输入的字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="string">"\n"</span>.getBytes(); <span class="comment">// 换行</span></span><br><span class="line">        fos.write(b);</span><br><span class="line">        fos.write(bytes1);</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/24/dBo6aV.png" alt="文件存储原理"></p><h5 id="2-字节流的读取"><a href="#2-字节流的读取" class="headerlink" title="2.字节流的读取"></a>2.字节流的读取</h5><details><summary>字节流的读取</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       File file = <span class="keyword">new</span> File(<span class="string">"test1.txt"</span>)</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">// 设置一次读取的字节数组长度</span></span><br><span class="line">        <span class="keyword">int</span> length = -<span class="number">1</span>; <span class="comment">// </span></span><br><span class="line">        <span class="keyword">while</span> ((length = fis.read(bytes)) != -<span class="number">1</span>) &#123; <span class="comment">// 循环</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, length));</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>当一次读取一个字节时，<code>length</code>中存放的是对应字节的<code>ASCII</code>码数值；当一次读取多个字符时，<code>length</code>中记录的是数组的有效长度。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/24/dBoDrn.png" alt="字节流读取文件"></p><p>对上图中一次读取多个字节的思考：</p><p>上图右边读取多个字符中，在读取时，若没有指定数组的有效长度，会出现重复的情况。例如：这里我们期望读取到是<code>ABCDE</code>,但最终的情况会是<code>ABCDEDED</code>。这里设定的缓冲区读取的数组长度为2。</p><p>第一次读取时：缓冲区数组对应的内容是<code>{A,B}</code>(这里对应的其实是<code>ASCII</code>码)。len = 2.</p><p>第二次读取时：读取到缓冲区对应的内容是<code>{C,D}</code>，len = 2.</p><p><strong>第三次读取时</strong>：读取到缓冲区对应内容，只有E，但是原来的数组中存储的是<code>{C,D}</code>,故将E覆盖C。所以此时缓冲区对应的内容是<code>{E,D}</code>，len = 1.故此轮输出是<code>ED</code>。</p><p><strong>注意：</strong>又因为没有返回-1,所以继续读取。</p><p>第四次读取时：文件中没有有效内容，返回-1。但数组中是<code>{E,D}</code>，所以再次打印时，还是<code>ED</code>。</p><p>因此在读取操作时，需要注意两点：</p><ol><li><p>未读取到有效内容，返回-1时，则停止读取。</p><p><code>while(len != -1){}</code></p></li><li><p>读取时，指定数组的有效长度，而数组的有效长度，又可以通过<code>len</code>进行指定。</p><p> <code>new String(bytes,0,len)</code></p></li></ol><h5 id="3-案例-—-统计并打印指定文件夹-java文件"><a href="#3-案例-—-统计并打印指定文件夹-java文件" class="headerlink" title="3.案例 — 统计并打印指定文件夹.java文件"></a>3.案例 — 统计并打印指定文件夹<code>.java</code>文件</h5><p><strong>思路:</strong></p><ul><li>一个文件夹下可能既包含文件，又包含文件夹。所以采取的方式是：遇到文件夹就继续进入，遇到文件则判断文件是否是<code>.java</code>文件，故采用递归的方式。</li><li>由于我们需要过滤出<code>.java</code>文件，所以我们有两种方法：<ol><li>对文件名进行判断<code>.endWith(&quot;.java&quot;)</code>。</li><li>实现<code>FileFilter</code>接口，重写其中的<code>accept</code>方法。</li></ol></li></ul><details><summary>accept接口实现的方式</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class FileFilterImpl implements FileFilter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean accept(File pathname) &#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    判断：</span><br><span class="line">    1.是否是文件</span><br><span class="line">    2.文件名后缀是否为.java</span><br><span class="line">    不满足返回false,满足则返回true</span><br><span class="line">    *&#x2F;</span><br><span class="line">        if (pathname.isFile() &amp;&amp; !pathname.getName().endsWith(&quot;.java&quot;)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>主方法的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindJavaDemo05</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// 用于记录.java文件的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"../"</span>); <span class="comment">// 选取的文件夹</span></span><br><span class="line">        getAllFile(file);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFile</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilterImpl()); <span class="comment">// 获取子文件及子文件夹 -- 并采用文件过滤器</span></span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.isDirectory()) &#123; <span class="comment">// 当前对象是文件夹，则递归调用</span></span><br><span class="line">                getAllFile(f);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则打印出.java并记录</span></span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>对<code>File[] files = dir.listFiles(new FileFilterImpl())</code>的思考：</strong></p><p>其中接口实现<code>accept</code>方法，用于过滤满足方法体条件的文件对象。</p><p>首先<code>dir.listFiles</code>遍历出每一个<code>File</code>对象，每一个都作为<code>FileFilterImpl</code>中<code>accpet</code>方法的参数进行传入。</p><p>然后，调用<code>accpet</code>函数，对当前传入的参数（<code>File</code>对象)进行判断操作。如果满足方法体条件，返回<code>true</code>，否则返回<code>false</code>。</p><p>最后，当<code>.listFiles</code>接收到<code>true</code>时，就将当前的<code>File</code>对象添加入<code>File[]</code>数组中，否则就不加入。</p><h4 id="三、字符流的读写操作"><a href="#三、字符流的读写操作" class="headerlink" title="三、字符流的读写操作"></a>三、字符流的读写操作</h4><p>字符流以字符为单位，专门用于处理文本文件。若用字节流读取中文字符时，可能不会显示完整的字符，因为一个中文字符可能占用多个字节存储。</p><p>同样在字符输出流中，同样有<code>Reader</code>和<code>Writer</code>两种读取和写入的抽象类。</p><ul><li><p><code>Reader</code></p><p>用于读取字符流的所有类的超类，可以读取字符信息到内存中。其中，字符输入流的基本共性功能方法有：</p><ul><li><code>public void close()</code>:关闭此流并释放与此流相关联的任何系统资源。</li><li><code>public void read()</code>:从输入流读取一个字符。</li><li><code>public void read(char[] cbuf)</code>:从输入流中读取一些字符，并将它们存储到字符数组<code>cbuf</code>中。</li></ul></li><li><p><code>Writer</code></p><p>用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。以下为字节输出流的基本共性功能方法。</p><ul><li><code>void write(int c)</code>:写入单个字符。</li><li><code>void write(char[] cbuf)</code>:写入字符数组。</li><li><code>abstract void write(char[] cbuf,int off,int len)</code>:写入字符数组的某一部分，<code>off</code>数组的开始索引，<code>len</code>写的字符个数。</li><li><code>void write(String str)</code>:写入字符串。</li><li><code>void write(String str,int off,int len)</code>:写入字符串的某一部分，<code>off</code>数组的开始索引,<code>len</code>写的字符个数。</li><li><code>void flush()</code>:刷新该流的缓冲。</li><li><code>void close()</code>:关闭此流，再次此前先进行刷新。</li></ul></li></ul><p>以上可对<code>OutStream</code>和<code>InStream</code>进行类比。</p><h5 id="1-FileReader类"><a href="#1-FileReader类" class="headerlink" title="1.FileReader类"></a>1.FileReader类</h5><p><strong>注意:</strong>读取文件时，构造时使用系统默认的字符编码和默认字节缓冲区。</p><ul><li>字符编码：字节与字符的对应规则。<code>idea</code>中默认的是<code>UTF-8</code></li><li>字节缓冲区：一个字节数组，用来临时存储字节数据。</li></ul><p><strong>构造方法</strong></p><ul><li><code>FileWriter(File file)</code></li><li><code>FileWriter(String name)</code></li></ul><p>具体使用方法等同<code>FileInputStream</code>，字节输入流。</p><h5 id="2-FileWriter"><a href="#2-FileWriter" class="headerlink" title="2.FileWriter"></a>2.FileWriter</h5><p>其构造时使用系统默认的字符编码和默认字节缓冲区。</p><p><strong>构造方法</strong></p><ul><li><code>FileWriter(File file)</code>:创建一个新的<code>FileWriter</code>，给定要读取的<code>File</code>对象。</li><li><code>FileWriter(String fileName)</code>:同上，传入的参数是文件的名称（路径）。</li></ul><p>其使用方法同字节流的使用，需要注意的一点是：在写出数据以后，如果未调用<code>close</code>方法，数据只是保存到了缓冲区，并未写出到文件中。因此，字节流在操作时本身不会用到缓冲区（内存），是文件本身操作的。</p><p>字符流在操作时使用了缓冲区，通过缓冲区再操作文件。</p><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。当既想写出数据，又想继续使用流，就需要<code>flush</code>方法。</p><ul><li><code>flush</code>:刷新缓冲区，流对象可以继续使用。</li><li><code>close</code>:先刷新缓冲区，然后通知系统释放资源。流对象不可以再使用了。</li></ul><p>输出同字节输出流。</p><p><strong>1.写出字符数组</strong></p><p><code>string.toCharArray()</code></p><p><strong>2.写出字符串</strong></p><p><code>writer(String str)，writer(String str,int off,int len)</code></p><h4 id="四、属性集"><a href="#四、属性集" class="headerlink" title="四、属性集"></a>四、属性集</h4><p><code>java.util.Properties</code> 继承于<code>Hashtable</code> ，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。该类也被许多<code>Java</code>类使用，比如获取系统属性时，<code>System.getProperties</code> 方法就是返回一个<code>Properties</code>对象。</p><h5 id="4-1-Properties类"><a href="#4-1-Properties类" class="headerlink" title="4.1 Properties类"></a>4.1 Properties类</h5><ol><li><p>构造方法</p><ul><li><code>public Properties()</code> :创建一个空的属性列表。</li></ul></li><li><p>基本的存储方法</p><ul><li><p><code>public Object setProperty(String key, String value)</code> ： 保存一对属性。  </p></li><li><p><code>public String getProperty(String key)</code> ：使用此属性列表中指定的键搜索属性值。</p></li><li><p><code>public Set&lt;String&gt; stringPropertyNames()</code> ：所有键的名称的集合。</p></li></ul><p>通常在不知道键值的情况下，获取其键值的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建属性集对象</span></span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="comment">// 添加键值对元素</span></span><br><span class="line">    properties.setProperty(<span class="string">"filename"</span>, <span class="string">"a.txt"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"length"</span>, <span class="string">"209385038"</span>);</span><br><span class="line">    properties.setProperty(<span class="string">"location"</span>, <span class="string">"D:\\a.txt"</span>);     </span><br><span class="line">    <span class="comment">// 遍历属性集,获取所有键的集合</span></span><br><span class="line">    Set&lt;String&gt; strings = properties.stringPropertyNames();</span><br><span class="line">    <span class="comment">// 打印键值对</span></span><br><span class="line">    <span class="keyword">for</span> (String key : strings ) &#123;</span><br><span class="line">      System.out.println(key+<span class="string">" -- "</span>+properties.getProperty(key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="4-2-与流相关的方法"><a href="#4-2-与流相关的方法" class="headerlink" title="4.2 与流相关的方法"></a>4.2 与流相关的方法</h5><ul><li><code>public void load(InputStream inStream)</code>： 从字节输入流中读取键值对。 </li></ul><p>参数中使用了字节输入流，通过流对象，可以关联到某文件上，这样就能够加载文本中的数据了。文本数据格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filename=a.txt</span><br><span class="line">length=<span class="number">209385038</span></span><br><span class="line">location=D:\a.txt</span><br></pre></td></tr></table></figure><blockquote><p>文本中的数据必须是键值对格式，可以冒号，逗号，等号等符号分隔。</p></blockquote><p>加载代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建属性集对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 加载文本中信息到属性集</span></span><br><span class="line">        pro.load(<span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>));</span><br><span class="line">        <span class="comment">// 遍历集合并打印</span></span><br><span class="line">        Set&lt;String&gt; strings = pro.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : strings ) &#123;</span><br><span class="line">          System.out.println(key+<span class="string">" -- "</span>+pro.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">filename -- a.txt</span><br><span class="line">length -- <span class="number">209385038</span></span><br><span class="line">location -- D:\a.txt</span><br></pre></td></tr></table></figure><h4 id="五、缓冲流"><a href="#五、缓冲流" class="headerlink" title="五、缓冲流"></a>五、缓冲流</h4><p>缓冲流，也是高效流，是对4个基本的<code>FileXxx</code>流的增强，所以对应的也是4个流。同理按照数据类型分类：</p><ul><li><strong>字节缓冲流:</strong><code>BufferedInputStream</code>、<code>BufferedOutputStream</code></li><li><strong>字符缓冲流:</strong><code>BufferedReader</code>、<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理，是在创建流对象时，会<strong>创建一个内置的默认大小的缓冲区数组</strong>，通过缓冲区读写，减少系统<code>IO</code>次数，从而提高读写的效率。</p><h5 id="5-1-字节缓冲流"><a href="#5-1-字节缓冲流" class="headerlink" title="5.1 字节缓冲流"></a>5.1 字节缓冲流</h5><p><strong>1. 构造方法</strong></p><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个新的缓冲输入流，传递字节输入流。</li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流，传递字节输出流。</li></ul><p><strong>2.用例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"/navicat120_premium_en.dmg"</span>)); <span class="comment">// 创建字节输入缓冲区</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.dmg"</span>)); <span class="comment">// 字节输出缓冲区</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">// 缓冲数组 -- 1024</span></span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            bos.write(bytes, <span class="number">0</span>, len); <span class="comment">// 输出 -- 写入数据</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-字符缓冲流"><a href="#5-2-字符缓冲流" class="headerlink" title="5.2 字符缓冲流"></a>5.2 字符缓冲流</h5><p><strong>1.构造方法</strong></p><ul><li><code>public BufferedReader(Reader in)</code> ：创建一个新的缓冲输入流。 </li><li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符缓冲输入流</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"br.txt"</span>));</span><br><span class="line"><span class="comment">// 创建字符缓冲输出流</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"bw.txt"</span>));</span><br></pre></td></tr></table></figure><p><strong>2.特有方法</strong></p><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p><ul><li><code>BufferedReader</code>：<code>public String readLine()</code>: 读一行文字。 </li><li><code>BufferedWriter</code>：<code>public void newLine()</code>: 写一行分隔符,由系统属性定义符号。 </li></ul><p><code>readLine</code>方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// 创建流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>));</span><br><span class="line"><span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line">        String line  = <span class="keyword">null</span>; </span><br><span class="line">      <span class="comment">// 循环读取,读取到最后返回null,可以把readLine看做是一个指针</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123; </span><br><span class="line">            System.out.print(line);</span><br><span class="line">            System.out.println(<span class="string">"------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newLine</code>方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriterDemo</span> <span class="title">throws</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">      <span class="comment">// 创建流对象</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>));</span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">        bw.write(<span class="string">"Hello"</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">"World"</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">"!"</span>);</span><br><span class="line">        bw.newLine(); <span class="comment">// 输出换行</span></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        bw.close(); <span class="comment">// </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出效果:</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">!</span><br></pre></td></tr></table></figure><p><strong>3.原理</strong></p><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/10/14/04Hlad.png" alt="缓冲区原理"></h5><p>由上图可以看到，当我们使用普通的字节输出流时，由<code>OS</code>进行内存到硬盘的读写时，字符是一个一个读取，这样增加了文件从内存(其中经过缓存)读取到磁盘次数，从而增加了读取的时间；当我们使用缓冲流时，每次操作系统从内存读取到缓冲区的数据就是多个字符，然后再读取到硬盘，由于每次读取的数量多了，那么总的读取次数就肯定减少了，所以就能够减少我们读写的时间。</p><h4 id="六、转换流"><a href="#六、转换流" class="headerlink" title="六、转换流"></a>六、转换流</h4><h5 id="6-1-字符编码和字符集"><a href="#6-1-字符编码和字符集" class="headerlink" title="6.1 字符编码和字符集"></a>6.1 字符编码和字符集</h5><ol><li><strong>字符编码</strong></li></ol><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/10/14/04HJRP.jpg" alt=""></p><p>编码：字符-&gt;字节</p><p>解码：字节-&gt;字符</p><ul><li><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。<ul><li>编码表:生活中文字和计算机中二进制的对应规则</li></ul></li></ul><h5 id="图片转换流图解-桥梁"><a href="#图片转换流图解-桥梁" class="headerlink" title="图片转换流图解-桥梁"></a>图片转换流图解-桥梁</h5><ol start="2"><li><strong>字符集</strong></li></ol><ul><li><strong>字符集 <code>Charset</code></strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有<code>ASCII</code>字符集、<code>GBK</code>字符集、<code>Unicode</code>字符集等。</p><h5 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/10/14/04bdl6.jpg" alt=""></h5><p>当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><h5 id="6-2-InputStreamReader类"><a href="#6-2-InputStreamReader类" class="headerlink" title="6.2 InputStreamReader类"></a>6.2 InputStreamReader类</h5><p>转换流<code>java.io.InputStreamReader</code>，是<code>Reader</code>的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><p><strong>1.构造方法</strong></p><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"in.txt"</span>));</span><br><span class="line">InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"in.txt"</span>) , <span class="string">"GBK"</span>);</span><br></pre></td></tr></table></figure><p><strong>2.指定编码读取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 定义文件路径,文件为gbk编码</span></span><br><span class="line">        String FileName = <span class="string">"E:\\file_gbk.txt"</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(FileName));</span><br><span class="line">      <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(FileName) , <span class="string">"GBK"</span>);</span><br><span class="line"><span class="comment">// 定义变量,保存字符</span></span><br><span class="line">        <span class="keyword">int</span> read;</span><br><span class="line">      <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read); <span class="comment">// ��Һ�</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 使用指定编码字符流读取,正常解析</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr2.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read);<span class="comment">// 大家好</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-3-OutputStreamWriter类"><a href="#6-3-OutputStreamWriter类" class="headerlink" title="6.3 OutputStreamWriter类"></a>6.3 OutputStreamWriter类</h5><p>转换流<code>java.io.OutputStreamWriter</code> ，是<code>Writer</code>的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><p><strong>1.构造方法</strong></p><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OutputStreamWriter isr = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.txt"</span>));</span><br><span class="line">OutputStreamWriter isr2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.txt"</span>) , <span class="string">"GBK"</span>);</span><br></pre></td></tr></table></figure><p><strong>2.指定编码输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 定义文件路径</span></span><br><span class="line">        String FileName = <span class="string">"E:\\out.txt"</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw.write(<span class="string">"你好"</span>); <span class="comment">// 保存为6个字节</span></span><br><span class="line">        osw.close();</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 定义文件路径</span></span><br><span class="line">String FileName2 = <span class="string">"E:\\out2.txt"</span>;</span><br><span class="line">     <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        OutputStreamWriter osw2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName2),<span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw2.write(<span class="string">"你好"</span>);<span class="comment">// 保存为4个字节</span></span><br><span class="line">        osw2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-4-字符流转换实例"><a href="#6-4-字符流转换实例" class="headerlink" title="6.4 字符流转换实例"></a>6.4 字符流转换实例</h5><p>案例：</p><p>输入条件：给定文件中，输入文件指定为<code>gbk</code>格式。</p><p>输出条件：将文件以<code>utf-8</code>格式进行输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.定义文件路径 </span></span><br><span class="line">        String srcFile = <span class="string">"file_gbk.txt"</span>; </span><br><span class="line">        String destFile = <span class="string">"file_utf8.txt"</span>;</span><br><span class="line">        <span class="comment">// 2.创建流对象 </span></span><br><span class="line">        <span class="comment">// 2.1 转换输入流,指定GBK编码 </span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(srcFile) , <span class="string">"GBK"</span>); </span><br><span class="line">        <span class="comment">// 2.2 转换输出流,默认utf8编码 </span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line">        <span class="comment">// 3.读写数据 </span></span><br><span class="line">        <span class="comment">// 3.1 定义数组</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 3.2 定义长度</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 3.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(cbuf))!=‐<span class="number">1</span>) &#123; </span><br><span class="line">            <span class="comment">// 循环写出 </span></span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.释放资源 </span></span><br><span class="line">        osw.close(); </span><br><span class="line">        isr.close();       </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七-序列化"><a href="#七-序列化" class="headerlink" title="七.序列化"></a>七.序列化</h4><p><code>Java</code> 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code> 、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>同样，该字节序列还可以从文件中读取回来，重构对象，对其进行反序列化操作。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。</p><p>序列化：将对象转换为字节。</p><p>反序列化：字节重构为对象。</p><h5 id="7-1-ObjectOutputStream类"><a href="#7-1-ObjectOutputStream类" class="headerlink" title="7.1 ObjectOutputStream类"></a>7.1 ObjectOutputStream类</h5><p><code>java.io.ObjectOutputStream</code>类，将<code>Java</code>对象的原始数据类型写出到文件，实现对象的持久存储。 </p><p>构造方法：</p><ul><li><code>public ObjectOutputStream(OutputStream out)</code> ： 创建一个指定<code>OutputStream</code>的<code>ObjectOutputStream</code>。 </li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"employee.txt"</span>);</span><br><span class="line">ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br></pre></td></tr></table></figure><h5 id="7-2-序列化操作"><a href="#7-2-序列化操作" class="headerlink" title="7.2 序列化操作"></a>7.2 序列化操作</h5><ol><li>一个对象要想序列化，必须满足两个条件：<ul><li>该类必须实现<code>java.io.Serializable</code>接口，<code>Serializable</code>是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code>。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code>关键字修饰。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> age; <span class="comment">// 通过transient瞬态修饰成员，不会被序列化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addressCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Address check:"</span> + name + <span class="string">"--"</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>写出对象方法</p><ul><li><code>public final void writeObject (Object obj)</code>:将指定的对象写出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setAge(<span class="number">21</span>);</span><br><span class="line">        employee.setAddress(<span class="string">"江苏"</span>);</span><br><span class="line">        employee.setName(<span class="string">"Tom"</span>);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建序列化对象</span></span><br><span class="line">            out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"employee.txt"</span>));</span><br><span class="line">            <span class="comment">// 写出对象</span></span><br><span class="line">            out.writeObject(employee);</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            out.close();</span><br><span class="line">            System.out.println(<span class="string">"Serialized data is saved"</span>); <span class="comment">// 姓名，地址被序列化，年龄没有被序列化</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="7-3-反序列化操作"><a href="#7-3-反序列化操作" class="headerlink" title="7.3 反序列化操作"></a>7.3 反序列化操作</h5><p><code>ObjectInputStream</code>反序列化流，将之前使用<code>ObjectOutputStream</code>序列化的原始数据恢复为对象。</p><p>构造方法：</p><ul><li><code>public ObjectInputStream(InputStream in)</code> ： 创建一个指定<code>InputStream</code>的<code>ObjectInputStream</code>。</li></ul><h6 id="7-3-1-反序列化操作一"><a href="#7-3-1-反序列化操作一" class="headerlink" title="7.3.1 反序列化操作一"></a>7.3.1 反序列化操作一</h6><p>通过查找一个对象的<code>class</code>文件，即可将其进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><code>public final Object readObject ()</code> : 读取一个对象。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employee e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"employee.txt"</span>));</span><br><span class="line">            e = (Employee) in.readObject();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Employee class not found"</span>);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"name:"</span> + e.getName());</span><br><span class="line">        System.out.println(<span class="string">"address:"</span> + e.getAddress());</span><br><span class="line">        System.out.println(<span class="string">"age:"</span>+e.getAge()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">name:Tom</span><br><span class="line">address:江苏</span><br><span class="line">age:<span class="number">0</span> <span class="comment">// age没有被初始化，所以输出为0(Integer类型的初始化值)</span></span><br></pre></td></tr></table></figure><p>由于<code>JVM</code>可以反序列化对象，它必须是能够找到<code>class</code>文件的类。如果找不到该类的<code>class</code>文件，则抛出一个<code>ClassNotFoundException</code>异常。</p><h6 id="7-3-2-反序列化操作二"><a href="#7-3-2-反序列化操作二" class="headerlink" title="7.3.2 反序列化操作二"></a>7.3.2 反序列化操作二</h6><p>当<code>JVM</code>反序列化对象时，能够找到<code>class</code>文件，但是<code>class</code>文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配</li><li>该类包含未知数据类型</li><li>该类没有可访问的无参数构造方法</li></ul><p><code>Serializable</code>接口给需要序列化的类，提供了一个序列号版本号。<code>serialVersionUID</code>该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入序列版本号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><h5 id="7-4-序列化案例"><a href="#7-4-序列化案例" class="headerlink" title="7.4 序列化案例"></a>7.4 序列化案例</h5><ol><li>将存有多个自定义对象的集合序列化操作，保存到自定义文件中。 </li><li>反序列化此文件，并遍历集合，打印对象信息。</li></ol><p>分析：</p><ol><li>将若干学生对象，保存到集合中。</li><li>把集合进行序列化。</li><li>反序列化读取时，只需要读取一次，转换为集合类型。</li><li>遍历集合，打印所有的学生信息。</li></ol><p>首先创建一个<code>student</code>类，再创建集合类的对象，序列化和反序列化的对象都是这个集合对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoSerialize</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        serialize();// 对象序列化</span></span><br><span class="line">        rSerialize(); <span class="comment">// 对象反序列化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象序列化操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">12</span>);</span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="string">"李四"</span>, <span class="number">10</span>);</span><br><span class="line">        Student stu3 = <span class="keyword">new</span> Student(<span class="string">"王五"</span>, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        StudentList list = <span class="keyword">new</span> StudentList();</span><br><span class="line">        List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        students.add(stu1);</span><br><span class="line">        students.add(stu2);</span><br><span class="line">        students.add(stu3);</span><br><span class="line"></span><br><span class="line">        list.setStudents(students);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"students.txt"</span>));</span><br><span class="line">            os.writeObject(list);</span><br><span class="line">            os.close();</span><br><span class="line">            System.out.println(<span class="string">"完成序列化"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象反序列化操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rSerialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StudentList students = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"students.txt"</span>));</span><br><span class="line">            students = (StudentList) in.readObject();</span><br><span class="line">            in.close(); <span class="comment">// 资源释放</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Students class not found"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; studentList = students.getStudents();</span><br><span class="line">        System.out.println(studentList);</span><br><span class="line">        System.out.println(<span class="string">"-----"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/10/14/04Haqg.png" alt=""></p><h4 id="八、打印流"><a href="#八、打印流" class="headerlink" title="八、打印流"></a>八、打印流</h4><p><code>print</code>和<code>println</code>方法来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方法。</p><h5 id="8-1-PrintStream类"><a href="#8-1-PrintStream类" class="headerlink" title="8.1 PrintStream类"></a>8.1 PrintStream类</h5><p>构造方法：</p><ul><li><code>public PrintStream(String fileName)</code> ： 使用指定的文件名创建一个新的打印流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"ps.txt"</span>)；</span><br></pre></td></tr></table></figure><p>改变打印流的流向：</p><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。通过<code>PrintStream</code>类改变打印流流向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建打印流,指定文件的名称</span></span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"ps.txt"</span>);</span><br><span class="line">        <span class="comment">// 设置系统的打印流流向，输出到ps.txt文件上</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC学习笔记记录</title>
      <link href="/2020/10/02/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/10/02/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="0-、概述"><a href="#0-、概述" class="headerlink" title="0 、概述"></a>0 、概述</h2><p>服务器端分成三层架构。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/22/wXMKIS.png" alt="三层架构"></p><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="1-1-Maven环境的创建"><a href="#1-1-Maven环境的创建" class="headerlink" title="1.1 Maven环境的创建"></a>1.1 Maven环境的创建</h3><ol><li><p>导入坐标依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 版本锁定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring IOC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置核心的控制器(类似<code>servlet</code>类  – <code>dispatcherServlet</code>)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>当<code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>时，默认就是拦截所有路径连静态资源也不能访问。但是<code>Controller</code>中配置<code>@RequestMapping</code>的路径是不会被拦截的，配置了<code>@RequestMapping</code>就相当于在<code>web.xml</code>中注<code>&lt;servlet&gt;</code>。</p><a id="more"></a><h3 id="1-2-第一个执行程序"><a href="#1-2-第一个执行程序" class="headerlink" title="1.2 第一个执行程序"></a>1.2 第一个执行程序</h3><h4 id="1-2-1-引入SpringMVC配置文件"><a href="#1-2-1-引入SpringMVC配置文件" class="headerlink" title="1.2.1 引入SpringMVC配置文件"></a>1.2.1 引入SpringMVC配置文件</h4><p>在<code>resources</code>下新建<code>springMVC.XML</code>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-编写控制器"><a href="#1-2-2-编写控制器" class="headerlink" title="1.2.2 编写控制器"></a>1.2.2 编写控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>) <span class="comment">// 请求的资源路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello SpringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">// 需要跳转的页面，默认jsp文件名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>控制器类配置<code>@Controller</code>注解，表明是控制器。</li><li>在具体的方法上配置<code>@RequestMapping</code>注解，参数即为访问时的资源路径</li><li><code>return</code>中的字符串，方法执行完需要跳转的页面</li></ol><h4 id="1-2-3-完善springMVC-xml配置文件"><a href="#1-2-3-完善springMVC-xml配置文件" class="headerlink" title="1.2.3 完善springMVC.xml配置文件"></a>1.2.3 完善<code>springMVC.xml</code>配置文件</h4><ol><li>控制器中加入注解，那么就需要配置需要扫描的包；</li><li>配置文件解析器，创建<code>IOC</code>容器对象，由<code>Tomcat</code>负责调用；</li><li>配置<code>spring</code>开启注解<code>MVC</code>的支持</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring创建容器时要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lizhi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 Ioc容器对象，由tomcat调用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件具体所在的目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件解析的类型(后缀名) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring开启注解mvc的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>WEB-INF</code>目录下的内容是对客户端不可见，只对服务端可见，即客户端不能直接对其进行访问。</p><h4 id="1-2-4-完善web-xml配置文件"><a href="#1-2-4-完善web-xml配置文件" class="headerlink" title="1.2.4 完善web.xml配置文件"></a>1.2.4 完善<code>web.xml</code>配置文件</h4><p>由于上方的<code>springMVC.XML</code>配置文件时在<code>resources</code>目录下的，我们启动的是<code>web</code>项目，就需要将该配置文件加载进<code>Tomcat</code>服务器进行读取。</p><p>即：配置<code>Servlet</code>的初始化参数，读取<code>springMVC</code>的配置文件，创建<code>spring</code>容器，用于加载配置文件。</p><p>当<code>MVC</code>配置文件加载成功，那么其中的扫描就能够成功，继而将控制器中的类加载成对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Servlet的初始化参数，读取springMVC的配置文件，创建spring容器,用于加载配置文件</span></span><br><span class="line"><span class="comment">          MVC配置文件加载成功，那么其中的扫描就成功，继而到控制器中类加载成对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务器在启动时，就加载资源</span></span><br><span class="line"><span class="comment">  配置servlet的对象的创建时间点:应用加载时创建。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置资源路径/表明所有的资源皆可被访问到 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表明只有hello的资源路径可以被访问到</span></span><br><span class="line"><span class="comment">      &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、Spring-MVC-详解"><a href="#二、Spring-MVC-详解" class="headerlink" title="二、Spring MVC 详解"></a>二、Spring MVC 详解</h2><h3 id="2-1-执行过程及组件分析"><a href="#2-1-执行过程及组件分析" class="headerlink" title="2.1 执行过程及组件分析"></a>2.1 执行过程及组件分析</h3><h4 id="2-1-1-执行过程"><a href="#2-1-1-执行过程" class="headerlink" title="2.1.1 执行过程"></a>2.1.1 执行过程</h4><ol><li>当启动<code>Tomcat</code>服务器的时候，因为配置了<code>load-on-startup</code>标签，所以会创建<code>DispatcherServlet</code>对象，就会加载<code>springmvc.xml</code>配置文件。这里是服务器启动，应用被加载。读取到<code>web.xml</code>中的配置创建<code>spring</code>容器并且初始化容器中的对象。</li><li>在<code>springmvc.xml</code>配置文件中开启了注解扫描，那么相应的<code>controller</code>对象(<code>HelloController</code>)对象就会被创建。</li><li>从<code>index.jsp</code>发送请求，请求会先到达<code>DispatcherServlet</code>核心控制器，根据配置<code>@RequestMapping</code>注解找到执行的具体方法。浏览器发送请求，被<code>DispatcherServlet</code>捕获，该<code>Servlet</code>并不处理请求，而是把请求转发出去。转发的路径是根据请求<code>URL</code>，匹配<code>@RequestMapping</code>中的内容。</li><li>根据执行方法的返回值，再根据配置的视图解析器，去指定的目录下查找指定名称的<code>JSP</code>文件。即：根据方法的返回值，借助<code>InternalResourceViewResolver</code>找到对应的结果视图。</li><li><code>Tomcat</code>服务器渲染页面，做出响应。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/12/23/r6iFFs.png" alt="执行过程"></p><h4 id="2-1-2-组件分析"><a href="#2-1-2-组件分析" class="headerlink" title="2.1.2 组件分析"></a>2.1.2 组件分析</h4><ol><li><p><code>DispatcherServlet</code>：前端控制器</p><p>用户请求到达前端控制器，它就相当于<code>MVC</code>模式中的<code>c</code>，<code>dispatcherServlet</code>是整个流程控制的中心，由它调用其它组件处理用户的请求，<code>dispatcherServlet</code>的存在降低了组件之间的耦合性。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/12/23/r6iCwQ.png" alt="dispatcherServlet"></p></li><li><p><code>HandlerMapping</code>：处理器映射器</p><p><code>HandlderMapping</code>负责根据用户请求找到<code>Handler</code>，即处理器，<code>SpringMVC</code>提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p></li><li><p><code>Handler</code>：处理器</p><p>它就是开发中编写的具体业务控制器。由<code>DispatcherServlet</code>把用户请求转发到Handler。由<code>Handler</code>对具体的用户请求进行处理。</p></li><li><p><code>Handler</code>：处理器适配器</p><p>通过<code>HandlerAdapter</code>对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p></li><li><p><code>View Resolver</code>：视图解析器</p><p><code>View Resolver</code>负责将处理结果生成<code>View</code>视图，<code>View Resolver</code>首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成<code>View</code>视图对象，最后对<code>View</code>进行渲染将处理结果通过页面展示给用户。</p></li><li><p><code>View</code>：视图</p><p>将数据视图展示给客户端，即用户。</p></li></ol><h4 id="2-1-3-lt-mvc-annotation-driver-gt-说明"><a href="#2-1-3-lt-mvc-annotation-driver-gt-说明" class="headerlink" title="2.1.3 &lt;mvc:annotation-driver&gt;说明"></a>2.1.3 <code>&lt;mvc:annotation-driver&gt;</code>说明</h4><p>在<code>SpringMVC</code>的各个组件中，处理器映射器、处理器适配器、视图解析器成为<code>SpringMVC</code>的三大组件。使用<code>&lt;mvc:annotation-driver&gt;</code>自动加载<code>RequestMappingHandlerMapping</code>(处理器映射器)和<code>RequestMappingHandlerAdapter</code>(处理器适配器)。</p><h3 id="2-2-常用注解说明"><a href="#2-2-常用注解说明" class="headerlink" title="2.2 常用注解说明"></a>2.2 常用注解说明</h3><h4 id="2-2-1-RequestMapping"><a href="#2-2-1-RequestMapping" class="headerlink" title="2.2.1 RequestMapping"></a>2.2.1 RequestMapping</h4><p>作用:用于建立请求<code>URL</code>和处理请求方法之间的对应关系。</p><h4 id="2-2-2-RequestParam"><a href="#2-2-2-RequestParam" class="headerlink" title="2.2.2 RequestParam"></a>2.2.2 RequestParam</h4><p>作用：把请求中指定名称的参数给控制器中的形参赋值。(适用于请求名称与属性名不相同的情况)</p><p>属性：</p><ul><li><code>value</code>:请求参数的名称。</li><li><code>required</code>:请求参数中是否必须提供此参数。默认值：<code>true</code>。表示必须提供，如果不提供将报错。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestParam</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span>String username,@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"age"</span>,required=<span class="keyword">false</span>)</span>Integer age)</span>&#123;</span><br><span class="line">    System.out.println(username+<span class="string">","</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-RequestBody"><a href="#2-2-3-RequestBody" class="headerlink" title="2.2.3 RequestBody"></a>2.2.3 RequestBody</h4><p>作用：用于获取<strong>请求体</strong>内容。直接使用得到是<code>key=value&amp;key=value...</code>结构的数据。<code>get</code>请求方式不适用。</p><p>属性：</p><ul><li><code>required</code>：是否必须有请求体。默认值是:<code>true</code>。当取值是<code>true</code>时，<code>get</code>请求方式会报错。如果取值为<code>false</code>，<code>get</code>请求得到是<code>null</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestBody"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestBody</span><span class="params">(@RequestBody(required=<span class="keyword">false</span>)</span> String body)</span>&#123;</span><br><span class="line">System.out.println(body);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-PathVariable"><a href="#2-2-4-PathVariable" class="headerlink" title="2.2.4 PathVariable"></a>2.2.4 PathVariable</h4><p>作用：用于绑定<code>url</code>中的占位符。例如：请求<code>url</code>中 <code>/delete/{id}</code>，这个<code>{id}</code>就是<code>url</code>占位符。<code>url</code>支持占位符是<code>spring3.0</code>之后加入的。是<code>springmvc</code>支持<code>rest</code>风格<code>URL</code>的一个重要标志。</p><p>属性：</p><ul><li><code>value</code>:用于指定<code>url</code>中占位符名称。</li><li><code>required</code>:是否必须提供占位符。</li></ul><p><strong>重点</strong>：<code>restful</code>风格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/usePathVariable/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">usePathVariable</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-5-RequestHeader"><a href="#2-2-5-RequestHeader" class="headerlink" title="2.2.5 RequestHeader"></a>2.2.5 RequestHeader</h4><p>作用：用于获取请求消息头</p><p>属性：</p><ul><li><code>value</code>:提供消息头名称，用于指定获取消息头中的哪一部分。</li><li><code>required</code>:是否必须有此消息头。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useRequestHeader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestHeader</span><span class="params">(@RequestHeader(value=<span class="string">"Accept-Language"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">required=<span class="keyword">false</span>)</span>String requestHeader)</span>&#123;</span><br><span class="line">    System.out.println(requestHeader);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将请求头内容的信息封装到<code>requestHeader</code>参数中。</p><h4 id="2-2-6-CookieValue"><a href="#2-2-6-CookieValue" class="headerlink" title="2.2.6 CookieValue"></a>2.2.6 CookieValue</h4><p>作用：用于把指定<code>cookie</code>名称的值传入控制器方法参数。</p><p>属性：</p><ul><li><code>value</code>:指定<code>cookie</code>的名称。键值对的形式，通过键来获取到它的值。</li><li><code>required</code>:是否必须有<code>cookie</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/useCookieValue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useCookieValue</span><span class="params">(@CookieValue(value=<span class="string">"JSESSIONID"</span>,required=<span class="keyword">false</span>)</span> </span></span><br><span class="line"><span class="function">String cookieValue)</span>&#123;</span><br><span class="line">System.out.println(cookieValue);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-7-ModelAttribute"><a href="#2-2-7-ModelAttribute" class="headerlink" title="2.2.7 ModelAttribute"></a>2.2.7 ModelAttribute</h4><p>作用：该注解是<code>SpringMVC4.3</code>版本以后新加入的。它可以用于修饰方法和参数。</p><p>出现在方法上，表示当前方法会在控制器的方法执行之前，先执行。它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。</p><p>出现在参数上，获取指定的数据给参数赋值。</p><p>属性：</p><ul><li><code>value</code>：用于获取数据的<code>key</code>。<code>key</code>可以是<code>POJO</code>的属性名称，也可以是<code>Map</code>结构的<code>key</code>。</li></ul><p>应用场景:</p><p>当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。</p><p>例如：</p><p>当我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据时肯定没有此字段的内容，一旦更新会把该字段内容置为<code>null</code>，此时就可以使用此注解解决问题。</p><p>示例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttributepublic</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showModel</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了showModel方法"</span>+user.getUsername());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment">    接收请求的方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行了控制器的方法"</span>+user.getUsername());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即先执行<code>showModel</code>方法，再执行控制器中的方法<code>testModelAttribute</code>。</p><h5 id="2-2-7-1-ModelAttribute-修饰方法带返回值"><a href="#2-2-7-1-ModelAttribute-修饰方法带返回值" class="headerlink" title="2.2.7.1 ModelAttribute 修饰方法带返回值"></a>2.2.7.1 ModelAttribute 修饰方法带返回值</h5><p>需求：修改用户信息，要求用户密码不能修改</p><p>前端代码:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"springmvc/updateUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol><li>模拟查询数据库中用户信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">showModel</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟去数据库查询</span></span><br><span class="line">    User userByName = findUserByName(username);</span><br><span class="line">    System.out.println(<span class="string">"执行了 showModel 方法"</span>+userByName);</span><br><span class="line">    <span class="keyword">return</span> userByName; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>模拟修改用户方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"控制器中处理请求的方法：修改用户："</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>模拟去数据库查询</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">findUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 以下4句用来模拟数据库中的原有对象,即查询出来的对象</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先通过前端请求，获取<code>username</code>，而在<code>showModel</code>方法中参数，就是由前端请求的参数<code>username</code>。然后<code>showModel</code>方法体中通过数据库查询对象，再将对象进行返回。返回的对象是数据中的相对应的原有对象。(类似过滤器，后续在控制器中将需要修改的值，进行修改，不变的值，就不需要再次改动)。</p><h5 id="2-2-7-2-ModelAttribute-修饰方法不带返回值"><a href="#2-2-7-2-ModelAttribute-修饰方法不带返回值" class="headerlink" title="2.2.7.2 ModelAttribute 修饰方法不带返回值"></a>2.2.7.2 ModelAttribute 修饰方法不带返回值</h5><p>需求：修改用户信息，要求用户的密码不能修改</p><ol><li>前端代码</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 修改用户信息 --&gt; </span><br><span class="line">&lt;form action=<span class="string">"springmvc/updateUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>查询数据库中用户信息– 模拟去数据库查询</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showModel</span><span class="params">(String username,Map&lt;String,User&gt; map)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模拟去数据库查询</span></span><br><span class="line">    User user = findUserByName(username);</span><br><span class="line">    System.out.println(<span class="string">"执行了 showModel 方法"</span>+user);</span><br><span class="line">    map.put(<span class="string">"abc"</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>模拟修改用户方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(@ModelAttribute(<span class="string">"abc"</span>)</span>User user) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"控制器中处理请求的方法：修改用户："</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>模拟去数据库查询</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">findUserByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种不带返回值的方式更容易理解，即将原有的对象存放在<code>map</code>集合中，再通过注解，获取指定(根据<code>map</code>中的键)的数据给参数赋值。最后，将前端请求的参数对应的封装到这个参数中，就能够保证这个参数对象的所有属性都能够有值。</p><h4 id="2-2-8-SessionAttributes"><a href="#2-2-8-SessionAttributes" class="headerlink" title="2.2.8 SessionAttributes"></a>2.2.8 SessionAttributes</h4><p>作用：用于多次执行控制器方法间的参数共享。只能作用在类对象(<code>Class</code>)上。</p><p>属性：</p><ul><li><code>value</code>:用于指定存入的属性名称</li><li><code>type</code>:用于指定存入的数据类型</li></ul><ol><li>前端代码</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- SessionAttribute 注解的使用 --&gt; </span><br><span class="line">&lt;a href="springmvc/testPut"&gt;存入 SessionAttribute&lt;/a&gt; &lt;hr/&gt;</span><br><span class="line">&lt;a href="springmvc/testGet"&gt;取出 SessionAttribute&lt;/a&gt; &lt;hr/&gt;</span><br><span class="line">&lt;a href="springmvc/testClean"&gt;清除 SessionAttribute&lt;/a&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>控制器中的代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">"sessionAttributeController"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/springmvc"</span>)</span><br><span class="line"><span class="meta">@SessionAttributes</span>(value =&#123;<span class="string">"username"</span>,<span class="string">"password"</span>&#125;,types=&#123;Integer<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SessionAttributeController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 把数据存入 SessionAttribute</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * Model 是 spring 提供的一个接口，该接口有一个实现类 ExtendedModelMap</span></span><br><span class="line"><span class="comment">    * 该类继承了 ModelMap，而 ModelMap 就是 LinkedHashMap 子类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testPut"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testPut</span><span class="params">(Model model)</span></span>&#123; </span><br><span class="line">    model.addAttribute(<span class="string">"username"</span>, <span class="string">"泰斯特"</span>); </span><br><span class="line">    model.addAttribute(<span class="string">"password"</span>,<span class="string">"123456"</span>); </span><br><span class="line">    model.addAttribute(<span class="string">"age"</span>, <span class="number">31</span>); </span><br><span class="line">    <span class="comment">//跳转之前将数据保存到 username、password 和 age 中，因为注解@SessionAttribute 中有这几个参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testGet"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testGet</span><span class="params">(ModelMap model)</span></span>&#123; </span><br><span class="line">    System.out.println(model.get(<span class="string">"username"</span>)+<span class="string">";"</span>+model.get(<span class="string">"password"</span>)+<span class="string">";"</span>+model.get(<span class="string">"a</span></span><br><span class="line"><span class="string">    ge"</span>)); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testClean"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">complete</span><span class="params">(SessionStatus sessionStatus)</span></span>&#123; </span><br><span class="line">    sessionStatus.setComplete(); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>model</code>对象进行值的存储操作，底层会将值存储在<code>request</code>域中。而又使用<code>@SessionAttributes</code>注解，具体有<code>@SessionAttributes(value ={&quot;username&quot;,&quot;password&quot;},types={Integer.class})</code>。此时通过<code>values</code>数组的指定 – <code>username</code>、<code>password</code>，则表明<code>model</code>在存储操作时，不仅会将这两个的值存储在<code>request</code>域对象中，同时也会存储在<code>session</code>域对象中。</p><p>取值时，使用的<code>model</code>实现类 – <code>ModelMap</code>。</p><p>删除时，使用<code>SessionStatus</code>。</p><h3 id="2-3-请求参数的绑定"><a href="#2-3-请求参数的绑定" class="headerlink" title="2.3 请求参数的绑定"></a>2.3 请求参数的绑定</h3><p>前端向后端进行请求时，表单中请求参数都是基于<code>key=value</code>的。<code>SpringMVC</code>绑定请求参数的过程是通过把表单请求参数，作为控制器中方法参数进行绑定的。</p><h4 id="2-3-1-支持的数据类型"><a href="#2-3-1-支持的数据类型" class="headerlink" title="2.3.1 支持的数据类型"></a>2.3.1 支持的数据类型</h4><ol><li><p>基本数据类型</p><ul><li>基本数据类型</li><li><code>String</code>类型</li></ul></li><li><p><code>POJO</code>类型参数(实现序列化接口)</p><ul><li>实体类</li><li>关联的实体类</li></ul></li><li><p>数组和集合类型参数</p><p>包括<code>List</code>结构和<code>Map</code>结构的集合(包括数组)</p></li></ol><p><code>SpringMVC</code>绑定请求参数是自动实现的，但是想要使用，必须遵循使用要求。</p><h4 id="2-3-2-使用要求"><a href="#2-3-2-使用要求" class="headerlink" title="2.3.2 使用要求"></a>2.3.2 使用要求</h4><ol><li>基本数据类型或者是String类型:</li></ol><p>要求我们的<strong>参数名称必须和控制器中方法的形参名称保持一致</strong>。(严格区分大小写)</p><ol start="2"><li><code>POJO</code>类型或者及其关联对象</li></ol><p>如果表单中参数名称和<code>POJO</code>类的属性名称保持一致。并且控制器方法的参数类型是<code>POJO</code>类型。</p><ol start="3"><li><p>如果是集合类型</p><ul><li><p>第一种</p><p>要求集合类型的请求参数必须在<code>POJO</code>中。在表单中请求参数名称要和<code>POJO</code>中集合属性名称相同。</p><p>给<code>List</code>集合中的元素赋值，使用下标。</p><p>给<code>Map</code>集合中的元素赋值，使用键值对。</p></li><li><p>第二种</p><p>接收的请求参数是<code>json</code>格式数据。需要借助一个注解实现。</p></li></ul></li><li><p><code>SpringMVC</code>可以实现一些数据类型自动转换。其内置转换器全部都在：</p><p><code>org.springframework.core.convert.support</code>包下。</p></li></ol><h4 id="2-3-3-使用实例"><a href="#2-3-3-使用实例" class="headerlink" title="2.3.3 使用实例"></a>2.3.3 使用实例</h4><h5 id="2-3-3-1-POJO类型作为参数"><a href="#2-3-3-1-POJO类型作为参数" class="headerlink" title="2.3.3.1 POJO类型作为参数"></a>2.3.3.1 POJO类型作为参数</h5><ol><li>实体类代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer accountId;</span><br><span class="line">    <span class="keyword">private</span> String accountName;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters 方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是<code>Account</code>类。其中关联<code>Address</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lizhi.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String provinceName;</span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getters and setters 方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>前端代码</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"account/saveAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    账户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户省份：&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.provinceName"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户城市：&lt;input type=<span class="string">"text"</span> name=<span class="string">"address.cityName"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>通过<code>对象.属性</code>的方式进行赋值。</p><ol start="3"><li>控制器代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/saveAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"保存了账户。。。。"</span>+account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-3-2-POJO类中包含集合类型参数"><a href="#2-3-3-2-POJO类中包含集合类型参数" class="headerlink" title="2.3.3.2 POJO类中包含集合类型参数"></a>2.3.3.2 POJO类中包含集合类型参数</h5><ol><li>实体类 – <code>User</code>类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lizhi.domain;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Account&gt; accountMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", date="</span> + date +</span><br><span class="line">                <span class="string">", accounts="</span> + accounts +</span><br><span class="line">                <span class="string">", accountMap="</span> + accountMap +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>前端代码</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- POJO 类包含集合类型演示 --&gt;</span><br><span class="line">&lt;form action=<span class="string">"account/updateAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> &gt;&lt;br/&gt;</span><br><span class="line">    用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">1</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[0].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">1</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[0].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">2</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[1].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">2</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accounts[1].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">3</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['one'].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">3</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['one'].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">4</span> 名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['two'].name"</span> &gt;&lt;br/&gt;</span><br><span class="line">    账户 <span class="number">4</span> 金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"accountMap['two'].money"</span> &gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>集合、列表赋值的方式。三要素：<code>属性</code>、<code>下标</code>、<code>参数(属性)</code></p><ol start="3"><li>控制器代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateAccount</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"更新了账户。。。。"</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-请求参数乱码问题"><a href="#2-4-请求参数乱码问题" class="headerlink" title="2.4 请求参数乱码问题"></a>2.4 请求参数乱码问题</h3><p>在<code>tomcat8</code>以后<code>get</code>请求方式，中文正常显示；<code>post</code>请求方式，中文会出现乱码问题。</p><p>在之前的<code>serlvet</code>学习中，对乱码解决的方式，是通过<code>Filter</code>过滤器。而现在<code>SpringMVC</code>提供好现有的类供我们使用。</p><p>首先<code>post</code>请求方式，在<code>web.xml</code>中配置一个过滤器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置解决中文乱码的过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--设置过滤器中的属性值--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启动过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤所有请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果想不过滤静态资源，在 <code>Springmvc</code> 的配置文件中可以配置，静态资源不过滤：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- location 表示路径，mapping 表示文件，**表示该目录下的文件以及子目录的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/scripts/"</span> <span class="attr">mapping</span>=<span class="string">"/javascript/**"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>get</code>请求方式：</p><p><code>tomcat</code>对<code>GET</code>和<code>POST</code>请求处理方式是不同的，<code>GET</code>请求的编码问题，要改<code>tomcat</code>的<code>server.xml</code>配置文件，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span></span></span><br><span class="line"><span class="tag"><span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br><span class="line">改为：</span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span></span></span><br><span class="line"><span class="tag"><span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span></span></span><br><span class="line"><span class="tag"><span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果遇到 ajax 请求仍然乱码，请把：--&gt;</span></span><br><span class="line">useBodyEncodingForURI="true"改为 URIEncoding="UTF-8"</span><br></pre></td></tr></table></figure><h3 id="2-5-自定义类型转换器"><a href="#2-5-自定义类型转换器" class="headerlink" title="2.5 自定义类型转换器"></a>2.5 自定义类型转换器</h3><p>例如，在前端输入日期格式时：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 特殊情况之：类型转换问题 --&gt; </span><br><span class="line">&lt;a href="account/deleteAccount?date=2018-01-01"&gt;根据日期删除账户&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>可以看出，请求参数中,<code>date=2018-01-01</code>。</p><p>当我们在后端接收到请求时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/deleteAccount"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteAccount</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"删除了账户："</span> + date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<code>删除了账户：2018-01-01</code>。如果当我们将接收参数的类型改为<code>Date</code>类型时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/deleteAccount"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteAccount</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"删除了账户："</span> + date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，前端再次请求时，会报<code>400</code>。</p><p>下面便是我们自定义类型转化的方式：</p><p>首先，定义一个类，实现<code>Convertet</code>接口，该接口有两个泛型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;<span class="comment">//S:表示接受的类型，T：表示目标类型</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 实现类型转换的方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(S source)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>S</code>表示接受的类型，<code>T</code>表示目标类型。</p><p>其实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDate</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span> || source == <span class="string">""</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请输入日期"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-mm-dd"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date data = format.parse(source);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请输入正确的日期格式"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，在<code>Spring</code>配置文件中配置类型转换器。</p><p><code>Spring</code>配置类型转换器的机制是，将自定义的转换器注册到类型转换服务中去。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"converterService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给工厂注入一个新的类型转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置自定义类型转换器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"cn.lizhi.utils.StringToDate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置spring开启注解mvc的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"converterService"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConversionServiceFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">ConversionService</span>&gt;, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;?&gt; converters;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> GenericConversionService conversionService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConversionServiceFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConverters</span><span class="params">(Set&lt;?&gt; converters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.converters = converters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.conversionService = <span class="keyword">this</span>.createConversionService();</span><br><span class="line">        ConversionServiceFactory.registerConverters(<span class="keyword">this</span>.converters, <span class="keyword">this</span>.conversionService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> GenericConversionService <span class="title">createConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultConversionService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConversionService <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.conversionService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends ConversionService&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> GenericConversionService<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>converters</code>是集合类型，并且有<code>setter</code>方法，通过上方的<code>spring</code>配置文件，给工厂注入一个新的类型转换器(不会覆盖原有的转换器)。</p><p>这样，在我们后面的使用中，便能够识别并对应转换成我们相应数据格式。</p><p>总之，实现转换器的方法以及对<code>spring</code>的配置，就是在原有的转换器集合中，再加入一种我们自己编写的转换器，以供我们使用。</p><h3 id="2-6-响应数据"><a href="#2-6-响应数据" class="headerlink" title="2.6 响应数据"></a>2.6 响应数据</h3><h4 id="2-6-1-方法返回值的分类"><a href="#2-6-1-方法返回值的分类" class="headerlink" title="2.6.1 方法返回值的分类"></a>2.6.1 方法返回值的分类</h4><h5 id="2-6-1-1-String-类型"><a href="#2-6-1-1-String-类型" class="headerlink" title="2.6.1.1 String 类型"></a>2.6.1.1 String 类型</h5><p><code>Controller</code>方法返回字符串可以指定逻辑视图的名称，根据视图解析器为物理视图的地址。</p><p>即为前面所写的常规的返回值为<code>String</code>的方法，返回值为所需要跳转的物理视图的名称(即为跳转页面名称 –&gt;地址)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123; </span><br><span class="line">System.out.println(<span class="string">"Hello SpringMVC!!"</span>); </span><br><span class="line">    <span class="comment">// 跳转到XX页面 -- 跳转到success页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟应用 – 模拟对数据库中的数据进行查询</p><ol><li>前端代码</li></ol><blockquote><p>index.jsp页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模拟用户的修改 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user/initUpdate"</span>&gt;</span>模拟用户修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>模拟update.jsp页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">isELIgnored</span>=<span class="string">"false"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模拟用户的修改 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user/initUpdate"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;user.username&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;user.password&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"money"</span> <span class="attr">value</span>=<span class="string">"$&#123;user.money&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>后端控制器代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">"userController"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/initUpdate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">initUpdate</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟从数据库中查询数据</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"张三"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        user.setMoney(<span class="number">123</span>d);</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"update"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值是<code>update</code>，即最后跳转到<code>update</code>页面。</p><h5 id="2-6-1-2-void类型"><a href="#2-6-1-2-void类型" class="headerlink" title="2.6.1.2 void类型"></a>2.6.1.2 void类型</h5><p>如果控制器的方法返回值是<code>void</code>,在执行程序报404的异常，默认查找<code>jsp</code>页面没有找到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type Status Report</span><br><span class="line">消息 &#x2F;WEB-INF&#x2F;pages&#x2F;user&#x2F;initUpdate.jsp</span><br><span class="line">描述 源服务器未能找到目标资源的表示或者是不愿公开一个已经存在的资源表示。</span><br></pre></td></tr></table></figure><p>从上面的错误信息可以看出，它会默认跳转到控制器中<code>@RequestMapping(&quot;/example&quot;)</code>中<code>initUpdate</code>的页面。</p><p>在<code>SpringMVC</code>中<code>Servlet</code>原始<code>API</code>可以作为控制器中方法的参数，即在<code>controller</code>方法形参上可以定义<code>request</code>和<code>response</code>，使用<code>request</code>或<code>response</code>指定相应结果。</p><ol><li><p>使用<code>request</code>(即为存储转发)转向页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"/WEB-INF/pages/success.jsp"</span>).forward(request, </span><br><span class="line">response);</span><br></pre></td></tr></table></figure><p>在存储转发中不需要写虚拟目录，但这里的资源路径需要写<code>webApp</code>中的全路径，没有像前面只写一个<code>success</code>的原因是，前一种是交给了视图解析器进行管理；而这里没有用到视图解析器，是单纯由<code>request</code>进行实现，故需要写出资源的全路径。</p></li><li><p>使用<code>response</code>进行页面的重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(request.getContextPath() + <span class="string">"/page.jsp"</span>);</span><br></pre></td></tr></table></figure><p>需要加上虚拟目录。</p></li><li><p>通过<code>response</code>指定响应结果，例如响应<code>json</code>数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"json串"</span>);</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-6-1-3-关键字的转发或重定向"><a href="#2-6-1-3-关键字的转发或重定向" class="headerlink" title="2.6.1.3 关键字的转发或重定向"></a>2.6.1.3 关键字的转发或重定向</h5><p>使用关键字进行转发或重定向时，<code>Spring</code>不会再通过视图解析器帮我们解析路径，需要我们自己手动配置。即就像上一小结中，资源路径需要写全。</p><ol><li><code>Forward</code>转发</li></ol><p><code>controller</code>方法在提供了<code>String</code>类型的返回值之后，默认就是请求转发。当然，我们可以手动进行设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testForward"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"test1方法执行了..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/pages/success.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用了<code>forward:</code>，则路径必须写成实际视图<code>url</code>，不能写逻辑视图。</p><p>它相当于它相当于<code>request.getRequestDispatcher(&quot;**url**&quot;).forward(request,response)</code>。使用请求转发，既可以转发到<code>jsp</code>(到视图解析器中)，也可以转发到其他的控制器方法。</p><ol start="2"><li><code>Redirect</code>重定向</li></ol><p><code>controller</code>方法提供了一个<code>String</code>类型返回值之后，它需要在返回值里使用：<code>redirect:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRedirect"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testRedirect方法执行了..."</span>);</span><br><span class="line"><span class="comment">//        return "redirect:testForward"; // 重定向至另一个servlet地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>; <span class="comment">// 重定向至jsp页面</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>它相当于<code>response.sendRedirect(url)</code>。需要注意的是，如果是重定向到<code>jsp</code>页面，则<code>jsp</code>页面不能写在<code>WEB-INF</code>目录中，否则无法找到。</p><p><strong>原因：</strong><br><strong>重定向是客户端的，而转发是服务端内部的。<br>重定向是让客户端去访问重定向的地址，而WEB-INF下的文件是不能通过外部访问的！</strong></p><h5 id="2-6-1-4-ResponseBody响应json数据"><a href="#2-6-1-4-ResponseBody响应json数据" class="headerlink" title="2.6.1.4 ResponseBody响应json数据"></a>2.6.1.4 ResponseBody响应json数据</h5><p>作用：该注解用于将<code>Controller</code>的方法返回的对象，通过<code>HttpMessageConverter</code>接口转换为指定格式的数据。如：<code>json</code>、<code>xml</code>等，通过<code>Response</code>响应给客户端。</p><p>需求：使用<code>@ResponseBody</code>注解实现将<code>controller</code>方法返回对象转换为<code>json</code>响应给客户端。</p><p>前置：<code>SpringMVC</code>默认用<code>MappingJacksonHttpMessageConverter</code>对<code>json</code>数据进行转换，需要加入<code>jackson</code>的包。我们的项目中通过导入依赖的方法进行包的管理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对json处理的包，即能够使用@ResponseBody --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要配置前端控制器不拦截静态资源。</p><p><code>DispatcherServlet</code>会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而<br>不能被使用。解决问题就是需要配置静态资源不进行拦截，在<code>springmvc.xml</code>配置文件添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置静态资源不过滤 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 样式 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 图片 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span> <span class="comment">&lt;!-- javascript --&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>mvc:resources</code>标签配置不过滤谁。</p><ul><li><code>location</code>元素表示<code>webapp</code>目录下的包下的所有文件.</li><li><code>mapping</code>元素表示以<code>/static</code>开头的所有请求路径，如<code>/static/a</code> 或者<code>/static/a/b</code>.</li></ul><p>客户端发送<code>ajax</code>的请求，传的是<code>json</code>字符串，后端把<code>json</code>字符串封装到<code>user</code>对象中。</p><p>响应：将对象转换成<code>json</code>字符串。</p><ol><li>前端部分代码</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"异步请求测试"</span> <span class="attr">id</span>=<span class="string">"testJson"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#testJson"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">"post"</span>,</span></span><br><span class="line"><span class="actionscript">                url: <span class="string">"$&#123;pageContext.request.contextPath&#125;/user/testResponseBody"</span>,</span></span><br><span class="line"><span class="actionscript">                contentType: <span class="string">"application/json;charset=utf-8"</span>, <span class="comment">// 发送信息至服务器时内容编码类型</span></span></span><br><span class="line"><span class="actionscript">                data: <span class="string">'&#123;"username":"张三","password":"123","money":123&#125;'</span>, <span class="comment">// 发送的json数据</span></span></span><br><span class="line"><span class="actionscript">                dataType: <span class="string">"json"</span>, <span class="comment">// 服务器返回的数据类型 -- json</span></span></span><br><span class="line"><span class="actionscript">                success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">                    alert(data)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>控制器中的代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testResponseBody"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">testResponseBody</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"异步请求："</span> + user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制器中的代码，其中<code>@RequestBody</code>将前端发送的<code>ajax</code>请求的<code>json</code>格式数据封装成<code>JavaBean</code>。<code>@ResponseBody</code>将后端返回值<code>JavaBean</code>对象，格式化成<code>json</code>数据类型返回给客户端，直接响应。</p><p>总结：首先通过<code>@RequestBody</code>获取请求体数据，将前端请求的<code>json</code>字符穿转换成<code>JavaBean</code>对象，最后使用<code>@ResponseBody</code>注解把<code>JavaBean</code>对面转换成<code>Json</code>字符串，直接响应。</p><h5 id="2-6-1-5-ModelAndView对象"><a href="#2-6-1-5-ModelAndView对象" class="headerlink" title="2.6.1.5 ModelAndView对象"></a>2.6.1.5 ModelAndView对象</h5><p><code>ModelAndView</code>对象是<code>Spring</code>提供的一个对象，可以用来调整具体的<code>JSP</code>视图，即可以用作控制方法的返回值。该对象中有两个方法：</p><p>方法1：<code>addObject</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">addObject</span><span class="params">(String attributeName, Object attributeValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getModelMap().addAttribute(attributeName, attributeValue);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加模型到该对象中，通过上面的代码可以看出，和前面所讲的请求参数封装中用到的对象是同一个。即<code>jsp</code>页面中同样可以使用<code>EL</code>表达式从<code>request</code>域中获取值。</p><p>方法2：<code>setViewName</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setViewName</span><span class="params">(@Nullable String viewName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.view = viewName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>用于设置逻辑视图名称，视图解析器会根据名称前往指定的视图。这也<code>ModelAndView</code>和<code>Model</code>最大的不同，它可以设置跳转的逻辑视图名称。</p><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAndView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testModelAndView..."</span>);</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.addObject(<span class="string">"username"</span>, <span class="string">"张三"</span>);</span><br><span class="line">    mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>可以将对象存储到<code>request</code>域中。<code>mv.addObject(&quot;key&quot;,value)</code></li><li>可以存储跳转到哪个页面中。<code>mv.setViewName(&quot;success&quot;)</code> – 选择视图解析器，进行解析。</li></ol><p>前端代码:可以直接通过<code>EL</code>表达式进行值的获取，<code>${username} --&gt; 张三</code>。</p><p><code>ModelAndView</code>和<code>Model</code>两者的不同：</p><ol><li><code>Model</code>是每次请求中都存在的默认参数，利用其<code>addAttribute()</code>方法即可将服务器的值传递到<code>jsp</code>页面中；</li><li><code>ModelAndView</code>包含<code>model</code>和<code>view</code>两部分，使用时需要自己实例化，利用<code>ModelMap</code>用来传值，也可以设置<code>view</code>的名称。</li><li>总而言之，就是<code>ModelAndView</code>除了同<code>Model</code>一样包含存储的键值外，它还存储着跳转页面的名称地址，直接将<code>ModelAndView</code>对象整体作为返回值，其对象中存储的地址自动由<code>SpringMVC</code>进行视图解析。</li></ol><h3 id="2-7-SpringMVC实现文件上传"><a href="#2-7-SpringMVC实现文件上传" class="headerlink" title="2.7 SpringMVC实现文件上传"></a>2.7 SpringMVC实现文件上传</h3><p>文件上传的前提：</p><ul><li><code>form</code>表单的<code>enctype</code>取值必须是：<code>multipart/form-data</code>。默认值是：<code>application/x-www-form-urlencoded</code>。<code>enctype</code>:是表单请求正文的类型。</li><li><code>method</code>属性取值必须是<code>POST</code></li><li>提供一个文件选择域<code>&lt;input type=&quot;file&quot;/&gt;</code></li></ul><p>文件上传的原理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">当form 表单的enctype取值不是默认值后，request.getParameter()将失效。 </span><br><span class="line">enctype=”application/x-www-form-urlencoded”时，form 表单的正文内容是：</span><br><span class="line">key=value&amp;key=value&amp;key=value</span><br><span class="line">当form 表单的enctype取值为Mutilpart/form-data时，请求正文内容就变成：</span><br><span class="line">每一部分都是 MIME 类型描述的正文</span><br><span class="line">-----------------------------7de1a433602ac 分界符</span><br><span class="line">Content-Disposition: form-data; name="userName" 协议头</span><br><span class="line">aaa 协议的正文</span><br><span class="line">-----------------------------7de1a433602ac</span><br><span class="line">Content-Disposition: form-data; name="file"; </span><br><span class="line">filename="C:\Users\zhy\Desktop\fileupload_demofile\b.txt"</span><br><span class="line">Content-Type: text/plain 协议的类型（MIME 类型）</span><br><span class="line">bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class="line">-----------------------------7de1a433602ac--</span><br></pre></td></tr></table></figure><p>使用<code>Commons-fileupload</code>组件实现文件上传，需要导入该组件相应的支撑<code>jar</code>包：</p><ul><li><code>Commons-fileupload</code></li><li><code>Commons-io</code></li></ul><p><code>Commons-io</code>不属于文件上传组件的开发<code>jar</code>文件，但<code>Commons-fileupload</code>组件从1.1版本开始，它工作时需要<code>commons-io</code>包的支持。</p><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user/testUpload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"文件上传"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端页面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testUpload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testUpload</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 先获取到要上传的文件目录 - 即需要上传的目录设置成uploads</span></span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads"</span>);</span><br><span class="line">    <span class="comment">// 创建File对象，用于向该路径下上传文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="comment">// 判断路径是否存在，若不存在则创建该路径</span></span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建磁盘文件项工厂</span></span><br><span class="line">    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload fileUpload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">    <span class="comment">// 解析request对象</span></span><br><span class="line">    List&lt;FileItem&gt; list = fileUpload.parseRequest(request);</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">        <span class="comment">// 判断文件项是普通字段，还是上传的文件</span></span><br><span class="line">        <span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 上传文件</span></span><br><span class="line">            <span class="comment">// 获取到上传文件的名称</span></span><br><span class="line">            String name = fileItem.getName();</span><br><span class="line">            String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>).toUpperCase();</span><br><span class="line">            <span class="comment">// 将文件名唯一化</span></span><br><span class="line">            name = uuid + <span class="string">"_"</span> + name;</span><br><span class="line">            <span class="comment">// 上传文件</span></span><br><span class="line">            fileItem.write(<span class="keyword">new</span> File(file, name));</span><br><span class="line">            <span class="comment">// 删除临时文件</span></span><br><span class="line">            fileItem.delete();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：<code>request.getSession().getServletContext()</code>获取<code>servlet</code>容器对象(最大的域对象)，也可以理解为项目真正部署到<code>tomcat</code>时获得的<code>tomcat</code>(服务器)对象。因为<code>session</code>是服务器端对象。而<code>request.getSession().getServletContext().getRealPath()</code>用于获取指定目录在服务器端所真正部署的路径。</p><h4 id="2-7-1-SpringMVC传统方式的文件上传"><a href="#2-7-1-SpringMVC传统方式的文件上传" class="headerlink" title="2.7.1 SpringMVC传统方式的文件上传"></a>2.7.1 SpringMVC传统方式的文件上传</h4><p><code>SpringMVC</code>传统方式的文件上传，指的是我们上传的文件和访问的应用存在于同一台服务器上，并且上传完成以后，浏览器可能跳转。</p><p><code>SpringMVC</code>框架提供了<code>MultipartFile</code>对象，该对象表示上传的文件，要求变量名称必须和表单<code>file</code>标签的<code>name</code>属性名称相同。</p><ol><li>配置文件解析器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件解析器对象，要求id名称必须是multipartResolver --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置文件最大上传的byte --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>控制器代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testSpringMVCUpload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSpringMVCUpload</span><span class="params">(HttpServletRequest request, MultipartFile upload)</span> <span class="keyword">throws</span> IOException </span>&#123; <span class="comment">// 参数upload要和前端中的name属性相同</span></span><br><span class="line">    System.out.println(<span class="string">"SpringMVC方式的文件上传.."</span>);</span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads"</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取到要上传文件的名称</span></span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>).toUpperCase();</span><br><span class="line">    filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    upload.transferTo(<span class="keyword">new</span> File(path,filename));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SpringMVC</code>文件上传的主要步骤图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/12/23/r6iPoj.png" alt="03-原理"></p><p>首先前端请求，经过前端控制器将请求交给配置文件解析器，由相应的处理器进行处理。</p><h4 id="2-7-2-SpringMVC跨服务器方式的文件上传"><a href="#2-7-2-SpringMVC跨服务器方式的文件上传" class="headerlink" title="2.7.2 SpringMVC跨服务器方式的文件上传"></a>2.7.2 SpringMVC跨服务器方式的文件上传</h4><p>在实际开发中，我们可能会处理很多不同功能的服务器。例如：</p><ul><li>应用服务器：负责部署我们的应用</li><li>数据库服务器：运行我们的数据库</li><li>缓存和消息服务器：负责处理大并发访问的缓存和消息</li><li>文件服务器：负责存储用户上传文件的服务器</li></ul><p>即每个服务器负责每一个功能模块，而不是由一个服务器承担全部。分服务器处理的目的是让服务器各司其职，从而提高我们项目的运行效率。请求都由应用服务器进行处理转发，而需要的功能都分发到每个单独的服务器进行处理。见下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/12/23/r6iSOS.png" alt="04"></p><p>现在模拟图片上传：</p><ol><li>导入开发需要的<code>Jar</code>包</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跨服务器上传需要的依赖 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>需要在图片服务器上的<code>web.xml</code>添加如下配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即：接收文件的目标服务器可以支持写入操作。</p><ol start="3"><li>编写应用服务器端的控制器代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testSpringMVCUpload2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSpringMVCUpload2</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"SpringMVC跨服务器上传..."</span>);</span><br><span class="line">    <span class="comment">// 定义图片服务器的请求路径</span></span><br><span class="line">    String path = <span class="string">"http://localhost:8088/picture/uploads/"</span>;</span><br><span class="line">    <span class="comment">// 获取到上传文件的名称</span></span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>).toUpperCase();</span><br><span class="line">    filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line">    <span class="comment">// 向图片服务器上传文件</span></span><br><span class="line">    <span class="comment">// 创建客户端对象</span></span><br><span class="line">    Client client = Client.create();</span><br><span class="line">    <span class="comment">// 连接图片服务器地址</span></span><br><span class="line">    WebResource webResource = client.resource(path + filename);</span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    webResource.put(String<span class="class">.<span class="keyword">class</span>,<span class="title">upload</span>.<span class="title">getBytes</span>())</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-8-SpringMVC的异常处理"><a href="#2-8-SpringMVC的异常处理" class="headerlink" title="2.8 SpringMVC的异常处理"></a>2.8 SpringMVC的异常处理</h3><p>系统中的异常包括两类：预期异常和运行时异常<code>RuntimeException</code>，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</p><p>系统的<code>dao</code>、<code>service</code>、<code>controller</code>出现都通过<code>throws Exception</code>向上抛出，最后由<code>SpringMVC</code>前端控制器交由异常处理器进行异常处理。<code>SpringMVC</code>异常处理见下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/12/23/r6i9eg.png" alt="05"></p><p>控制器中捕获异常，从下向上抛出异常。</p><p>其目的是为了在出现异常的时候，跳到另外一个“友好”页面。模拟应用步骤：</p><ol><li><p>自定义一个异常类。(继承<code>Exception</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.lizhi.other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于定义异常信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写异常处理器类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异常信息打印</span></span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        SysException sysException = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> SysException) &#123; <span class="comment">// 如果抛出的是自定义异常则直接转换</span></span><br><span class="line">            sysException = (SysException) ex;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果抛出的不是系统自定义异常则重新构造一个系统错误异常。</span></span><br><span class="line">            sysException = <span class="keyword">new</span> SysException(<span class="string">"系统错误，请于管理员联系"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"message"</span>, sysException.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即异常处理器，实现接口 <code>HandlerExceptionResolver</code>，其中<code>ex</code>参数表示接收到的异常对象。其中创建的<code>ModelAndView</code>用于存入异常信息，键值对；再设置跳转路径。</p><p>这里我们可以通过判断不同的异常类型跳转到不同的页面显示。</p></li><li><p><code>bean</code>配置文件中配置异常处理器类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义异常处理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.other.SysExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>模拟出现异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"testException"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"模拟异常处理器的处理方式"</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面出现结果 –&gt; 系统错误，请于管理员联系</p></li></ol><h3 id="2-9-SpringMVC中的拦截器"><a href="#2-9-SpringMVC中的拦截器" class="headerlink" title="2.9 SpringMVC中的拦截器"></a>2.9 SpringMVC中的拦截器</h3><p><code>Spring MVC</code> 的处理器拦截器类似于 <code>Servlet</code> 开发中的过滤器 <code>Filter</code>，用于对处理器进行预处理和后处理。<br>用户可以自己定义一些拦截器来实现特定的功能。</p><p>谈到拦截器，还要向大家提一个词——拦截器链<code>（Interceptor Chain）</code>。拦截器链就是将拦截器按一定的顺<br>序联结成一条链。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s3.ax1x.com/2020/12/23/r6Pzy8.png" alt="06"></p><p>说到这里，可能大家脑海中有了一个疑问，这不是我们之前学的过滤器吗？是的它和过滤器是有几分相似，但<br>是也有区别，接下来我们就来说说他们的区别：</p><ul><li><p>过滤器是 <code>servlet</code> 规范中的一部分，任何 <code>java web</code> 工程都可以使用。 </p></li><li><p>拦截器是 <code>SpringMVC</code> 框架自己的，只有使用了 <code>SpringMVC</code> 框架的工程才能用。</p></li><li><p>过滤器在 <code>url-pattern</code> 中配置了<code>/*</code>之后，可以对所有要访问的资源拦截。</p></li><li><p><strong>拦截器它是只会拦截访问的控制器方法</strong>，如果访问的是 <code>jsp</code>，<code>html</code>,<code>css</code>,<code>image</code> 或者 <code>js</code> 是不会进行拦<br>截的。</p></li><li><p>它也是 <code>AOP</code> 思想的具体应用。</p></li><li><p>我们要想自定义拦截器， 要求必须实现：<code>HandlerInterceptor</code> 接口。</p></li><li><p><code>HandlerInterceptor</code>拦截的是请求地址，所以针对请求地址做一些验证、预处理等操作比较合适。</p></li></ul><h4 id="2-9-1-自定义拦截器步骤"><a href="#2-9-1-自定义拦截器步骤" class="headerlink" title="2.9.1 自定义拦截器步骤"></a>2.9.1 自定义拦截器步骤</h4><ol><li><p>创建类，实现<code>HandlerInterceptor</code>接口，需要重写需要的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"拦截器执行了...前"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拦截器执行了...后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"页面跳转完毕后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>preHandler</code></p><p>方法是在<code>controller</code>方法执行前，进行拦截的方法；返回结果为<code>true</code>表示放行，返回结果为<code>false</code>表示拦截(配合条件判断使用)，因为提供了<code>request</code>、<code>response</code>参数，所以可以使用转发或者重定向直接跳转到指定的页面。</p><p>调用：按拦截器定义顺序调用</p><p>作用：如果决定该拦截器对请求进行拦截处理后还要调用其他的拦截器，或者是需要业务处理器进行处理，则返回<code>true</code>；如果不需要再调用其他的组件去处理请求，则返回<code>false</code>。</p></li><li><p><code>postHandler</code></p><p>后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过<code>modelAndView</code>（模型和视图对象）对模型数据进行处理或对视图进行处理，<code>modelAndView</code>也可能为<code>null</code>。</p><p>按拦截器定义逆序调用；在拦截器链内所有拦截器返回成功后进行调用。</p><p>作用：在业务处理器处理完请求后，但是<code>DispatcherServlet</code>向客户端返回响应前被调用，处理<code>ModelAndView</code>中的值。</p></li><li><p><code>afterCompletion</code></p><p>调用顺序：按拦截器定义逆序调用</p><p>调用时机：对拦截器链内所有拦截器内返回成功的拦截器才调用它的<code>afterCompletion</code>方法。</p><p>作用：在业务处理器处理完请求后，但是<code>DispathcerServlet</code>向客户端返回响应前被调用。可以在该方法中进行一些资源清理的操作。</p><p>在<code>view</code>视图渲染完毕以后执行，不能再进行页面的跳转。</p></li></ul><p>一旦在<code>preHandler</code>方法中返回了<code>false</code>(等同于出现了异常)，后续的拦截器和<code>controller</code>方法就都不会再执行，也不会再执行<code>postHandler</code>方法，只会倒叙执行<code>afterCompletion</code>方法。</p></li></ol><p>拦截器只能拦截<code>Controller</code>中的方法。</p><ol start="2"><li><p>在<code>springmvc.xml</code>配置文件中配置拦截器类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 哪些方法进行拦截 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 哪些方法不进行拦截</span></span><br><span class="line"><span class="comment">             &lt;mvc:exclude-mapping path=""/&gt;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注册拦截器对象 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.utils.MyInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以配置多个拦截器，拦截器执行的顺序就是配置文件中注册的拦截器对象的顺序。</p></li></ol><h4 id="2-9-2-HandlerInterceptor接口中的方法总结"><a href="#2-9-2-HandlerInterceptor接口中的方法总结" class="headerlink" title="2.9.2 HandlerInterceptor接口中的方法总结"></a>2.9.2 HandlerInterceptor接口中的方法总结</h4><ol><li><p><code>preHandle</code>方法是<code>controller</code>方法执行前拦截的方法</p><ol><li><p>可以使用<code>request</code>或者<code>response</code>跳转到指定的页面</p></li><li><p><code>return true</code>放行，执行下一个拦截器，如果没有拦截器，执行<code>controller</code>中的方法。</p></li><li><p><code>return false</code>不放行，不会执行<code>controller</code>中的方法。</p></li></ol></li><li><p><code>postHandle</code>是<code>controller</code>方法执行后执行的方法，在<code>JSP</code>视图执行前。</p><ol><li><p>可以使用<code>request</code>或者<code>response</code>跳转到指定的页面</p></li><li><p>如果指定了跳转的页面，那么<code>controller</code>方法跳转的页面将不会显示。</p></li></ol></li><li><p><code>postHandle</code>方法是在<code>JSP</code>执行后执行</p><ol><li><code>request</code>或者<code>response</code>不能再跳转页面了</li></ol></li></ol><h2 id="三、SpringMVC扩展"><a href="#三、SpringMVC扩展" class="headerlink" title="三、SpringMVC扩展"></a>三、SpringMVC扩展</h2><h3 id="3-0-启动搭建"><a href="#3-0-启动搭建" class="headerlink" title="3.0 启动搭建"></a>3.0 启动搭建</h3><p>SpringMVC是Spring的web模块；所有模块的运行都是依赖核心模块(IOC模块)</p><ul><li>核心容器模块</li><li>web模块</li></ul><p>SpringMVC思想是由一个前端控制器能拦截所有请求，并智能派发；这个前端控制器是一个Servlet；应该在web.xml中配置servlet来拦截所有请求。</p><p>前端控制器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Servlet的初始化参数，读取springMVC的配置文件，创建spring容器,用于加载配置文件</span></span><br><span class="line"><span class="comment">          MVC配置文件加载成功，那么其中的扫描就成功，继而到控制器中类加载成对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ContextConfigLocation：指定SpringMVC配置文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务器在启动时，就加载资源 值越小优先级越高，越先创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置资源路径/表明所有的资源皆可被访问到;/*和/都是拦截所有请求，/*的范围更大；还会拦截到*.jsp请求；一旦拦截，页面就无法显示了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表明只有hello的资源路径可以被访问到（拦截到）</span></span><br><span class="line"><span class="comment">      &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>springMVC.xml</code>中配置扫描组件。</p><p>配置视图解析器，能帮我们拼接页面地址，即进行地址映射。方式，通过前缀和后缀的方式进行映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring创建容器时要扫描的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lizhi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器 Ioc容器对象，由Tomcat调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件具体所在的目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件解析的类型(后缀名) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringMVC中的HelloWorld的运行流程：</p><ol><li><p>运行流程：</p><ol><li>客户端点击链接发送请求</li><li>来到tomcat服务器</li><li>SpringMVC的前端控制器收到所有请求</li><li>来看请求地址和<code>@RequestMapping</code>标配的哪个匹配，来找到到底使用哪个类的哪个方法</li><li>前端控制器找到了目标处理器类和目标方法，直接利用返回执行目标方法；</li><li>方法执行完成以后会有一个返回值；SpringMVC认为这个返回值就是要去的页面地址</li><li>拿到方法返回值以后；用视图解析器进行拼串得到完整的页面地址；</li><li>拿到页面地址，前端控制器帮我们转发到页面；</li></ol></li><li><p><code>@RequestMapping</code>：就是告诉SpringMVC,这个方法用来处理什么请求。</p></li><li><p>如果不指定配置文件位置：</p><p>/WEB-INF/springDispatcherServlet-serlvet.xml</p><p>如果不指定也会默认去找一个文件；/WEB-INF/xxx-serlvet.xml，其中xxx是指定的前端控制器的名称，因此也可以创建这么一个xml文件作为SpringMVC的配置文件，直接放在web下。</p></li></ol><h3 id="3-1-前端控制器路径问题"><a href="#3-1-前端控制器路径问题" class="headerlink" title="3.1 前端控制器路径问题"></a>3.1 前端控制器路径问题</h3><p>SpringMVC中关于前端控制器路径配置的问题：</p><p>在整个Tomcat服务器中，服务器大<code>web.xml</code>中有一个<code>DefaultServlet</code>是<code>url-pattern=/</code>，我们自定义配置中的前端控制器也设置的<code>url-pattern=/</code>，如果访问静态资源，就会来到DispatcherServlet(前端控制器)看那个方法的RequestMapping是这个<code>index.html</code>。</p><p>在Tomcat中的<code>DefaultServlet</code>是Tomcat中处理静态资源的。除过Servlet和jsp都是静态资源；我们的前端控制设置了<code>/</code>禁用了<code>tomcat</code>服务器中的DefaultServlet。</p><p>为什么jsp又能访问；因为我们没有覆盖服务器中的<code>JspServlet</code>的配置。</p><p>关于上面这一块可以看下Tomcat总的web.xml文件，里面配置了jsp的servlet，静态资源的servlet，动态资源servlet，它们都设定了各种路径，来映射到这些对应个的servlet上进行处理。但是，一旦我们的<code>DispatcherServlet</code>进行了配置，会优先交给它进行拦截请求，到<code>Controller</code>中进行处理，其实本质上<code>DispatcherServlet</code>也是<code>servlet</code>，只是它将所有拦截到的请求都映射到给它自己来进行请求，交给<code>Controller</code>进行处理。</p><p>所以<code>/*</code>直接就是拦截所有请求；我们写<code>/</code>；也是为了迎合后面的Rest风格的<code>URL</code>地址。</p><h3 id="3-2-字符编码"><a href="#3-2-字符编码" class="headerlink" title="3.2 字符编码"></a>3.2 字符编码</h3><p>在web.xml中配置字符过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置解决中文乱码的过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置过滤器中的属性值,指定POST请求乱码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤所有请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>GET的请求编码，设置在服务器端，在server.xml的8080处添加URIEncoding=”UTF-8”</strong></p><p>字符编码Filter一定要在其它Filter之前。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String encoding = <span class="keyword">this</span>.getEncoding();</span><br><span class="line">    <span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isForceRequestEncoding() || request.getCharacterEncoding() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setCharacterEncoding(encoding); <span class="comment">// 在这里设定字符编码，也就是在其它过滤器还没有获取到请求参数前，在这里给请求参数设定编码，否则其它filter都已经获取到参数进行使用了，再进行设置就没有意义了啊</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isForceResponseEncoding()) &#123;</span><br><span class="line">            response.setCharacterEncoding(encoding);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-SpringMVC数据传递"><a href="#3-3-SpringMVC数据传递" class="headerlink" title="3.3 SpringMVC数据传递"></a>3.3 SpringMVC数据传递</h3><p>思考：SpringMVC除过在方法行传入原生的request和session外还能怎么样在数据带给页面？</p><p>可以在方法处传入Map、或者Model或者ModelMap。给这些参数里面保存的所有数据都会放在域中。可以在页面获取。</p><p>方式1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle01"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">    map.put(<span class="string">"msg"</span>, <span class="string">"你好"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样前端，可以通过在request域中获取到这个map中存储的值。</p><p>方式2/3：采用Model和ModelMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle02"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle02</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>, <span class="string">"你好model"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle03"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle02</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>, <span class="string">"你好modelMap"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同方式一一样，都可以通过在前端中的request域中获取到值。</p><p>通过三种的类型打印：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">validation</span>.<span class="title">support</span>.<span class="title">BindingAwareModelMap</span></span></span><br></pre></td></tr></table></figure><p>都是同一种类型。</p><p>所以，Map、Model，ModelMap，最终都是BindingAwareModelMap工作。相当于给BindingAwareModel中保存的东西都会被放在请求域中。</p><p>通过源码分析，他们之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/22/hpQWKs.png" alt="image-20210618162524167"></p><p>方法的返回值可以变为ModelAndView类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle04"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handle04</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 之前的返回值我们就叫视图名;视图名，是通过视图解析器 最终拼串得到页面的真实地址;</span></span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"success"</span>);</span><br><span class="line">    mv.addObject(<span class="string">"msg"</span>, <span class="string">"您好"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式，同时将view和model数据进行返回；而且数据是放在请求域中。可以为页面携带数据。</p><p>SpringMVC提供了一种可以临时给Session域中保存数据的方式；使用注解：<code>@SessionAttributes</code>。只能使用在类上。例如：<code>@SessionAttributes(value = {&quot;msg&quot;},types={String.class})</code>；给BindingAwareModelMap中保存的数据，或者ModelAndView中的数据。同时给session中放一份。value指定保存数据时要给session中方的数据的key。分别以指定value和types两种方式进行保存session域。</p><h3 id="3-4-ModelAttribute"><a href="#3-4-ModelAttribute" class="headerlink" title="3.4 ModelAttribute"></a>3.4 ModelAttribute</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle05"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle05</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    System.out.println(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在全字段更新中，首先根据<code>Id</code>从数据库中查询出Account对象，再根据前端的传过来的字段值进行相应的覆盖，而不是创建一个新的对象，对其赋值，否则里面空值就会覆盖原来的数据库中的值。</p><p>就是通过ModelAttribute达到这个效果。</p><p>思想核心：</p><ol><li>SpringMVC要封装请求参数的Book对象不应该是自己new出来的。而应该是从<strong>数据库</strong>中拿到的准备好的对象。</li><li>再来使用这个对象封装请求参数。</li></ol><p><code>@ModelAttribute</code>，可以标记在方法和对象上。</p><p>标记在方法上：</p><ul><li>这个方法就会提前于目标方法先运行，即提前在数据中查询对应的对象信息。</li><li>将这个对象信息保存起来(方便下一个方法还能使用)，保存的方式，可以通过map进行保存(保存在request域中)</li><li>可以告诉SpringMVC要封装的请求参数不应该是自己new出来的，而是从数据库中查询出来的。再使用这个对象封装参数<ul><li>在接收请求参数的对象地方再标记上<code>@ModelAttribute</code>，其中的value就是前面保存在map中指定的Key，目的是做映射，这样就能在请求参数封装的对象中，取出从数据库中查询到的值。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle05"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle05</span><span class="params">(@ModelAttribute(<span class="string">"account"</span>)</span> Account account) </span>&#123;</span><br><span class="line">    System.out.println(account);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modelAttribute</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ModelAttribute...测试"</span>);</span><br><span class="line">    <span class="comment">// 下面模拟从数据库中查询到的数据</span></span><br><span class="line">    Account account = <span class="keyword">new</span> Account();</span><br><span class="line">    account.setMoney(<span class="number">100f</span>);</span><br><span class="line">    account.setAccountId(<span class="number">10</span>);</span><br><span class="line">    account.setAccountName(<span class="string">"123"</span>);</span><br><span class="line">    Address address = <span class="keyword">new</span> Address();</span><br><span class="line">    address.setCityName(<span class="string">"beijing"</span>);</span><br><span class="line">    address.setProvinceName(<span class="string">"beijing"</span>);</span><br><span class="line">    account.setAddress(address);</span><br><span class="line">    map.put(<span class="string">"account"</span>, account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会在每个controller执行之前，先执行ModelAttribute目标方法，然后绑定在对应的参数上，这个参数并不是新new出来的，而是map中保存的。</p><h4 id="3-4-1-原理"><a href="#3-4-1-原理" class="headerlink" title="3.4.1 原理"></a>3.4.1 原理</h4><p>这里<code>ModelAttribute</code>中存放的map和Model，都是同一个对象。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/22/hpQ2vj.png" alt="image-20210618192910976"></p><h3 id="3-5-SpringMVC源码解析"><a href="#3-5-SpringMVC源码解析" class="headerlink" title="3.5 SpringMVC源码解析"></a>3.5 SpringMVC源码解析</h3><h4 id="3-5-1-前端控制器架构-——-DispatcherServlet"><a href="#3-5-1-前端控制器架构-——-DispatcherServlet" class="headerlink" title="3.5.1 前端控制器架构 —— DispatcherServlet"></a>3.5.1 前端控制器架构 —— DispatcherServlet</h4><p>当请求到来的时候，其执行流程：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://z3.ax1x.com/2021/08/22/hpQg2Q.png" alt="image-20210618195025752"></p><p>再进一步细看doDispatch:</p><p>ha.handle执行目标方法，即处理(控制)器的方法被调用。</p><p>processDispatchResult</p><p>总流程：</p><ol><li>所有请求过来DispatcherServlet收到请求；</li><li>调用doDispatch()方法进行处理</li><li>检查是否是文件上传请求<ul><li>如果是文件上传请求，就包装新的request</li></ul></li><li>通过getHandler(processedResult)根据当前请求地址找到哪个类可以进行处理，即找到处理这个请求的目标处理器，就是找到对应的Controller<ul><li>根据当前请求在HandlerMapping中找到这个请求的映射信息，获取到目标处理器类</li></ul></li><li>如果没有找到对应的处理器，就抛出异常。</li><li>通过getHandlerAdapter()，根据当前处理器你类获取到能执行这个处理器方法的适配器。就是确定当前类下哪个方法能够处理这个请求。即拿到能执行这个类的所有方法的适配器(反射工具)。(这里是注解方式的适配器)<ul><li>根据当前处理器类，找到当前类的HandlerAdapter(适配器)，即具体的方法。</li></ul></li><li>使用适配器执行目标方法，将目标方法执行完成后的返回值作为视图名，并设置到modelAndView中。目标方法无论怎么写，最终适配器执行完成以后都会执行后的信息封装成ModelAndView</li><li>如果没有视图名设置一个默认的视图名</li><li>根据ModelAndView的信息转发到具体的页面。processDispatchResult()方法；转发到目标页面，根据方法最终执行完成后封装到ModelAndView；转发到对应页面，而且ModelAndView中的数据可以从请求域中获取。</li></ol><h4 id="3-5-2-getHandler-细节"><a href="#3-5-2-getHandler-细节" class="headerlink" title="3.5.2 getHandler()细节"></a>3.5.2 getHandler()细节</h4><p>怎么根据当前请求就能找到哪个类来处理。进一步进行验证，进入该方法进行一探究竟。</p><p>该方法会返回目标处理器类的执行链；</p><p>HandlerMapping：处理器映射：他里面保存了每一个处理器能处理哪些请求的映射信息。</p><ul><li>DefaultAnnotationHandlerMapping：下面的handlerMap保存了每个请求能够通过哪个controller进行处理。通过遍历，找到请求对应的处理器。（在IOC容器一启动，就创建controller对象，再进行扫描，每个处理器都能进行处理什么请求，并保存到handlerMap属性中；下一次请求过来，就来看哪个HandlerMapping中有这个请求）</li></ul><h4 id="3-5-3-getHandlerAdapter"><a href="#3-5-3-getHandlerAdapter" class="headerlink" title="3.5.3 getHandlerAdapter"></a>3.5.3 getHandlerAdapter</h4><p>根据前面得到的处理器，找到其对应请求的适配器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">存在三种方式的适配器，这里是采用注解版本的适配器。</span><br><span class="line"></span><br><span class="line">寻求目标处理器类的适配器目的：要拿适配器才去执行目标方法。AnnotationMethodHandlerAdapter：能解析注解方法的适配器。处理器类中只要有标了注解的这些方法就可以使用。</span><br><span class="line"></span><br><span class="line">#### 3.5.4 DispatcherServlet的属性</span><br><span class="line"></span><br><span class="line">DispatcherServlet中的几个引用类型的属性，就是SpringMVC的九大组件。SpringMVC在工作的时候，就是这九大组件完成的</span><br><span class="line"></span><br><span class="line">- 文件上传解析器</span><br><span class="line">- 区域信息解析器 和国际化相关</span><br><span class="line">- 主题解析器；强大的主题效果更换</span><br><span class="line">- Handler映射信息</span><br><span class="line">- Handler的适配器</span><br><span class="line">- SpringMVC强大的异常解析功能；异常解析器</span><br><span class="line">- viewNameTranslator</span><br><span class="line">- FlashMap+Manager:SpringMVC中运行重定向携带数据的功能(重定向时，也能携带数据的作用)</span><br><span class="line">- 视图解析器 -</span><br><span class="line"></span><br><span class="line">共同点:都是接口，提供规范；提供了规范，进行扩展。</span><br><span class="line"></span><br><span class="line">IOC容器启动，就会触发initStrategies方法。（onFresh()下的初始化方法)</span><br><span class="line"></span><br><span class="line">以HandlerMapping的初始化为例：</span><br><span class="line"></span><br><span class="line">```java</span><br></pre></td></tr></table></figure><p>组件的初始化：去容器中找这个组件，如果没有找到就用默认的配置；（有些组件在容器是使用类型找的，有些组件是使用id找的）</p><h4 id="3-5-5-ha-handle-…-深化"><a href="#3-5-5-ha-handle-…-深化" class="headerlink" title="3.5.5 ha.handle(…)深化"></a>3.5.5 ha.handle(…)深化</h4><p>难点是方法执行。该方法是如何通过反射确定程序传入的参数，进行的方法执行?</p><p>以下列该方法为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle05"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">handle05</span><span class="params">(@ModelAttribute(<span class="string">"account"</span>)</span> Account account,</span></span><br><span class="line"><span class="function">                        @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"Tom"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                        Map&lt;String,Object&gt; map,</span></span><br><span class="line"><span class="function">                        HttpServletRequest request) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"方法执行...."</span>);</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> account;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handler执行，是如何通过反射能够确定上面的参数，并执行该方法的？</p><p>该方法内部，最终是通过，<code>invokHandlerMethod(request,response,handler)</code>执行的目标方法。其大致流程：</p><ul><li><p>拿到方法的解析器</p></li><li><p>方法解析器根据当前请求地址找到真正的目标方法</p></li><li><p>创建一个方法执行器</p></li><li><p>包装原生的request,response</p></li><li><p>创建一个BindingAwareModelMap，创建一个隐含模型</p></li><li><p>执行目标方法 —— <code>Object result = methodInvoker.invokeHandlerMethod(...)</code>；真正执行目标方法；目标方法利用反射执行期间确定参数值，提前执行modelAttribute等所有的操作都是在方法中；</p><ul><li><p>找到所有@ModelAttribute注解标注的方法</p></li><li><p><code>args</code>；确定<code>modelAttribute</code>方法执行时要使用的每一个参数的值，当前返回值的这个方法。</p><ul><li><p>创建了一个和参数个数一样长度数组，用于保存</p></li><li><p>找到目标方法这个参数的所有注解，如果有注解就解析并保存注解的信息；</p></li><li><p>如果没有找到注解</p><ul><li>resolveCommonArgument，解析普通参数值<ul><li>继而进入，resolveStandarArgument（解析标准参数），即用来确定当前参数，是否是原生API。</li></ul></li><li>查看该参数是否是未解析参数</li><li>查看该参数是否是默认值</li><li>获取到参数类型，判断该参数类型是否Model旗下，或者参看是否是Map类型旗下。如果是的话，就将隐含模型将其赋值给<code>args[i]</code>参数。</li></ul></li></ul></li><li><p>将目标方法参数通过暴力反射，做成可访问的。</p></li><li><p><code>attributeMethodToInvoke</code>执行该目标方法。</p></li><li><p>如果方法上标注的ModelAttribute注解如果有value值，就是attrName的值。如果没设置，其值就会变为返回值类型首字母小写，比如void,或者account等。<code>@ModelAttribute</code>标在方法上的另一个作用；可以把方法运行后的返回值按照方法上<code>@ModelAttribute(&quot;value&quot;)</code>指定<code>key</code>放到隐含模型中，如果没有设置，就用返回值首字母小写。</p></li><li><p>把提前运行的ModelAttribute方法的返回值也放在隐含模型中。</p></li></ul></li><li><p>对<code>@ModelAttribute</code>方法执行完以后，再次解析目标方法参数是哪些值。</p><ul><li><p>如果参数标注了注解，保存是哪个注解的详细信息，</p><ul><li>如果参数有ModelAttribute注解，拿到ModelAttribute注解的值让attrName保存，其保存的是注解的value值，否则是返回值小写。</li></ul></li><li><p>如果没标注解</p><ul><li>先看是否普通参数(是否是原生api)</li><li>如果不是，再看是否Model或者Map，如果是就传入隐含模型。如果操作map，使用的隐含模型在前面的<code>@ModelAttribute</code></li></ul></li><li><p>如果自定参数没有注解</p><ul><li>先看是否是原生API</li><li>不是，就再看是否model或者map</li><li>再看是否是其他类型的，比如：SessioinStatus、Http</li><li>如果不是，就判断是否是简单类型的属性，比如：Integer,String，基本类型等<ul><li>如果是，paramName=””</li></ul></li><li>否者，就给attrName=””</li></ul><p>如果是自定类型对象，最终产生两个效果；</p><ul><li>如果这个参数标注了ModelAttribute注解就给attrName赋值为这个注解的value值</li><li>如果这个参数没有标注ModelAttribute注解就给attrName赋值””；</li></ul></li><li><p>确定自定义类型参数的值；还要将请求中的每一个参数赋值给这个对象。</p><ul><li><p>WebDataBinder对象，即resolveModelAttribute(…)方法对数据进行绑定。</p><ul><li><p>如果attrName是空串；就将参数类型的首字母小写作为值</p></li><li><p>确定对象目标值(SpringMVC确定POJO值的三步)</p><ul><li><p>如果隐含模型中有这个key(标了ModelAttribute注解就是注解指定的value，没标就是参数类型的首字母小写)指定的值；如果有讲这个值赋值给bindObject</p></li><li><p>如果没有，再判断是否是SessionAttributes标注的属性，就从session中拿</p></li><li><p>如果都不是，就利用反射创建对象。</p></li></ul></li></ul></li></ul></li></ul></li><li><p>最后在return处，执行目标方法</p></li></ul><p>总结：</p><ol><li><p>运行流程简单版</p></li><li><p>确定方法每个参数的值</p><ol><li><p>标了注解：保存注解的信息；最终得到这个注解应该对应解析的值；</p></li><li><p>没标注解</p><ol><li><p>看是否原生API</p></li><li><p>看是否Model或者是Map,xxx</p></li><li><p>都不是，看是否是简单类型；paramName=””</p></li><li><p>给attrName赋值；attrName(参数标了<code>@ModelAttribute(&quot;&quot;)</code>就是指定的，没标就是””)</p><p>确定自定义类型参数：</p><ol><li>attrName使用参数的类型首字母小写；或者使用之前<code>@ModelAttribute(&quot;&quot;)</code>的值</li><li>先看隐含模型中有这个attrName作为key对应的值；如果有就从隐含模型中获取并赋值</li><li>看是否<code>@SessionAttributes(value=&quot;xxx&quot;)</code>；标注的属性，如果是从session中拿；<ul><li>如果存在该注解，但是拿不到，就会报出异常</li></ul></li><li>否者，通过反射创建类型参数对应的对象</li></ol></li><li><p>拿到之前创建好的对象，使用数据绑定器(WebDataBinder)将请求中的每个数据绑定到对象。</p></li></ol></li></ol></li><li><p><code>@ModelAttribute</code>标注的方法会提前运行并把方法的运行结果放在隐含模型中；</p><ul><li>放的时候会使用一个key；<ul><li>如果<code>@ModelAttribute(&quot;value&quot;)</code>指定了，就用指定的value；</li><li>如果没有指定，就用返回值类型的首字母小写作为Key;</li></ul></li></ul></li><li><p><code>@SessionAttributes(value=&quot;xxx&quot;)</code>最好不要使用</p><ul><li>如果用的话，隐含模型中存在需要的值，这样就不会跳转到这一步</li><li>如果隐含模型中不存在，那就需要<code>session</code>域中存在需要的值，否者会报错。</li></ul></li></ol><h4 id="3-5-6-视图和视图解析器"><a href="#3-5-6-视图和视图解析器" class="headerlink" title="3.5.6 视图和视图解析器"></a>3.5.6 视图和视图解析器</h4><p>上一小节中，能够让模型进行了数据处理，那该如何对视图进行渲染呢。</p><p>视图解析器中的拼串，是从当前web项目下的,/WEB-INF/..进行拼接，资源请求。</p><p>如果采用转发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle06"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/index.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用转发，是从当前项目开始资源请求(<code>\</code>web项目的root目录下，不加就是相对路径)，而不是<code>/WEB-INF/..</code>。</p><p>采用这种方式，可以将请求转发给另外一个controller进行请求处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle05"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">handle05</span><span class="params">(@ModelAttribute(<span class="string">"account"</span>)</span> Account account,</span></span><br><span class="line"><span class="function">                        @<span class="title">RequestParam</span><span class="params">(name= <span class="string">"name"</span>,defaultValue = <span class="string">"tom"</span>)</span> String name,</span></span><br><span class="line"><span class="function">                        Map&lt;String,Object&gt; map,</span></span><br><span class="line"><span class="function">                        HttpServletRequest request) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"方法执行...."</span>);</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> account;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/handle06"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/handle05"</span>; <span class="comment">// 派发给handle05进行请求处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>foward</code>：前缀的转发，不会由我们配置的视图解析器进行解析。</p><p>如果采用重定向：</p><p><code>redirect:重定向的路径</code></p><p>原生的<code>Servlet</code>重定向需要加上项目名才能成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"demoName/hello.jsp"</span>)</span><br></pre></td></tr></table></figure><p>而使用SpringMVC会为路径自动的拼接上项目名(写法同转发)。</p><p>总结：有前缀的转发和重定向操作，配置的视图解析器就不会进行拼串。</p><h4 id="3-5-7-视图解析源码解析"><a href="#3-5-7-视图解析源码解析" class="headerlink" title="3.5.7 视图解析源码解析"></a>3.5.7 视图解析源码解析</h4><ol><li>方法执行后的返回值会作为页面地址参考，转发或重定向到页面</li><li>视图解析器会进行页面地址的拼串</li></ol><p>任何方法的返回值，都会包装成ModelAndView</p><p>核心方法<code>processDispatchResult(...)</code>进行页面的渲染，就是将域中的互数据在页面进行展示。下面对该方法的分析：</p><p>调用render(…)进行渲染页面。</p><p>得到View与ViewResolver；</p><ul><li>ViewResovler的作用是根据视图名(方法的返回值)得到View对象，具体体现在它的<code>resolverViewName(...)</code>方法上</li></ul><p>再进行探究，如何通过这个方法的返回值(视图名)得到View对象：</p><ul><li>首先遍历所有的viewResolvers，调用<code>resolverViewName(...)</code>视图解析器根据方法的返回值，得到一个<code>View</code>对象。即：所有配置的视图解析器都来尝试根据视图名(返回值)得到View(视图)对象；如果能得到就返回，得不到就换下一个视图解析器。</li><li><code>resolverViewName(...)</code>的具体实现<code>createView(...)</code><ul><li>是否重定向</li><li>如果是转发</li><li>如果没有前缀，就使用父类默认创建一个View</li><li>返回View对象</li></ul></li><li>调用View对象的render方法;</li><li>最终方法落地在<code>renderMergeOutputModel(...)</code>方法。<ul><li>期间方法中<code>exposeModelAsRequestAttributes(...)</code>方法将隐藏模型中的数据设置到<code>request</code>中的请求域中。</li></ul></li></ul><p>结论：视图解析器只是为了得到视图对象；视图对象才能真正的转发(将模型数据全部放在请求域中)或者重定向到页面。视图对象才真正渲染视图。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/handle"</span> <span class="attr">view-name</span>=<span class="string">"login"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>配置在mvc下的该标签，进行view时，经过mvc处理(不重要)。但是，只有当前映射的好用，其它的不好使。所以看下面这个高级功能：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driver</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-8-自定义视图和视图解析器"><a href="#3-5-8-自定义视图和视图解析器" class="headerlink" title="3.5.8 自定义视图和视图解析器"></a>3.5.8 自定义视图和视图解析器</h4><p>自定义视图解析器工作的整体流程：</p><ol><li>让我们的视图解析器工作</li><li>得到我们的视图对象</li><li>我们的视图对象自定义渲染逻辑 - render负责渲染</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.getWriter().write(<span class="string">".."</span>) <span class="comment">//</span></span><br></pre></td></tr></table></figure><ol><li><p>自定义视图和视图解析器的步骤</p><ul><li><p>编写自定义的视图及解析器</p></li><li><p>视图解析器必须放在IOC容器中</p></li><li><p>为了让自定义的视图解析器先执行，还需要实现Order接口(默认的视图解析器优先级最高)</p></li></ul></li></ol><p>实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> order = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (viewName.startsWith(<span class="string">"chemlez:"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(<span class="keyword">int</span> order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义视图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">implements</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"text/html"</span>; <span class="comment">// 返回资源响应类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; map, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">"自定义视图解析生效了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图解析器装配：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myResolver"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.view.MyViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-9-数据转换"><a href="#3-5-9-数据转换" class="headerlink" title="3.5.9 数据转换"></a>3.5.9 数据转换</h4><p>SpringMVC封装自定义类型对象的时候，是如何封装并绑定请求参数的？</p><p>JavaBean要和页面提交的数据进行一一绑定的过程。</p><p>牵扯到以下操作：</p><ol><li>数据绑定期间的数据类型转换(例如：前端传递过来的Key=value都是字符串类型，就需要对其进行类型转换)</li><li>数据绑定期间的数据格式化问题(例如：日期格式转化)</li><li>数据校验，即我们提交的数据必须是合法的。</li></ol><p>核心方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindRequestParameters(...) <span class="comment">// 请求参数解析与绑定</span></span><br></pre></td></tr></table></figure><p>WebDataBinder：数据绑定器负责数据类型转化和数据校验</p><p>ConversionService组件：负责数据类型的转换以及格式化功能</p><p>Validators：负责数据校验工作</p><p>bindingResult：负责保存以及解析数据绑定期间数据校验产生的错误</p><p>自定义类型转换器：</p><ol><li><p>不同类型的转换和格式化用它自己的<code>converter</code>，<code>ConversionService</code>存在多个<code>converter</code></p></li><li><p><code>ConversionService</code>是一个接口，它里面有converter进行工作；</p></li><li><p>步骤：</p><ul><li><p>实现Converter接口，写一个自定义的类型转换器；</p></li><li><p>两个泛型：</p><ul><li>S：Source：原数据类型</li><li>T：Target：需要转换的数据类型</li></ul></li><li><p>在convert方法中写转换的逻辑</p></li><li><p>Converter是ConversionService中的组件</p><ul><li>将自己编写的converter放进ConversionService中</li><li>将WebDataBinder中的ConversionService设置成我们这个加了自定义类型转换器的ConversionService</li></ul></li><li><p>配置出ConversionService，配置其对应的ConversionServiiceFactory的Bean，通过set注入配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告诉SpringMVC别用默认的ConversionService，用我们自定义的ConversionService、这里包含我们自定义的Converter --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置spring开启注解mvc的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"converterService"</span> /&gt;</span> // 1</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"converterService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给工厂注入一个新的类型转换器，并使用我们自己配置的类型转换组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置自定义类型转换器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.utils.StringToDate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="3-5-10-lt-mvc-annotation-driven-gt-标签"><a href="#3-5-10-lt-mvc-annotation-driven-gt-标签" class="headerlink" title="3.5.10 &lt;mvc:annotation-driven/&gt;标签"></a>3.5.10 <code>&lt;mvc:annotation-driven/&gt;</code>标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 静态资源能访问，动态映射的请求就不行 自己映射的请求就进行处理，不能处理的直接交给tomcat --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span> // 2</span><br></pre></td></tr></table></figure><p>通过:</p><p>只有1时，<code>DefaultAnnotationHandlerMapping</code>中的handlerMap中保存了每一个资源的映射信息；</p><p>静态资源不能访问：就是<code>handlerMap</code>中没有保存静态资源映射的请求</p><ul><li><code>handlerAdapter</code>：方法执行的适配器；</li></ul><p>只有2时，动态映射HandlerMapping对应的映射没有了<code>DefaultAnnotationHandlerMapping</code>没有了；使用SimpleUrlHandlerMapping替换了，他的作用就是将所有请求交给tomcat，而tomcat中，只配置了dispatcherServlet，没有其他映射的servlet，所以动态请求无法处理。</p><p>当1，2都添加时，会有RequestMappingHandlerMapping：动态资源可以访问；handlerMethods属性保存了每一个请求用哪个方法来处理。</p><ul><li>HandlerAdapters：存在RequestMappingHandlerAdapter，原来的AnnotationMethodHandlerAdapter被换成RequestMappingHandlerAdapter。</li></ul><h2 id="四、SSM框架的整合"><a href="#四、SSM框架的整合" class="headerlink" title="四、SSM框架的整合"></a>四、SSM框架的整合</h2><p>核心思想：通过<code>Spring</code>整合另外两个框架。</p><p>整合方式：配置文件加注解的方式。</p><p>整合的思路：</p><ul><li>搭建整合的环境</li><li><code>Spring</code>的配置搭建完成</li><li><code>Spring</code>整合<code>SpringMVC</code>框架</li><li><code>Spring</code>整合<code>Mybatis</code>框架</li></ul><h3 id="4-1-环境搭建"><a href="#4-1-环境搭建" class="headerlink" title="4.1 环境搭建"></a>4.1 环境搭建</h3><ol><li>数据库创建</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create database ssm;</span><br><span class="line">use ssm;</span><br><span class="line">create table account(</span><br><span class="line">id INTEGER PRIMARY key auto_increment,</span><br><span class="line">name VARCHAR(32),</span><br><span class="line">money DOUBLE(7,2)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>pom.xml</code>依赖导入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lizhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringMVC_03<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringMVC_03 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springAOP  AOP核心功能，例如代理工厂等 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springIOC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring整合junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事务控制 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringJDBC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SpringMVC_03<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>实体类编写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>dao</code>接口编写</li></ol><p>由于我们是使用<code>Mybatis</code>框架，所以不需要编写其实现类，只需要写接口即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写<code>Service</code>接口和实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对用户进行保存..."</span>);</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层:查询所有用户"</span>);</span><br><span class="line">        List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Spring框架代码的编写"><a href="#4-2-Spring框架代码的编写" class="headerlink" title="4.2 Spring框架代码的编写"></a>4.2 Spring框架代码的编写</h3><h4 id="4-2-1-搭建和测试Spring的开发环境"><a href="#4-2-1-搭建和测试Spring的开发环境" class="headerlink" title="4.2.1 搭建和测试Spring的开发环境"></a>4.2.1 搭建和测试Spring的开发环境</h4><ol><li><p>在项目中创建<code>applicationContext.xml</code>的配置文件，编写具体的配置信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描，要扫描的是service层和dao层的注解，要忽略web层注解，因为web层(Controller层)让SpringMVC框架去管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lizhi"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置要忽略的注解 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试方法，进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取Spring容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">    AccountService accountService = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    accountService.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-3-Spring整合SpringMVC框架"><a href="#4-3-Spring整合SpringMVC框架" class="headerlink" title="4.3 Spring整合SpringMVC框架"></a>4.3 Spring整合SpringMVC框架</h3><ol><li><p>在<code>web.xml</code>中配置<code>DispatcherServlet</code>前端控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置前端控制器：服务器启动必须加载，需要加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> <span class="comment">&lt;!-- 服务器启动的时候，让DispatcherServlet对象创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>web.xml</code>中配置<code>DispatcherServlet</code>过滤器解决中文乱码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置解决中文乱码的过滤器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>SpringMVC.xml</code> 的配置文件，编写配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描Controller(web层)的注解，别的不扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lizhi"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span> <span class="comment">&lt;!-- JSP文件所在的目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span> <span class="comment">&lt;!-- 文件的后缀名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置静态资源不过滤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span> <span class="comment">&lt;!-- 开启对SpringMVC注解的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试<code>SpringMVC</code>的框架搭建是否成功</p><ol><li><p>编写<code>index.jsp</code>和<code>list.jsp</code>前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/account/findAll"</span> &gt;</span>查询所有<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- list页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>查询所有<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写控制器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">"accountController"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表面层：查询所有用户..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<strong>查询所有</strong> 。</p></li></ol></li><li><p><code>Spring</code>整合<code>SpringMVC</code>框架</p><ol><li><p>目的：在<code>Controller</code>层中能成功调用<code>service</code>对象中的方法。</p></li><li><p>如果想在服务器启动的时候，获取到<code>Spring</code>的容器，那么就需要在项目启动的时候就去加载<code>applicationContext.xml</code>的配置文件。在<code>web.xml</code>中配置<code>ContextLoaderListener</code>监听器(该监听器只能加载<code>WEB-INF</code>目录下的<code>applicationContext.xml</code>的配置文件)。</p><blockquote><p>监听器的作用：监听器的作用是监听一些事件的发生从而进行一些操作，比如监听<code>ServletContext</code>,<code>HttpSession</code>的创建，销毁，从而执行一些初始化加载配置文件的操作，当Web容器启动后，<code>Spring</code>的监听器会启动监听，监听是否创建<code>ServletContext</code>的对象，如果发生了创建<code>ServletContext</code>对象这个事件(当web容器启动后一定会生成一个<code>ServletContext</code>对象，所以监听事件一定会发生)，<code>ContextLoaderListener</code>类会实例化并且执行初始化方法，将<code>Spring</code>的配置文件中配置的<code>bean</code>注册到<code>Spring</code>容器中，监听的操作是读取<code>WEB-INF/applicationContext.xml</code>，但是我们可以在<code>web.xml</code>中配置多个需要读取的配置文件，如下方所示，读取完成后所有的配置文件中的bean都会注册到spring容器中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        /WEB-INF/config/application-context.xml</span><br><span class="line">        /WEB-INF/config/cache-context.xml</span><br><span class="line">        /WEB-INF/config/captcha-context.xml</span><br><span class="line">        /WEB-INF/config/jeecms/jeecore-context.xml</span><br><span class="line">        /WEB-INF/config/jeecms/jeecms-context.xml</span><br><span class="line">        /WEB-INF/config/shiro-context.xml</span><br><span class="line">        /WEB-INF/config/plug/**/*-context.xml</span><br><span class="line">        /WEB-INF/config/quartz-task.xml</span><br><span class="line">        /WEB-INF/config/zxw/zxw-context.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p><code>web.xml</code>中对监听器的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Spring的监听器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置加载类路径的配置文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>Controller</code>中注入<code>service</code>对象，调用<code>service</code>对象的方法进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">"accountController"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有用户..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>业务层:查询所有用户<br>表现层：查询所有用户…</p></blockquote></li></ol></li></ol><h3 id="4-4-Spring整合Mybatis框架"><a href="#4-4-Spring整合Mybatis框架" class="headerlink" title="4.4 Spring整合Mybatis框架"></a>4.4 Spring整合Mybatis框架</h3><h4 id="4-4-1-搭建和测试MyBatis的环境"><a href="#4-4-1-搭建和测试MyBatis的环境" class="headerlink" title="4.4.1 搭建和测试MyBatis的环境"></a>4.4.1 搭建和测试MyBatis的环境</h4><ol><li><p>在<code>web</code>项目中编写<code>SqlMapConfig.xml</code>的配置文件，编写核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 使用的是注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper class="cn.itcast.dao.AccountDao"/&gt; --&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 该包下所有的dao接口都可以使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.itcast.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>AccountDao</code>接口的方法上添加注解，编写<code>SQL</code>语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface AccountDao &#123;</span><br><span class="line"></span><br><span class="line">    @Insert("insert into account (name,money) values(#&#123;name&#125;,#&#123;money&#125;)")</span><br><span class="line">    public void saveAccount(Account account);</span><br><span class="line"></span><br><span class="line">    @Select("select * from account")</span><br><span class="line">    public List<span class="tag">&lt;<span class="name">Account</span>&gt;</span> findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Account account = <span class="keyword">new</span> Account();</span><br><span class="line">    account.setName(<span class="string">"小黑"</span>);</span><br><span class="line">    account.setMoney(<span class="number">234</span>d);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 加载配置文件</span></span><br><span class="line">    InputStream is = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 创建工厂</span></span><br><span class="line">    SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">    SqlSessionFactory factory = builder.build(is);</span><br><span class="line">    <span class="comment">// 获取sqlSession对象</span></span><br><span class="line">    SqlSession session = factory.openSession();</span><br><span class="line">    <span class="comment">// 常见代理对象</span></span><br><span class="line">    AccountDao accountDao = session.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    accountDao.saveAccount(account);</span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    session.commit();</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">    is.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-4-2-Spring整合MyBatis框架"><a href="#4-4-2-Spring整合MyBatis框架" class="headerlink" title="4.4.2 Spring整合MyBatis框架"></a>4.4.2 Spring整合MyBatis框架</h4><p>目的：把<code>SqlMapConfig.xml</code>配置文件中的内容配置到<code>applicationContext.xml</code>配置文件中。由<code>Spring</code>为我们进行对象的管理。从上面的测试文件中，可以看出我们需要将工厂对象，<code>session</code>对象代理对象交由<code>Spring</code>容器进行管理。即：把<code>Mybatis</code>配置文件(<code>SqlMapConfig.xml</code>)中内容配置到<code>spring</code>配置文件中。</p><p>注意：</p><ul><li>当我们使用的是代理<code>dao</code>的模式，<code>dao</code>具体实现类由<code>Mybatis</code>使用代理方式创建，此时<code>Mybatis</code>配置文件不能删除。</li><li>整合<code>Spring</code>和<code>Mybatis</code>时，<code>Mybatis</code>创建的<code>Mapper.xml</code>文件名必须和<code>dao</code>接口文件名一致。</li></ul><ol><li>配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置C3P0的连接池对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- 配置SqlSession的工厂 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- 配置扫描dao的包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.itcast.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以删除<code>SqlSessionMap</code>配置文件。</p><ol start="2"><li>给<code>dao</code>接口加上注解<code>@Repository</code></li><li>在<code>service</code>中注入<code>dao</code>对象，进行测试。</li><li>配置<code>Spring</code>框架声明式事务管理</li></ol><ul><li><p>配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Spring的声明式事务管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置事务通知</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务的通知 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>AOP</code>增强</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lizhi.service.impl.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 建立通知和切入点表达式的关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="五、附常用配置文件"><a href="#五、附常用配置文件" class="headerlink" title="五、附常用配置文件"></a>五、附常用配置文件</h2><h3 id="5-1-web-xml配置文件"><a href="#5-1-web-xml配置文件" class="headerlink" title="5.1 web.xml配置文件"></a>5.1 <code>web.xml</code>配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置前端控制器：服务器启动必须加载，需要加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 服务器启动的时候，让DispatcherServlet对象创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置解决中文乱码的过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring的监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置加载类路径的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4、使用Rest风格的URI，将页面普通的post请求转为指定的delete或者put请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-pom-xml配置文件"><a href="#5-2-pom-xml配置文件" class="headerlink" title="5.2 pom.xml配置文件"></a>5.2 pom.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.lizhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringMVC_03<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringMVC_03 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springAOP  AOP核心功能，例如代理工厂等 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springIOC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring整合junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事务控制 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringJDBC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入pageHelper分页插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MBG --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--JSR303数据校验支持；tomcat7及以上的服务器，</span></span><br><span class="line"><span class="comment">tomcat7以下的服务器：el表达式。额外给服务器的lib包中替换新的标准的el</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对json处理的包，即能够使用@ResponseBody --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ssm_crud<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-SpringMVC配置文件"><a href="#5-3-SpringMVC配置文件" class="headerlink" title="5.3 SpringMVC配置文件"></a>5.3 SpringMVC配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC的配置文件，包含网站跳转逻辑的控制，配置  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lizhi"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只扫描控制器。  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器，方便页面返回  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--两个标准配置  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将springmvc不能处理的请求交给tomcat --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 能支持springmvc更高级的一些功能，JSR303校验，快捷的ajax...映射动态请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-Spring配置文件-–-applicationContext-xml"><a href="#5-4-Spring配置文件-–-applicationContext-xml" class="headerlink" title="5.4 Spring配置文件 – applicationContext.xml"></a>5.4 Spring配置文件 – applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解扫描，不扫描controller层，controller层交给SpringMVC进行管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lizhi"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring的配置文件，这里主要配置和业务逻辑有关的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--=================== 数据源，事务控制，xxx ================--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入数据源配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:dbconfig.properties"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pooledDataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--================== 配置和MyBatis的整合=============== --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定mybatis全局配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"pooledDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定mybatis，mapper文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描所有dao接口的实现，加入到ioc容器中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.lizhi.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个可以执行批量的sqlSession --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"executorType"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--=============================================  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ===============事务控制的配置 ================--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--控制住数据源  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"pooledDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lizhi.service..*(..))"</span> <span class="attr">id</span>=<span class="string">"txPoint"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务增强 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPoint"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务增强，事务如何切入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 所有方法都是事务方法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--以get开始的所有方法  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring配置文件的核心点（数据源、与mybatis的整合，事务控制） --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-5-Mybatis全局配置文件-–-mybatis-config-xml"><a href="#5-5-Mybatis全局配置文件-–-mybatis-config-xml" class="headerlink" title="5.5 Mybatis全局配置文件 – mybatis-config.xml"></a>5.5 Mybatis全局配置文件 – mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lizhi.bean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--分页参数合理化  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reasonable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-Mybatis逆向工程的配置文件-–-mbg-xml"><a href="#5-6-Mybatis逆向工程的配置文件-–-mbg-xml" class="headerlink" title="5.6 Mybatis逆向工程的配置文件 – mbg.xml"></a>5.6 Mybatis逆向工程的配置文件 – mbg.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://url:3306/ssm?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定javaBean生成的位置 targetPackage为包的路径，targetProject为项目路径，即两个能够连接在一起 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.lizhi.bean"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定sql映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span>  <span class="attr">targetProject</span>=<span class="string">"./src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定dao接口生成的位置，mapper接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"cn.lizhi.dao"</span>  <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- table指定每个表的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tbl_emp"</span> <span class="attr">domainObjectName</span>=<span class="string">"Employee"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tbl_dept"</span> <span class="attr">domainObjectName</span>=<span class="string">"Department"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-7-日志配置文件-–-log4j-properties"><a href="#5-7-日志配置文件-–-log4j-properties" class="headerlink" title="5.7 日志配置文件 – log4j.properties"></a>5.7 日志配置文件 – log4j.properties</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span></span><br><span class="line">log4j.rootCategory=info, CONSOLE, LOGFILE</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class="line">log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CONSOLE is <span class="built_in">set</span> to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> LOGFILE is <span class="built_in">set</span> to be a File appender using a PatternLayout.</span></span><br><span class="line">log4j.appender.LOGFILE=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.LOGFILE.File=axis.log</span><br><span class="line">log4j.appender.LOGFILE.Append=true</span><br><span class="line">log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br></pre></td></tr></table></figure><h3 id="5-8-数据库连接池-–-dbconfig-properties"><a href="#5-8-数据库连接池-–-dbconfig-properties" class="headerlink" title="5.8 数据库连接池 – dbconfig.properties"></a>5.8 数据库连接池 – dbconfig.properties</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.jdbcUrl=jdbc:mysql://url:3306/ssm?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">jdbc.user=username</span><br><span class="line">jdbc.password=password</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记(全)</title>
      <link href="/2020/09/22/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%85%A8)/"/>
      <url>/2020/09/22/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%85%A8)/</url>
      
        <content type="html"><![CDATA[<h2 id="0、基本介绍"><a href="#0、基本介绍" class="headerlink" title="0、基本介绍"></a>0、基本介绍</h2><p><code>Spring</code>是对业务层的操作,同时可以整合<code>Mybatis</code>框架和<code>Spring MVC</code>框架。下图是<code>MVC</code>结构：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/22/wXMKIS.png" alt=""></p><a id="more"></a><p><strong>耦合:</strong>简单理解为程序间的依赖关系</p><ul><li>类之间的依赖</li><li>方法间的依赖</li></ul><p><strong>解耦：</strong>降低程序间的依赖关系</p><p>实际开发中编译期不依赖，运行时才依赖。</p><p>解耦的思路：</p><p>第一步：使用反射来创建对象，而避免使用<code>new</code>关键字。</p><p>第二步：通过读取配置文件来获取要创建的对象全限定类名。</p><p>一个创建<code>Bean</code>对象的工厂。</p><p><code>Bean</code>:含有可重用组件的含义。</p><p><code>JavaBean</code>:用<code>Java</code>语言编写的可重用组件。</p><ul><li><code>JavaBean &gt; 实体类</code></li><li><code>JavaBean</code>就是创建<code>service</code>和<code>dao</code>对象的。</li></ul><p>第一个：需要一个配置文件来配置我们的<code>service</code>和<code>dao</code>配置的内容:唯一标识=全限定类名(<code>key=value</code>)</p><p>第二个：通过读取配置文件中配置的内容，反射创建对象。</p><p>配置文件可以是<code>xml</code>，也可以是<code>properties</code>。</p><p>使用步骤：</p><ol><li>创建<code>Properties</code>对象，读取配置文件。</li><li>通过类加载器读取流。</li></ol><p>以上两步通过<code>static</code>静态代码块加载。</p><p>加载文件代码块:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟工厂进行解耦，一个创建Bean对象的工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个Map,用于存放我们要创建的对象。我们把它称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">            <span class="comment">//实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">            <span class="comment">//取出配置文件中所有的Key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">//遍历枚举 -- 用来获取全限定类名的唯一标识符(key)</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">                <span class="comment">//取出每个Key</span></span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">//根据key获取value -- 全限定类名</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">//反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">//把key和value存入容器中</span></span><br><span class="line">                beans.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据bean的名称获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private static Properties pro; //</span></span><br><span class="line"><span class="comment">//    private static Map&lt;String, Object&gt; beans;// 定义一个map，用于存放我们要创建的对象，将之称之为容器。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    static &#123;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            pro = new Properties();</span></span><br><span class="line"><span class="comment">//            InputStream is = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties"); // 配置文件加载进内存</span></span><br><span class="line"><span class="comment">//            pro.load(is);</span></span><br><span class="line"><span class="comment">//            beans = new HashMap&lt;String, Object&gt;();</span></span><br><span class="line"><span class="comment">//            // 取出配置文件中的所有的key</span></span><br><span class="line"><span class="comment">//            Enumeration keys = pro.keys();</span></span><br><span class="line"><span class="comment">//            // 将全限定类名和反射创建的对象组成key-value，存放到集合中，这样我们对同一个类对象，就是只是从bean的集合中获取，始终获取的都是同一个对象。</span></span><br><span class="line"><span class="comment">//            while (keys.hasMoreElements()) &#123;</span></span><br><span class="line"><span class="comment">//                String key = keys.nextElement().toString();</span></span><br><span class="line"><span class="comment">//                String beanPath = pro.getProperty(key);</span></span><br><span class="line"><span class="comment">//                Object value = Class.forName(beanPath).newInstance();</span></span><br><span class="line"><span class="comment">//                beans.put(key, value);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (IllegalAccessException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (InstantiationException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125; catch (ClassNotFoundException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    /**</span></span><br><span class="line"><span class="comment">//     * 根据bean的名称获取对象</span></span><br><span class="line"><span class="comment">//     *</span></span><br><span class="line"><span class="comment">//     * @param beanName</span></span><br><span class="line"><span class="comment">//     * @return</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    public static Object getBean(String beanName) &#123;</span></span><br><span class="line"><span class="comment">//        Object bean = null; // 创建一个对象引用</span></span><br><span class="line"><span class="comment">//        bean = beans.get(beanName);</span></span><br><span class="line"><span class="comment">//        return bean;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单例对象：从始至终只有一个对象。</p><ul><li>只被创建一次，从而类中的成员也就只会初始化一次。</li></ul><p>多例对象：对象被创建多次，执行效率没有单例对象高。</p><p>目的：我们需要创建单例对象，只会初始化一次。</p><p>在创建工厂时，我们创建一个容器，将配置文件中的所有对象都提前创建好，存入到容器中，这样我们每次获取对象时，都是从这个容器中获取对象，保证我们始终获取的都是同一个对象。这里的容器就可以是<code>Map</code>集合。</p><ol><li>在<code>BeanFactory</code>中，以容器装载对象。 – 当获取对象时，是从容器中获取对象</li><li>获取对象，使用工厂获取对象，避免了<code>new</code>关键字创建出的对象，并由于工厂中，对象存储在容器中，保证了这里的对象的单例的。</li></ol><p>为了降低<code>Java</code>开发的复杂性，<code>Spring</code>采取了以下4种关键策略：</p><ul><li>基于<code>POJO</code>的轻量级和最小侵入性编程</li><li>通过依赖注入和面向接口实现松耦合</li><li>基于切面和惯例进行声明式编程</li><li>通过切面和模板减少样板式代码</li></ul><p><code>Spring</code>与很多框架不同的一个关键点在于：很多框继承通过强迫应用继承它们的类或实现它们的接口从而导致应用与框架绑死。而<code>Spring</code>不会强迫你实现<code>Spring</code>规范的接口或接口或继承<code>Spring</code>规范的类。</p><h2 id="一、IOC-–-控制反转"><a href="#一、IOC-–-控制反转" class="headerlink" title="一、IOC – 控制反转"></a>一、IOC – 控制反转</h2><p>将<code>new</code>的自主控制权交给了工厂。工厂再通过全限定类名决定得到获取到的对象。此时类无法再确定所获得到对象是否是自己所需要的(降低了耦合)。</p><p>使用步骤一:</p><ol><li><p>创建配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将对象的创建交给spring来管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.lihzi.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"cn.lihzi.dao.impl.AccountDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>获取容器 – <code>spring</code>的核心容器，并根据<code>id</code>获取对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取spring的IOC核心容器，并根据id获取对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取核心容器对象</span></span><br><span class="line">        ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">// 2. 根据id获取Bean对象</span></span><br><span class="line">        AccountService service = (AccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        AccountDao dao = ac.getBean(<span class="string">"accountDao"</span>, AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(service);</span><br><span class="line">        System.out.println(dao);</span><br><span class="line"><span class="comment">//        service.save();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-1-ApplicationContext的三个常用实现类"><a href="#1-1-ApplicationContext的三个常用实现类" class="headerlink" title="1.1  ApplicationContext的三个常用实现类:"></a>1.1  ApplicationContext的三个常用实现类:</h3><ol><li><p><code>ClassPathXmlApplicationContext</code></p><p>它可以加载类路径下的配置文件，要求配置文件必须在类路径下。不在的话，加载不了。</p></li><li><p><code>FileSystemXmlApplicationContext</code></p><p>它可以加载磁盘任意路径下的配置文件(必须有访问权限)</p></li><li><p><code>AnnotationConfigApplicationContext</code></p><p>它用于读取注解创建的容器</p></li></ol><h3 id="1-2-核心容器的两个接口引发出的问题"><a href="#1-2-核心容器的两个接口引发出的问题" class="headerlink" title="1.2 核心容器的两个接口引发出的问题"></a>1.2 核心容器的两个接口引发出的问题</h3><ol><li><p><code>ApplicationContext</code></p><p>它在构建核心容器时，创建对象采取的策略是采用立即加载的方法。也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。</p><p>试用情况:单例对象适用，更多采用此接口</p></li><li><p><code>BeanFactory</code></p><p>它在构建核心容器时，创建对象采取的策略是采用延迟加载的方式。也就是说，什么时候根据<code>id</code>获取对象，什么时候才是真正的创建对象。</p><p>试用情况:多例对象适用。</p></li></ol><h3 id="1-3-Bean对象的细节"><a href="#1-3-Bean对象的细节" class="headerlink" title="1.3 Bean对象的细节"></a>1.3 Bean对象的细节</h3><ol><li>创建<code>Bean</code>的三种方式:</li></ol><ul><li>第一种方式</li></ul><p>使用默认构造函数创建。<br>在<code>spring</code>的配置文件中使用bean标签，配以<code>id</code>和<code>class</code>属性之后，且没有其他属性和标签时。<br>采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.lihzi.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"cn.lihzi.dao.impl.AccountDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第二种方式</li></ul><p>使用工厂中的普通方法创建对象(使用某个类中的方法创建对象，并存入spring容器)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"cn.lihzi.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>factory-bean</code>找到<code>id</code>得到其对象，再通过<code>factory-method</code>得到其方法对象。而其中的<code>id=&quot;accountService&quot;</code>是对应到容器中的<code>key</code>。</p><ul><li>第三种方式</li></ul><p>使用工厂中的静态方法创建对象(使用某个类中的静态方法创建对象，并存入spring容器)。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.lihzi.factory.StaticInstanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>其中，第二种、第三种方式可以用来获取到<code>jar</code>包中的方法对象。</p><ol start="2"><li><code>Bean</code>的作用范围</li></ol><p>默认的作用范围是<strong>单例</strong>。</p><p><code>bean</code>标签的<code>scope</code>属性：</p><p>作用：用于指定<code>bean</code>的作用范围</p><p>取值：常用的就是单例的和多例的</p><ul><li><code>singleto</code>：单例的(默认值)</li><li><code>prototype</code>：多例的</li><li><code>request</code>：作用于<code>web</code>应用的请求范围</li><li><code>session</code>：作用于<code>web</code>应用的会话范围</li><li><code>global-session</code>：作用于集群环境的会话范围(全局会话范围)，当不会集群环境时，它就是<code>session</code></li></ul><ol start="3"><li><code>bean</code>对象的生命周期</li></ol><ul><li><p>单例对象</p><p>出生：当容器创建时对象出生</p><p>活着：只要容器还在，对象一直活着</p><p>死亡：容器销毁，对象消亡</p><p>总结：单例对象的生命周期和容器相同</p></li><li><p>多例对象</p><p>出生：当我们使用对象时<code>spring</code>框架为我们创建</p><p>活着：对象只要是在使用过程中就一直活着</p><p>死亡：当对象长时间不用，且没有别的对象引用时，由<code>Java</code>的垃圾回收器回收</p></li></ul><p><code>bean</code>配置文件中分别是，<code>init-method</code>；<code>destory-method</code>指定初始化和销毁时使用的对象方法。</p><blockquote><p>注：创建应用组件之间协作的行为通常称为装配(wiring)。Spring有多种装配bean的方式，采用<code>XML</code>是很常见的一种装配方式。</p></blockquote><p><code>Spring</code>通过应用上下文(Application Context)装载<code>Bean</code>的定义并把它们组装起来。<code>Spring</code>应用上下文全权负责对象的创建和组装。<code>Spring</code>自带了多种应用上下文的实现，它们之间主要的区别仅仅在于如何加载配置。</p><h3 id="1-4-Spring的依赖注入"><a href="#1-4-Spring的依赖注入" class="headerlink" title="1.4 Spring的依赖注入"></a>1.4 Spring的依赖注入</h3><p>依赖注入： <code>Dependency Injection</code>。<strong>依赖注入会将所依赖的关系自动交给目标对象，而不是让对象自己去获取依赖。</strong>通过<code>DI</code>,对象的依赖关系将由系统中负责协调各对象的第三方组件(就是容器)在创建对象的时候进行设定，对象无需自行创建或管理它们的依赖关系，依赖关系将被自动注入到需要它们的对象当中去。</p><p>在进行测试时，可以使用<code>Mock</code>测试。所谓的Mock测试就是指在测试过程中，模拟出那些不容易获取或者不容易构造出来的对象，比如HttpServletRequest对象需要在Servlet容器中构造出来。</p><p>使用<code>mock</code>框架Mockito去创建一个<code>Quest</code>接口的<code>mock</code>实现，通过该<code>mock</code>就可以创建新的所属实例，并通过构造器注入这个<code>mock</code>创建出的实例对象。（即通过构造器注入，来达到松耦合）</p><p><code>IOC</code>作用:降低程序间的耦合(依赖关系)</p><p>依赖关系的管理</p><ul><li>交给<code>spring</code>来维护</li></ul><p>在当前类需要用到其他类的对象，由<code>spring</code>为我们提供，我们只需要在配置文件中说明</p><p>依赖关系的维护就称之为依赖注入。</p><p>依赖注入：</p><ul><li>能注入的数据：三类<ul><li>基本数据类型和<code>String</code></li><li>其他<code>bean</code>类型(在配置文件中或者注解配置过的<code>bean</code>)</li><li>复杂类型/集合类型</li></ul></li><li>注入的方式：三种<ul><li>使用构造函数提供</li><li>使用<code>set</code>方法提供</li><li>使用注解提供</li></ul></li></ul><h4 id="1-4-1-构造函数注入（构造器注入）"><a href="#1-4-1-构造函数注入（构造器注入）" class="headerlink" title="1.4.1 构造函数注入（构造器注入）"></a>1.4.1 构造函数注入（构造器注入）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 构造函数注入：</span></span><br><span class="line"><span class="comment">    使用的标签:constructor-arg</span></span><br><span class="line"><span class="comment">    标签出现的位置：bean标签的内部</span></span><br><span class="line"><span class="comment">    标签中的属性</span></span><br><span class="line"><span class="comment">        type:用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型(当构造函数中同时含有多个相同的数据类型时，就无法分别)</span></span><br><span class="line"><span class="comment">        index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始</span></span><br><span class="line"><span class="comment">        name:用于指定给构造函数中指定名称的参数赋值。(最常用，也是最直接的方式)</span></span><br><span class="line"><span class="comment">        =============以上三个用于指定给构造函数中哪个参数赋值================</span></span><br><span class="line"><span class="comment">        value:用于提供基本类型和String类型的数据</span></span><br><span class="line"><span class="comment">        ref:用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象。</span></span><br><span class="line"><span class="comment">    特点：</span></span><br><span class="line"><span class="comment">        在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。</span></span><br><span class="line"><span class="comment">    缺点：</span></span><br><span class="line"><span class="comment">        改变了bean对象的实例化方法，使我们在创建对象时，如果用不到这些数据，也必须提供。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>类的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name, Integer age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service方法执行.."</span>+name+<span class="string">":"</span>+age+<span class="string">":"</span>+birthday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.lihzi.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以下是配置一个日期对象 反射方式创建Date的对象，再由id指定赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-2-set方法注入-–-适用于存在空参的构造方法-更常用的set方法注入"><a href="#1-4-2-set方法注入-–-适用于存在空参的构造方法-更常用的set方法注入" class="headerlink" title="1.4.2 set方法注入 – 适用于存在空参的构造方法(更常用的set方法注入)"></a>1.4.2 set方法注入 – 适用于存在空参的构造方法(更常用的set方法注入)</h4><p>涉及的标签：<code>property</code></p><p>出现的位置：<code>bean</code>标签的内部</p><p>标签的属性</p><ul><li><code>name</code>：用于指定注入时所调用的<code>set</code>方法名称</li><li><code>value</code>：用于提供基本类型和<code>String</code>类型的数据</li><li><code>ref</code>：用于指定其他的<code>bean</code>类型数据。它指的就是在<code>spring</code>的<code>Ioc</code>核心容器中出现的<code>bean</code>对象。</li></ul><p>优势:</p><ul><li>创建对象时没有明确的限制，可以直接使用默认构造函数</li></ul><p>弊端：</p><ul><li>如果有某个成员必须有值，则获取对象是有可能<code>set</code>方法没有执行。</li></ul><p>配置文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- set --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService1"</span> <span class="attr">class</span>=<span class="string">"cn.lihzi.service.impl.AccountServiceImpl1"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--       &lt;property name="birthday" ref="now"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-3-复杂类型的注入-集合类型的注入"><a href="#1-4-3-复杂类型的注入-集合类型的注入" class="headerlink" title="1.4.3 复杂类型的注入/集合类型的注入"></a>1.4.3 复杂类型的注入/集合类型的注入</h4><p>用于给<code>List</code>结构集合注入的标签：<code>list</code>、<code>array</code>、<code>set</code></p><p>用于给<code>Map</code>结构集合注入的标签：<code>map</code>、<code>props</code></p><p>结构相同，标签可以互换。</p><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl2</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">    <span class="keyword">private</span> String[] str;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">省略了getter和setter方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"str:"</span>+Arrays.toString(str));</span><br><span class="line">        System.out.println(<span class="string">"map:"</span>+map);</span><br><span class="line">        System.out.println(<span class="string">"list:"</span>+list);</span><br><span class="line">        System.out.println(<span class="string">"set:"</span>+set);</span><br><span class="line">        System.out.println(<span class="string">"properties:"</span>+properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Bean</code>配置文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 复杂对象的封装使用 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService2"</span> <span class="attr">class</span>=<span class="string">"cn.lihzi.service.impl.AccountServiceImpl2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>b<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>b<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>b<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;map&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;entry key="name"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;value&gt;Tom&lt;/value&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;/entry&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;entry key="age" value="18"&gt;&lt;/entry&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/map&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"name"</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"age"</span>&gt;</span>18<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、基于注解的方式-–-IOC"><a href="#二、基于注解的方式-–-IOC" class="headerlink" title="二、基于注解的方式 – IOC"></a>二、基于注解的方式 – IOC</h2><p><code>xml</code>起始的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.lihzi.service.impl.AccountServiceImpl"</span> <span class="attr">scope</span>=<span class="string">""</span> <span class="attr">init-method</span>=<span class="string">""</span> <span class="attr">destory-method</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">ref</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解类别：</p><ol><li><p>用于创建对象的(创建的对象存放至<code>Spring</code>容器中)</p><ul><li><p>其作用就和在<code>XML</code>配置文件中编写一个<code>&lt;bean&gt;</code>标签实现的功能是一样的</p></li><li><p><code>@Component</code></p></li></ul></li><li><p>作用：用于把当前类对象写入<code>spring</code>容器中。</p></li><li><p>属性：</p><pre><code>- `value`：用于指定`bean`的`id`。当我们不写时，它的默认值是当前类名，且首字母小写。</code></pre></li></ol><ul><li><p><code>@Controller</code>：一般用于表现层</p></li><li><p><code>@Service</code>：一般用在业务层</p></li><li><p><code>@Respository</code>：一般用于持久层</p></li></ul><p>以上三个注解他们的作用和属性与<code>Component</code>是一模一样的。</p><p>他们三个是<code>Spring</code>框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰。</p><ol start="2"><li><p>用于注入数据的(注入的对象是从<code>Spring</code>容器中获取)</p><ul><li>其作用就和在<code>xml</code>配置文件中的<code>bean</code>标签中写一个<code>&lt;property&gt;</code>标签的作用是一样的</li><li><code>@Autowired</code><ul><li>作用：自动按照类型注入。只要容器中有唯一的一个<code>bean</code>对象类型和要注入的变量类型匹配，就可以注入成功。</li><li>出现位置：可以是变量上，也可以是方法上。</li><li>细节：在使用注解注入时，<code>set</code>方法就不是必须的了。</li><li>如果<code>IOC</code>容器中有多个类型匹配时:先找到同类别的，再根据变量名称进行注入。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/22/wXMQPg.md.png" alt="自动注入流程"></p><p>通过在<code>Spring</code>容器中符合数据类型的<code>value</code>，并将<code>value</code>值赋给该引用，当出现同类型的引用时，再根据变量名称进行赋值。</p><ul><li><code>@Qualifier</code><ul><li>作用：在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用。但是在给方法参数注入时可以。（要和<code>@Autowired</code>配合使用）</li><li>属性<ul><li><code>value</code>：用于指定注入<code>bean</code>的<code>id</code>。</li></ul></li></ul></li><li><code>@Resource</code><ul><li>作用：直接按照<code>bean</code>的<code>id</code>注入。它可以独立使用。</li><li>属性<ul><li><code>name</code>：用于指定<code>bean</code>的<code>id</code>。</li></ul></li></ul></li></ul><p>以上三个注入都只能注入其他<code>bean</code>类型的数据，而基本类型和<code>String</code>类型无法使用上述注解实现。</p><p>另外集合只能通过<code>xml</code>来实现。</p><ul><li><code>@Value</code><ul><li>作用:用于注入基本类型和<code>String</code>类型的数据。</li><li>属性:<ul><li><code>value</code>：用于指定数据的值。它可以使用<code>spring</code>中<code>SpEL</code>(也就是<code>spring</code>的<code>el</code>表达式)</li><li><code>SpEL</code>的写法：<code>${表达式}</code>。注意：其表达式写在哪里(<code>JSP</code>、<code>Mybatis</code>、<code>Spring</code>…)，就是从哪里获值。</li></ul></li></ul></li></ul></li><li><p>用于改变作用范围的</p><ul><li>其作用就和在<code>bean</code>标签中使用<code>scope</code>属性实现的功能是一样的</li><li><code>@Scope</code><ul><li>作用:用于指定<code>bean</code>的作用范围</li><li>属性:<ul><li><code>value</code>：指定范围的取值。常用取值：<code>singleton</code>、<code>prototype</code>(默认为<code>singleton</code>)</li></ul></li></ul></li></ul></li><li><p>生命周期相关</p><ul><li>其作用就和在<code>bean</code>标签中使用<code>init-method</code>和<code>destory-method</code>的作用是一样的。</li><li><code>@PreDestroy</code><ul><li>作用：用于指定销毁方法</li></ul></li><li><code>@PostConstruct</code><ul><li>作用：用于指定初始化方法</li></ul></li></ul></li></ol><p><strong>注意：</strong>需要告知<code>spring</code>在创建容器时要扫描的包、配置所需要的标签不是在<code>bean</code>的约束中，而是一个名称为<code>context</code>名称空间和约束中。其配置文件形式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lihzi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span> <span class="comment">&lt;!-- 扫描这个包下的所有包及其子包 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-实例：简单的数据库增删改查"><a href="#2-1-实例：简单的数据库增删改查" class="headerlink" title="2.1 实例：简单的数据库增删改查"></a>2.1 实例：简单的数据库增删改查</h3><ol><li><code>XML</code>方式</li></ol><p><code>service</code>层中，提供<code>setter</code>方法，共<code>xml</code>配置使用。</p><p>配置:</p><ul><li>业务层对象</li><li>持久层对象</li><li><code>JDBC</code>对象</li><li>数据库连接池</li></ul><p>注意数据源的单例、多例造成的线程混乱问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建service对象，并将service对象中的变量注入数据dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建dao对象，并给变量注入数据,runner --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入runner --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"runner"</span> <span class="attr">ref</span>=<span class="string">"queryRunner"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建QueryRunner对象 并采用构造方法的方式，注入数据源(这里采用的是有参构造方法，其参数就是dataSource数据源，故进而再创建dataSource对象) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- QueryRunner对象，是单例对象。为了让多个dao在调用这个对象时，互不干扰，故采取多例的方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源，方便sql语句的复用，不用每次都传入数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源dataSource，给dataSource对象的变量注入数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://url:3306/draft"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取对象</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    <span class="comment">// 2. 得到业务层对象</span></span><br><span class="line">    <span class="keyword">private</span> AccountService service = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = service.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Account account = service.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"Tom"</span>);</span><br><span class="line">        account.setMoney(<span class="number">800.8f</span>);</span><br><span class="line">        service.insert(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>基于注解的<code>IOC</code>配置</li></ol><p><strong>注意一点</strong>：当用注解方式对变量进行注入时，<code>setter</code>方法就不是必要的了。</p><p><code>xml</code>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lizhi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span> <span class="comment">&lt;!-- 扫描这个包下的所有包及其子包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- service和dao的对象通过注解的方法创建以及注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://url/draft"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-使用注解不带有xml配置文件的使用-纯注解"><a href="#2-2-使用注解不带有xml配置文件的使用-纯注解" class="headerlink" title="2.2 使用注解不带有xml配置文件的使用(纯注解)"></a>2.2 使用注解不带有<code>xml</code>配置文件的使用(纯注解)</h3><ol><li><p>创建配置类 — <code>config</code></p><p>例如：<code>SpringConfiguration</code>：其作用同<code>bean.xml</code>相同</p><p><code>spring</code>中的新注解：</p><ol><li><p><code>@Configuration</code></p><ul><li>作用:指定当前类是一个配置类</li></ul></li></ol><ul><li>细节:当配置类作为<code>AnnotationConfigApplicationContext</code>对象创建的参数时，该注解可以不写。(原因是参数传递的是配置的<code>Class</code>对象，就能够读取到这个类)</li></ul></li><li><p><code>@ComponentScan</code></p><ul><li><p>作用:用于通过注解指定<code>spring</code>在创建容器时要扫描的包</p></li><li><p>属性：</p><ul><li><p><code>value</code>：它和<code>basePackages</code>的作用是一样的，都是用于指定创建容器时要扫描的包。我们使用此注解就等同于在<code>xml</code>中配置了：</p><p><code>&lt;context:component-scan base-package=&quot;cn.lizhi&quot;&gt;&lt;/context:component-scan&gt;</code></p></li></ul></li></ul></li><li><p><code>@Bean</code></p><ul><li><p>作用：用于把当前方法的<strong>返回值</strong>作为<code>bean</code>对象存入<code>spring</code>的<code>ioc</code>容器中</p><ul><li><p>属性：</p><ul><li><code>name</code>：用于指定<code>bean</code>的<code>id</code>。当不写时，默认值是当前方法的名称</li></ul></li><li><p>细节：</p><p>当我们使用注解配置方法时，如果方法需要传递参数，<code>Spring</code>框架会去容器中查找有没有可用的对应类型的<code>bean</code>对象。查找的方式和<code>Autowired</code>注解的作用是一样的。</p></li></ul></li></ul></li><li><p><code>@Import</code></p><ul><li>作用:用于导入其他的配置类</li><li>属性<ul><li><code>value</code>:用于指定其他配置类的字节码。当我们使用<code>import</code>的注解之后，有<code>Import</code>注解的类就是父配置类，而导入的都是子配置类。</li></ul></li></ul></li></ol><p>在主配置类下配置<code>@import</code>，<code>@import</code>中的参数为<code>value</code>数组，内容填写子配置类。这样也可以不用在子配置类下配置<code>@Configuration</code>注解。</p><ol start="5"><li><p><code>@PropertySource</code></p><ul><li>作用：用于指定<code>properties</code>文件的位置。</li><li>属性：<ul><li><code>value</code>：指定文件的名称和路径。</li><li>关键字：<code>classpath</code>，表示类路径下。<ul><li>例如:<code>@PropertySource(classpath:jdbcConfig.properties)</code></li></ul></li></ul></li></ul><p>注解位置在主配置文件下。</p><p><code>xml</code>和注解配置选择问题:自己写的类，选择采用<code>注解</code>的方式；存在于<code>jar</code>包中的选择用<code>xml</code>方式，两者可以配合着使用。</p><p>注解类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.lizhi"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Bean</span>(<span class="string">"runner"</span>) <span class="comment">// 用于将返回值存入容器中 -- 其中id设置为runner</span></span><br><span class="line">     <span class="meta">@Scope</span>(<span class="string">"prototype"</span>) <span class="comment">// 将数据源设置成多例</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">getRunner</span><span class="params">(DataSource dataSource)</span> </span>&#123; <span class="comment">// 获取QueryRunner对象 -- 参数为dataSource,故进一步再得到dataSource对象，见下方</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>) -- 容器中id为dataSource</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cpds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            cpds.setJdbcUrl(<span class="string">"jdbc:mysql://url:3306/draft"</span>);</span><br><span class="line">            cpds.setUser(<span class="string">"username"</span>);</span><br><span class="line">            cpds.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cpds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取对象</span></span><br><span class="line"><span class="comment">//    private ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 2. 得到业务层对象</span></span><br><span class="line">    <span class="keyword">private</span> AccountService service = ac.getBean(<span class="string">"accountService"</span>, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = service.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Account account = service.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"Tom"</span>);</span><br><span class="line">        account.setMoney(<span class="number">800.8f</span>);</span><br><span class="line">        service.insert(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Account account = service.findById(<span class="number">4</span>);</span><br><span class="line">        account.setMoney(<span class="number">1000.0f</span>);</span><br><span class="line">        service.update(account,account.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.delete(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>此时接口的实现方法使用的是<code>AnnotationConfigApplicationContext</code>。</p></li><li><p>抽取子配置类</p><ol><li><p><code>JdbcConfig</code> - 子配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.user&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"runner"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>) <span class="comment">// 将数据源设置成多例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">getRunner</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cpds.setDriverClass(driver);</span><br><span class="line">            cpds.setJdbcUrl(url);</span><br><span class="line">            cpds.setUser(user);</span><br><span class="line">            cpds.setPassword(password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cpds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>SpringConfiguration</code> - 父配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(JdbcConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ComponentScan("cn.lizhi")</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbcConfig.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>jdbcConfig.properties</code> - 配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://url:3306/draft</span></span><br><span class="line"><span class="meta">jdbc.user</span>=<span class="string">username</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="2-3-spring整合junit问题"><a href="#2-3-spring整合junit问题" class="headerlink" title="2.3 spring整合junit问题"></a>2.3 spring整合junit问题</h3><p>整合原因：</p><blockquote><ol><li>应用程序的入口 – main 方法</li><li><code>junit</code>单元测试中，没有<code>main</code>方法也能执行<ul><li><code>junit</code>集成了一个<code>main</code>方法</li><li>该方法就会判断当前测试类中哪些方法有<code>@Test</code>注解</li><li><code>junit</code>就让有<code>Test</code>注解的方法执行</li></ul></li><li><code>junit</code>中无法探测出是否存在<code>spring</code>框架<ul><li>在执行测试方法时，<code>junit</code>无法得知我们是否使用了<code>spring</code>框架</li><li>因此也就不会为我们读取配置文件/配置类创建<code>spring</code>核心容器</li></ul></li></ol><p>综上：在执行测试方式时，没有<code>IOC</code>容器，就算谢了<code>Autowired</code>注解，也无法实现注入</p></blockquote><p><code>Spring</code>整合<code>junit</code>的配置</p><ol><li><p>导入<code>spring</code>整合<code>junit</code>的<code>jar</code>(坐标)</p></li><li><p>使用<code>junit</code>提供的一个注解把原有的<code>main</code>方法替换了，替换成<code>spring</code>提供的 <code>@RunWith</code>注解配置–<code>SpringJUnit4ClassRunner.class</code></p></li><li><p>告知<code>spring</code>的运行器，<code>spring</code>和<code>ioc</code>创建是基于<code>xml</code>还是基于<code>注解</code>的，并且说明位置。</p><ul><li><p><code>@ContextConfiguration</code></p><ul><li><p><code>locations</code>:指定<code>xml</code>文件的位置，加上<code>classpath</code>关键字，表示在类路径下。</p></li><li><p><code>classes</code>:指定注解所在地位置。å例如：<code>@ContextConfiguration(classes=SpringConfiguration.class)</code></p></li></ul><p>当我们使用<code>spring 5.x</code>版本的时候，要求<code>junit</code>的<code>jar</code>包必须是<code>4.12</code>以上。</p></li></ul></li></ol><h2 id="三、AOP-–-导读"><a href="#三、AOP-–-导读" class="headerlink" title="三、AOP – 导读"></a>三、AOP – 导读</h2><p><code>AOP</code>允许将遍布应用各处的功能分离出来形成可重用的组件。即通过AOP，<strong>可以使用各种功能层去包裹核心业务层</strong>。这些层以声明的方式灵活地应用到系统中，核心应用甚至根本不知道它们的存在，即将安全、事务和日志关注点与核心业务逻辑相分离。</p><h3 id="3-1-案例-transfer-银行转账案例"><a href="#3-1-案例-transfer-银行转账案例" class="headerlink" title="3.1 案例-transfer(银行转账案例)"></a>3.1 案例-transfer(银行转账案例)</h3><p>在<code>service</code>接口中定义转账方法(其参数列表为转出用户,转入用户,转账金额)，<code>dao</code>接口中定义根据用户名称查找用户的方法。</p><p>当在数据库数据进行更新时(转账过程中)，如果出现异常，可能就会出现破坏数据库的一致性操作。故下面要进行对事物的控制。</p><p>事务控制在<code>service</code>层。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/22/wXMnVf.png" alt="事务控制"></p><p>以上的问题引发了一个思考，就是获取的<code>connection</code>应该全部由同一个<code>connection</code>进行控制，要成功就一起成功，如果失败就一起失败。</p><p><strong>解决办法:</strong>需要使用<code>ThreadLocal</code>对象把<code>Connection</code>与当前线程绑定，从而使一个线程中只有一个能控制事务的对象。</p><p><strong>事务控制应该都是在业务层。</strong></p><p>注意：在<code>web</code>工程中，当<code>tomcat</code>服务器启动时，会初始化线程池，当我们对<code>tomcat</code>服务器进行访问时，便会从线程池中获取线程，同时当使用数据库连接池时，在获取连接以后，当我们对线程访问完毕以后，需要对线程进行归还，此时归还到线程池中的线程还在绑定着数据库的连接，所以在归还连接(线程)前(无论是线程或数据库连接),都需要将线程与数据库连接进行解绑，否则当我们再获取这个线程时，因为它绑定着数据库连接池中的那个连接，再使用时是无法使用的，因为这个数据连接已经被<code>close</code>(归还)了，需要我们重新获取连接并进行绑定。</p><p>通过创建<code>service</code>的代理对象的工厂解决事务上方法的耦合问题。即对<code>service</code>类中的方法进行增强(增强的内容就是加入事务的控制)。</p><p>事务解决的整个思路：</p><ol><li><p>创建<code>ConnectionUtils</code>工具类，通过<code>ThreadLocal</code>绑定数据库连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程绑定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;(); <span class="comment">// 绑定的对象 -- Connection</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource; <span class="comment">// 获取数据源</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getThreadConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = tl.get();</span><br><span class="line">        <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123; <span class="comment">// 如果TreadLocal未绑定有连接，则从连接池中获取连接，并对其进行绑定</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn = dataSource.getConnection();</span><br><span class="line">                tl.set(conn);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对其进行解绑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = tl.get();</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tl.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建事务管理类，用于在业务层对<code>SQL</code>进行事务管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对事物进行管理的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnectionUtils</span><span class="params">(ConnectionUtils connectionUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connectionUtils = connectionUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().setAutoCommit(<span class="keyword">false</span>); <span class="comment">// 关闭自动提交 -- 即使用此方法为开启事务(关闭了自动提交事务)</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().close();</span><br><span class="line">            connectionUtils.remove(); <span class="comment">// 释放连接时，将线程与数据库连接池中的连接进行解绑</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>dao</code>层代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过spring配置获取QueryRunner对象</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line">    <span class="comment">// 通过spring配置获取连接</span></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnectionUtils</span><span class="params">(ConnectionUtils connectionUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connectionUtils = connectionUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunner</span><span class="params">(QueryRunner runner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runner = runner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account, Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(connectionUtils.getThreadConnection(), <span class="string">"update account set name=?,money=? where id=?"</span>, account.getName(), account.getMoney(), id);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Account&gt; accounts = runner.query( <span class="string">"select * from account where name=?"</span>, <span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">name</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (accounts == <span class="keyword">null</span> || accounts.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"该用户不存在"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (accounts.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户存在异常，存在两个异常"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                account = accounts.get(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>connectionUtils.getThreadConnection()</code>用于获取连接。</p></li><li><p>创建工厂类-用于创建<code>service</code>的代理对象的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TransactionManager tsManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setTsManager</span><span class="params">(TransactionManager tsManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tsManager = tsManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountService</span><span class="params">(AccountService accountService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountService = accountService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取代理对象，对方法进行增强</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  AccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AccountService proxy_accountService = (AccountService) Proxy.newProxyInstance(accountService.getClass().getClassLoader(), accountService.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 增强对事务的控制</span></span><br><span class="line"><span class="comment">            **/</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object obj = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 1. 开启事务</span></span><br><span class="line">                    tsManager.beginTransaction();</span><br><span class="line">                    <span class="comment">// 2. 执行语句</span></span><br><span class="line">                    obj = method.invoke(accountService, args);</span><br><span class="line">                    <span class="comment">// 3. 提交事务</span></span><br><span class="line">                    tsManager.commit();</span><br><span class="line">                    <span class="keyword">return</span> obj;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// 4. 回滚事务</span></span><br><span class="line">                    tsManager.rollback();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 5. 关闭连接</span></span><br><span class="line">                    tsManager.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxy_accountService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里被代理的对象为<code>accountService</code>，当我们使用它的方法时，我们其实是在使用其代理对象(通过<code>BeanFactory</code>中<code>getAccountService</code>方法创建出的对象)中增强后的方法。其中，创建工厂中普通方法的配置方法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建工厂类对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanFactory"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.factory.BeanFactory"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 被代理对象 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountService"</span> <span class="attr">ref</span>=<span class="string">"accountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入事务管理器 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tsManager"</span> <span class="attr">ref</span>=<span class="string">"transaction"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 创建工厂类方法对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyAccountService"</span> <span class="attr">factory-bean</span>=<span class="string">"beanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如被代理对象(<code>AccountService</code>)中的一处方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String startName, String endName, Float money)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    Account startAccount = dao.findByName(startName); <span class="comment">// 出款人账号 -- 会获取连接</span></span><br><span class="line">    Account endAccount = dao.findByName(endName); <span class="comment">// 收款人账号 -- 会获取连接</span></span><br><span class="line">    Float startMoney = startAccount.getMoney();</span><br><span class="line">    startAccount.setMoney(startMoney - money);</span><br><span class="line">    Float endMoney = endAccount.getMoney();</span><br><span class="line">    endAccount.setMoney(endMoney + money);</span><br><span class="line">    dao.update(startAccount, startAccount.getId()); <span class="comment">// 会获取连接</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line">    dao.update(endAccount, endAccount.getId()); <span class="comment">// 会获取连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即通过代理对象增强后，对其方法进行了事务管理，即对以下方法的执行，在其上下添加事务的管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = method.invoke(accountService, args);</span><br></pre></td></tr></table></figure><p>增强的方法等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String startName, String endName, Float money)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 开启事务</span></span><br><span class="line">        tsManager.beginTransaction();</span><br><span class="line">        <span class="comment">// 2. 执行操作</span></span><br><span class="line">        Account startAccount = dao.findByName(startName); <span class="comment">// 出款人账号 -- 会获取连接</span></span><br><span class="line">        Account endAccount = dao.findByName(endName); <span class="comment">// 收款人账号 -- 会获取连接</span></span><br><span class="line">        Float startMoney = startAccount.getMoney();</span><br><span class="line">        startAccount.setMoney(startMoney - money);</span><br><span class="line">        Float endMoney = endAccount.getMoney();</span><br><span class="line">        endAccount.setMoney(endMoney + money);</span><br><span class="line">        dao.update(startAccount, startAccount.getId()); <span class="comment">// 会获取连接</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line">        dao.update(endAccount, endAccount.getId()); <span class="comment">// 会获取连接</span></span><br><span class="line">        <span class="comment">// 3. 提交事务</span></span><br><span class="line">        tsManager.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 4. 回滚事务</span></span><br><span class="line">        tsManager.rollback();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 5. 关闭连接</span></span><br><span class="line">        tsManager.release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由以上的比较，故能够很清晰的看到，通过动态代理的方法，可以简化代码量以及降低方法间的耦合问题。</p><p>如果，采用上面一般的方式，即在业务层中所有的方法都要加入事务管理的相关代码，这样就增加了代码的冗余；其次，如果我们对<code>TransactionManager</code>类中关于事务管理的方法名进行修改，那么在业务层中相应调用事务的方法名也都要修改。</p><p>如果，采用动态代理的方式：</p><ol><li>我们关于事务管理的代码只需要写一次(工厂类中的代理对象)。</li><li><code>TransactionManage</code>类中事务管理相关的方法名修改后，只需要在代理对象中对增强的方法进行修改即可。</li></ol></li><li><p>最后依赖注入的对象是代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"proxyAccountService"</span>)</span><br><span class="line"><span class="keyword">private</span> AccountService service = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="四、Spring-AOP"><a href="#四、Spring-AOP" class="headerlink" title="四、Spring AOP"></a>四、Spring AOP</h2><h3 id="4-1-AOP基本介绍"><a href="#4-1-AOP基本介绍" class="headerlink" title="4.1 AOP基本介绍"></a>4.1 AOP基本介绍</h3><p><strong>定义：</strong></p><blockquote><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/面向切面编程/6016335" target="_blank" rel="noopener">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/预编译/3191547" target="_blank" rel="noopener">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP" target="_blank" rel="noopener">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring" target="_blank" rel="noopener">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/函数式编程/4035031" target="_blank" rel="noopener">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/耦合度/2603938" target="_blank" rel="noopener">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><p><strong>作用：</strong></p><ul><li>在程序运行期间，不修改源码对已有方法进行增强。</li></ul><p><strong>优势:</strong></p><ul><li>减少重复代码</li><li>提高开发效率</li><li>维护方便</li></ul><p><strong>实现方式:</strong></p><ul><li>使用动态代理技术</li></ul><h3 id="4-2-Spring中的AOP介绍"><a href="#4-2-Spring中的AOP介绍" class="headerlink" title="4.2 Spring中的AOP介绍"></a>4.2 Spring中的AOP介绍</h3><h4 id="4-2-1-AOP相关术语介绍及使用介绍"><a href="#4-2-1-AOP相关术语介绍及使用介绍" class="headerlink" title="4.2.1 AOP相关术语介绍及使用介绍"></a>4.2.1 AOP相关术语介绍及使用介绍</h4><ol><li><p><code>Joinpoint(连接点)</code></p><p>所谓连接点是指那些被拦截的点。在<code>Spring</code>中，这些点指的是方法，因为<code>Spring</code>只支持方法类型的连接点。即：在业务逻辑中的全部方法。</p></li><li><p><code>Pointcut(切入点)</code></p><p>所谓切入点是指我们要对哪些<code>Joinpoint</code>进行拦截的定义。即：在业务逻辑中，那些被增强的方法。所以，有些方法是连接点，但不是切入点，因为没有被增强。</p><p>所以得出：所有的切入点都是连接点，但并不一定所有的连接点都是切入点。(只有被增强的连接点，才是切入点)</p></li><li><p><code>Advice(通知/增强)</code></p><p>所谓通知，是指拦截到<code>Joinpoint</code>之后所要做的事情就是通知。(即，想要增加的功能，事先定义好，然后在想要用的地方添加通知即可)</p><p>通知的类型：</p><ul><li>前置通知：在<code>method.invoke()</code>之前执行的方法</li><li>后置通知：在<code>method.invoke()</code>之后执行的方法</li><li>异常通知：<code>catch</code>中的代码</li><li>最终通知：<code>finally</code>中的代码</li><li>环绕通知：整个<code>invoke</code>(<code>public Object invoke..</code>)方法在执行就是环绕通知，即在环绕通知中有明确的切入点方法调用。 – 最强大的一个通知</li></ul></li><li><p><code>Introduction(引介)</code></p><p>引介是一种特殊的通知在不修改类代码的前提下，<code>Introduction</code>可以在运行期为类动态地添加一些方法或<code>Field</code>。</p></li><li><p><code>Target(目标对象)</code></p><p>代理的目标对象。(被代理对象)</p></li><li><p><code>Weaving(织入)</code></p><p>是指把增强应用到目标对象来创建新的代理对象的过程。</p><p><code>Spring</code>采用动态代理织入，而<code>AspectJ</code>采用编译期织入和类装载期织入。</p></li><li><p><code>Proxy(代理)</code></p><p>一个类被<code>AOP</code>织入增强后，就产生一个结果代理类。</p></li><li><p><code>Aspect(切面)</code></p><p>是切入点和通知(引介)的结合。</p></li></ol><p><code>Spring</code>框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类型，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。   </p><p>将公共代码作为通知(即把通知<code>Bean</code>交给<code>Spring</code>来管理)，由<code>AOP</code>配置织入到切入点。</p><p><code>Logger</code>类作为通知:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟记录日志的工具类,里面提供了公共的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于打印日志，计划让其在切入点方法执行之前执行(这里切入点方法就是业务层方法)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"记录了日志..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以<code>Logger</code>类为例，<code>aop</code>相关配置步骤:</p><ol><li><p>配置<code>Spring</code>的<code>IOC</code>,把<code>service</code>对象配置进来。</p></li><li><p><code>spring</code>中基于<code>XML</code>的<code>aop</code>配置步骤：</p><ol><li><p>把通知<code>Bean</code>交给<code>spring</code>来管理</p></li><li><p>使用<code>aop:config</code>标签表明开始<code>AOP</code>的配置</p></li><li><p>使用<code>aop:aspect</code>标签表明配置切面</p><ul><li><code>id</code>属性：是给切面提供一个唯一的标识</li><li><code>ref</code>属性：是指定通知类<code>bean</code>的<code>Id</code></li></ul></li><li><p>在<code>aop:aspect</code>标签的内部使用对应标签来配置通知的类型</p><p>在<code>Logger</code>类中的<code>pringLog</code>方法是在切入点方法执行之前，所以是前置通知</p><p><code>aop:before</code> 表示配置前置通知</p><ul><li><code>method</code>属性：用于指定<code>Logger</code>类中哪个方法是前置通知。</li><li><code>pointcut</code>属性：用于指定切入点表达式，该表达式的含义是对业务层中哪些方法增强</li></ul><p>切入点表达式的写法：</p><ul><li><p>关键字：<code>execution(表达式)</code></p></li><li><p>表达式：</p><p><code>访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)</code></p></li></ul></li></ol></li></ol><p>根据以上说明，见下方配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring的IOC,把Service对象配置进来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Logger类(通知) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.utlis.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void cn.lizhi.service.impl.AccountServiceImpl.saveAccount())"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>切入点表达式的写法</p><ol><li><p>全通配写法</p><p><code>* *..*.*(..)</code></p><p>原因:</p><ul><li><p>访问修饰符可以省略</p><p><code>void cn.lizhi.service.impl.AccountServiceImpl.saveAccount()</code></p></li><li><p>返回值可以改成任意类型的返回值</p><p><code>* cn.lizhi.service.impl.AccountServiceImpl.saveAccount()</code></p></li><li><p>包名可以使用通配符，表示任意包。但是有几级包，就需要几个<code>*.</code></p><p><code>* *.*.*.*.AccountServiceImpl.saveAccount()</code></p></li><li><p>包名可以使用<code>..</code>表示当前包及其子包</p><p><code>* *..AccountServiceImpl.saveAccount()</code></p></li><li><p>类名和方法名都可以使用<code>*</code>来实现通配</p><p><code>* *..*.*()</code></p></li><li><p>参数列表：</p><ol><li><p>可以直接写数据类型：</p><ul><li>基本类型直接写名称 例如:<code>int</code></li><li>引用类型写包名.类名的方式 例如：<code>java.lang.String</code></li></ul></li><li><p>可以使用通配符表示任意类型，但是必须有参数</p></li><li><p>可以使用<code>..</code>表示有无参数均可，有参数可以是任意类型</p><p><code>* *..*.*(..)</code></p></li></ol></li></ul><p>实际开发中切入点表达式的通常写法：</p><ul><li><p>切到业务层实现类下的所有方法</p><p><code>* cn.lizhi.service.impl.*.*(..)</code></p></li></ul><p>总结：以上是正则表达式的应用,正则表达式中<code>*</code>代表0次或无限次扩展；<code>.</code>代表任何单个字符。</p></li></ol></li></ol><h4 id="4-1-2-四种常用通知类型"><a href="#4-1-2-四种常用通知类型" class="headerlink" title="4.1.2 四种常用通知类型"></a>4.1.2 四种常用通知类型</h4><ul><li>前置通知：在切入点方法执行之前执行，类比动态代理中的<code>method.invoke</code>执行之前的开启事务方法 – <code>before</code></li><li>后置通知：在切入点方法正常执行之后执行。它和异常通知永远只能执行一个，类比事务中的<code>commit</code> – <code>after-returning</code></li><li>异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个，类比<code>catch</code>代码块中的<code>rollback</code>。– <code>after-throwing</code></li><li>最终通知：无论切入点方法是否正常执行，它都会在其后面执行,类比<code>finally</code>代码块。 – <code>after</code></li></ul><p>最终配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring的IOC,把Service对象配置进来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Logger类(通知) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.utlis.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lizhi.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturningPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowingPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中这个切入点表达式的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lizhi.service.impl.*.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>id</code>属性用于指定表达式的唯一标识。</p><p><code>expression</code>属性用于指定表达式内容。</p><p>同时，此标签写在<code>aop:aspect</code>标签内部只能当前切面使用。</p><p>当它写在<code>aop:aspect</code>外面时，此时就变成了所有切面可用。</p><p>步骤：</p><ol><li>把需要切入的对象，声明一个<code>bean</code></li><li>在<code>&lt;aop:aspect&gt;</code>元素中引用该<code>bean</code>，为了进一步定义切面</li><li>声明<code>&lt;aop:before&gt;</code>等标签，即声明前置通知、后置通知</li><li><code>pointcut-ref</code>属性都引用了名字为<code>pt1</code>的切入点。该切入点是在前边的<code>&lt;pointcut&gt;</code>元素中定义的，并配置<code>expression</code>属性来选择所应用的通知。</li></ol><p>通过少量的<code>XML</code>配置，就可以把<code>logger</code>声明为一个切面。</p><p>这样做的好处是，<code>logger</code>类仍然是一个<code>POJO</code>，代码没有任何的更改，但通过以上的修改，<code>logger</code>可以作为一个切面进行使用了；同时，最重要的是，被切入的对象完全不知道<code>Logger</code>的存在。（注意：需要使用的切面，仍然先需要定义成一个<code>bean</code>)</p><h4 id="4-1-3-环绕通知"><a href="#4-1-3-环绕通知" class="headerlink" title="4.1.3 环绕通知"></a>4.1.3 环绕通知</h4><h5 id="4-1-3-1-问题"><a href="#4-1-3-1-问题" class="headerlink" title="4.1.3.1 问题"></a>4.1.3.1 问题</h5><p>当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。</p><h5 id="4-1-3-2-分析"><a href="#4-1-3-2-分析" class="headerlink" title="4.1.3.2 分析"></a>4.1.3.2 分析</h5><p>通过对比动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码代码中没有。</p><h5 id="4-1-3-3-解决"><a href="#4-1-3-3-解决" class="headerlink" title="4.1.3.3 解决"></a>4.1.3.3 解决</h5><p><code>Spring</code>框架为我们提供了一个接口：<code>ProceedingJoinPoint</code>。该接口有一个方法<code>proceed()</code>，此方法就相当于明确调用切入点方法。</p><p>该接口可以作为环绕通知的方法参数，在程序执行时，<strong><code>spring</code>框架会为我们提供该接口的实现类供我们使用</strong>。</p><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">aroundPrintLog</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger类中aroundPrintLog方法开始记录日志了...前置"</span>); <span class="comment">// 前置通知</span></span><br><span class="line">        Object[] args = pjp.getArgs(); <span class="comment">// 得到方法执行所需要的参数</span></span><br><span class="line">        obj = pjp.proceed(args);<span class="comment">// 明确调用业务层方法(切入点方法)</span></span><br><span class="line">        System.out.println(<span class="string">"Logger类中aroundPrintLog方法开始记录日志了...后置"</span>); <span class="comment">// 后置通知</span></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger类中aroundPrintLog方法开始记录日志了...异常"</span>); <span class="comment">// 异常通知</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(throwable);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger类中aroundPrintLog方法开始记录日志了...结束"</span>); <span class="comment">// 结束通知</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出，环绕通知是<code>Spring</code>框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。</p><h4 id="4-2-2-基于注解的AOP配置"><a href="#4-2-2-基于注解的AOP配置" class="headerlink" title="4.2.2 基于注解的AOP配置"></a>4.2.2 基于注解的AOP配置</h4><ol><li><p>在<code>bean.xml</code>配置<code>Spring</code>创建容器时要扫描的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置扫描的包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lizhi"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置Spring开启注解AOP的支持 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在通知类中，开启注解</p><ul><li><code>@Before</code></li><li><code>@AfterReturning</code></li><li><code>@AfterThrowing</code></li><li><code>@After</code></li><li><code>@Around</code></li></ul><p>另外需要额外在通知类中，建立通知方法和切入点的关联，以上的通知注解中的参数就写关联方法的函数名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.lizhi.service.impl.*.*(..))"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Before</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"beforePrintLog记录了日志..."</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>最后需要在配置文件中，开启<code>Spring</code>对注解<code>AOP</code>的支持:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者采用纯注解的方式(定义配置类):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"cn.lizhi"</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">springConfiguration</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>使用注解的方式，操作四个普通类型的通知，可能会带来顺序错误的问题。例如：</p><blockquote><p>beforePrintLog记录了日志…前置<br>模拟用户保存了…<br>afterPrintLog记录了日志…最终<br>afterReturningPrintLog记录了日志…后置</p></blockquote><p><strong>注意：</strong>这里出现了<code>最终通知</code>在<code>后置通知</code>之前出现的问题。这样会在事务控制中产生一个问题，以上面的银行转账为例，就是最终通知–<code>release</code>操作会在<code>后置通知</code>–<code>commit</code>操作之前执行，那么会造成获取的连接不会是同一个连接(每次调用<code>dao</code>方法时，都会获取连接，由于前面我们使用了<code>ThreadLocal</code>对连接进行了绑定，所以此时获取的连接都是同一个连接，当对其进行<code>release</code>之后，再次获取连接时，那么和之前的连接就都不是同一个连接，因为在<code>release</code>方法中首先对数据库连接进行归还连接池操作，然后再将<code>ThreadLocal</code>和数据库连接进行解绑)，就没有对事务进行相应的控制。因为当你<code>commit</code>时，会从连接池中重新获取连接再与线程进行绑定，而此时的连接并没有做任何的操作，所以<code>commit</code>就是一个空的提交。</p><p><strong>因此</strong>,在使用注解的方式时，尽量使用<code>环绕通知</code>代替以上四个<code>普通通知</code>，因为环绕通知中的代码执行一定是由我们自己控制编写的。</p></li></ol><h2 id="五、Spring事务相关"><a href="#五、Spring事务相关" class="headerlink" title="五、Spring事务相关"></a>五、Spring事务相关</h2><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/22/wXM12j.jpg" alt=""></p><h3 id="5-1-Spring中JdbcTemplate-介绍"><a href="#5-1-Spring中JdbcTemplate-介绍" class="headerlink" title="5.1 Spring中JdbcTemplate 介绍"></a>5.1 Spring中JdbcTemplate 介绍</h3><h4 id="5-1-1-Spring-JdbcTemplate的内置数据源"><a href="#5-1-1-Spring-JdbcTemplate的内置数据源" class="headerlink" title="5.1.1 Spring JdbcTemplate的内置数据源"></a>5.1.1 Spring JdbcTemplate的内置数据源</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备数据源，spring的内置数据源</span></span><br><span class="line">DriverManagerDataSource ds = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">ds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">// 注入数据库驱动</span></span><br><span class="line">ds.setUrl(<span class="string">"jdbc:mysql://url:3306/draft"</span>); <span class="comment">// 连接地址</span></span><br><span class="line">ds.setUsername(<span class="string">"root"</span>); <span class="comment">// 用户名称</span></span><br><span class="line">ds.setPassword(<span class="string">"1234"</span>); <span class="comment">// 密码</span></span><br><span class="line"><span class="comment">// 1.创建JdbcTemplate对象</span></span><br><span class="line">JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line"><span class="comment">// 注入数据源</span></span><br><span class="line">template.setDataSource(ds);</span><br></pre></td></tr></table></figure><p>通过配置文件，利用<code>IOC</code>思想简化以上操作:</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建JdbcTemplate对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"template"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dateSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- dataSource数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dateSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://url/draft"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码实现:</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);<span class="comment">// 获取容器</span></span><br><span class="line">        JdbcTemplate template = ac.getBean(<span class="string">"template"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">// 获取template对象</span></span><br><span class="line">        template.execute(<span class="string">"insert into account (name,money) values('Lisa',900)"</span>);<span class="comment">// 执行操作</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2-JdbcTemplate的使用-–-CRUD"><a href="#5-1-2-JdbcTemplate的使用-–-CRUD" class="headerlink" title="5.1.2 JdbcTemplate的使用 – CRUD"></a>5.1.2 JdbcTemplate的使用 – CRUD</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        JdbcTemplate template = ac.getBean(<span class="string">"template"</span>, JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//        template.execute("insert into account (name,money) values('Lisa',900)");</span></span><br><span class="line">        <span class="comment">// 1.保存操作</span></span><br><span class="line">        template.update(<span class="string">"insert into account(name,money) values(?,?)"</span>, <span class="string">"Ben"</span>, <span class="number">800f</span>);</span><br><span class="line">        <span class="comment">// 2.更新操作</span></span><br><span class="line">        template.update(<span class="string">"update account set name=?,money=? where id=?"</span>, <span class="string">"Gu"</span>, <span class="number">900f</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 3.删除操作</span></span><br><span class="line">        template.update(<span class="string">"delete from account where id=?"</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 4.查询所有</span></span><br><span class="line">        List&lt;Account&gt; accounts = template.query(<span class="string">"select * from account"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="comment">// 5.查询单个</span></span><br><span class="line">        Account account = template.queryForObject(<span class="string">"select * from account where id = ?"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), 10)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-3-JdbcDaoSupport的使用"><a href="#5-1-3-JdbcDaoSupport的使用" class="headerlink" title="5.1.3 JdbcDaoSupport的使用"></a>5.1.3 JdbcDaoSupport的使用</h4><p>可以用于抽取<code>dao</code>层中的重复代码块。</p><p>例如：</p><p> <code>dao</code>层的接口：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类:</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemplate</span><span class="params">(JdbcTemplate template)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.template = template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        template.update(<span class="string">"update account set name=?,money=? where id = ?"</span>, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; lists = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lists = template.query(<span class="string">"select * from account"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DataAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其配置文件<code>bean.xml</code>中<code>bean</code>配置为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--配置账户的持久层--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"template"</span> <span class="attr">ref</span>=<span class="string">"template"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JdbcTemplate对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"template"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dateSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- DataSource数据源 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dateSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:/url:3306/draft"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们有多个<code>dao</code>的实现方法时，那么这里的重复代码块：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> JdbcTemplate template = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemplate</span><span class="params">(JdbcTemplate template)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.template = template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里就引发了我们的一个思考，是否可以把这些重复的代码块进行抽取，作为一个单独的类，然后当我们的实现类去继承这个类，进而简化我们的代码。答案是可以的。</p><p>现在我们对这个类进行抽取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们原有的实现类就需要继承这个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.getJdbcTemplate().update(<span class="string">"update account set name=?,money=? where id = ?"</span>, account.getName(), account.getMoney(), account.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; lists = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lists = <span class="keyword">super</span>.getJdbcTemplate().query(<span class="string">"select * from account"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DataAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的<code>bean.xml</code>配置文件中，我们看到需要单独对<code>JdbcTemplate</code>进行配置，我们是否可以将<code>JdbcTemplate</code>和<code>DataSource</code>进行统一配置呢。我们将<code>DataSource</code>同样创建在<code>JdbcDaoSupport</code>类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jdbcTemplate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            jdbcTemplate = createJdbcTemplate(dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们创建了一个<code>DataSource</code>对象，并改写了其<code>set</code>方法。<strong>作用:</strong>如果我们直接传递<code>template</code>对象，那么<code>template</code>理所应当有值(有<code>set</code>方法)；如果我们没有传递<code>template</code>对象，我们可以通过<code>DataSource</code>来获取<code>template</code>对象，由于我们改写了其<code>set</code>方法，我们同样可以使<code>template</code>有值(<strong>创建</strong>了有参构造函数的<code>template</code>，并向其传递了<code>dataSource</code>)。</p><p>此时<code>bean.xml</code>配置文件中<code>bean</code>的配置为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置账户的持久层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dateSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dateSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://url:3306/draft"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面的<code>bean.xml</code>文件也可以看出，在创建<code>accountDao</code>时，我们是向其注入了<code>dataSource</code>，所以进而就直接触发其<code>set</code>方法(因为<code>accountDaoImpl</code>继承了<code>JdbcDaoSupport</code>)，判断<code>template</code>是否有值，如果没有值，就调用其父类中的<code>createJdbcTemplate</code>方法，其中传递的参数<code>dataSource</code>是来自于<code>bean.xml</code>配置文件中的<code>id=dataSource</code>的<code>bean</code>依赖注入。</p><p>以上的操作其实<code>Spring</code>已经帮我们实现了，不需要我们自己手动构建(也算是自己练习了一下源码)。截取其部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">extends</span> <span class="title">DaoSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JdbcDaoSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.jdbcTemplate == <span class="keyword">null</span> || dataSource != <span class="keyword">this</span>.jdbcTemplate.getDataSource()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">this</span>.createJdbcTemplate(dataSource);</span><br><span class="line">            <span class="keyword">this</span>.initTemplateConfig();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是同样的存在<code>createJdbcTemplate(DataSource dataSource)</code>和<code>getJdbcTemplate()</code>方法。从上面的源码中也可以看出<code>Spring</code>在使用<code>set</code>依赖注入时，可以不用定义其变量，只要定义其<code>set</code>属性方法即可。</p><p>最后，以上这种继承的方法适用于<code>xml</code>配置文件的方法，不适用于注解开发的方式(因为无法在<code>jar</code>包中的<code>JdbcTemplate</code>上加注解，注入我们的数据类型)。</p><h3 id="5-2-Spring中事务控制的API"><a href="#5-2-Spring中事务控制的API" class="headerlink" title="5.2 Spring中事务控制的API"></a>5.2 Spring中事务控制的API</h3><h4 id="5-2-1-Spring事务控制"><a href="#5-2-1-Spring事务控制" class="headerlink" title="5.2.1 Spring事务控制"></a>5.2.1 Spring事务控制</h4><ol><li><code>JavaEE</code>体系进行分层开发，事务处理处于业务层，<code>Spring</code>提供了分层设计<strong>业务层</strong>的事务处理解决方案。</li><li><code>Spring</code>框架为我们提供了一组事务控制的接口</li><li><code>Spring</code>的事务控制都是基于<code>AOP</code>的，它既可以使用编程的方式实现，也可以使用配置的方法实现。</li></ol><p>依赖导入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-Spring中事务控制的API介绍"><a href="#5-2-2-Spring中事务控制的API介绍" class="headerlink" title="5.2.2 Spring中事务控制的API介绍"></a>5.2.2 Spring中事务控制的API介绍</h4><ol><li><p><code>PlatformTransactionManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(@Nullable TransactionDefinition var1)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此接口存在<code>commit</code>、<code>rollback</code>方法，即为通知<code>bean</code>。</p><p><code>PlatformTransactionManager</code>接口提供事务操作的方法，包含有3个具体的操作：</p></li></ol><ul><li><p>获取事务状态信息</p><ul><li><p><code>TransactionStatus getTransaction(@Nullable TransactionDefinition var1)</code></p><ul><li>提交事务<ul><li><code>void commit(TransactionStatus var1)</code></li></ul></li><li>回滚事务<ul><li><code>void rollback(TransactionStatus var1)</code></li></ul></li></ul><p>我们需要使用的是其实现类：</p><ol><li><p><code>org.springframework.jdbc.datasource.DataSourceTransactionManager</code></p><p>使用<code>Spring JDBC</code>或<code>iBatis</code>进行持久化数据时使用</p></li><li><p><code>org.springframework.orm.hibernate5.HibernateTransactionManager</code></p><p>使用<code>Hibernate</code>版本进行持久化数据时使用</p></li></ol></li></ul></li></ul><ol start="3"><li><p><code>TransactionDefinition</code></p><ul><li><p>获取事务对象名称</p><p><code>String getName()</code></p></li><li><p>获取事务隔离级别:有四个隔离级别，<code>Spring</code>默认使用的是数据库的隔离级别</p><p><code>int getIsolationLevel()</code></p></li><li><p>获取事务传播行为:定义什么时候需要用事务(增、删、改)，什么时候事务可有可无(查询)</p><p><code>int getPropagationBehavior()</code></p></li><li><p>获取事务超时时间</p><p><code>int getTimeout()</code></p></li><li><p>获取事务是否只读(建议查询方法下为只读)</p><p><code>boolean isReadOnly()</code></p><p>读写型事务：增加、删除、修改开启事务</p><p>只读型事务：执行查询时，也会开启事务</p></li></ul></li></ol><h4 id="5-2-3-事务的隔离级别"><a href="#5-2-3-事务的隔离级别" class="headerlink" title="5.2.3 事务的隔离级别"></a>5.2.3 事务的隔离级别</h4><p>事务隔离级别反映事务提交并发访问时的处理态度</p><ul><li><code>ISOLATION_DEFAULT</code><ul><li>默认级别，归属下列某一种</li></ul></li><li><code>ISOLATION_READ_UNCOMMITTED</code><ul><li>可以读取未提交数据</li></ul></li><li><code>ISOLATION_READ_COMMITTED</code><ul><li>只能读取已提交数据，解决脏读问题(<code>Oracle</code>默认级别)</li></ul></li><li><code>ISOLATION_REPEATABLE_READ</code><ul><li>是否读取其他事务提交修改后的数据，解决不可重复读问题(<code>MySQL</code>默认级别)</li></ul></li><li><code>ISOLATION_SERIALIZABLE</code><ul><li>是否读取其他事务提交添加后的数据，解决幻读问题</li></ul></li></ul><h4 id="5-2-4-事务的隔离级别"><a href="#5-2-4-事务的隔离级别" class="headerlink" title="5.2.4 事务的隔离级别"></a>5.2.4 事务的隔离级别</h4><ul><li><strong><code>REQUIRED</code>:如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择(默认值)</strong></li><li><strong><code>SUPPORTS</code>:支持当前事务，如果当前没有事务，就以非事务方式执行(没有事务)</strong></li><li><code>MANDATORY</code>:使用当前的事务，如果当前没有事务，就抛出异常</li><li><code>REQUERS_NEW</code>:新建事务，如果当前在事务中，把当前事务挂起。</li><li><code>NOT_SUPPORTED</code>:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li><code>NEVER</code>:以非事务方式运行，如果当前存在事务，抛出异常。</li><li><code>NESTED</code>:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行<code>REQUIRED</code>类似的操作。</li></ul><h4 id="5-2-5-TransactionStatus接口"><a href="#5-2-5-TransactionStatus接口" class="headerlink" title="5.2.5 TransactionStatus接口"></a>5.2.5 TransactionStatus接口</h4><p>此接口提供的是事务具体的运行状态，<code>TransacitonStatus</code>接口描述了某个<strong>时间点</strong>上事务对象的状态信息，包含有6个具体的操作：</p><ul><li>刷新事务<ul><li><code>void flush()</code></li></ul></li><li>获取是否存在存储点(相当于回滚的断点，回滚时不是回滚到最初的开始，而是回滚到设置的存储点处)<ul><li><code>boolean hasSavepoint()</code></li></ul></li><li>获取事务是否完成<ul><li><code>boolean isCompleted()</code></li></ul></li><li>获取事务是否为新的事务<ul><li><code>boolean isNewTransaction()</code></li></ul></li><li>获取事务是否回滚<ul><li><code>boolean isRollbackOnly()</code></li></ul></li><li>设置事务回滚<ul><li><code>void setRollbackOnly()</code></li></ul></li></ul><h3 id="5-3-Spring中基于XML的声明式事务控制配置步骤"><a href="#5-3-Spring中基于XML的声明式事务控制配置步骤" class="headerlink" title="5.3 Spring中基于XML的声明式事务控制配置步骤"></a>5.3 Spring中基于<code>XML</code>的声明式事务控制配置步骤</h3><ol><li><p>配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dateSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置事务的通知</p><p>此时我们需要导入事务的约束 <code>tx</code>名称空间和约束，同时也需要<code>aop</code></p><p>使用<code>tx:advice</code>标签配置事务通知</p><ul><li>属性：<ul><li><code>id</code>：给事务通知起一个唯一标识</li><li><code>transaction-manager</code>:给事务通知提供一个事务管理器引用</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务通知 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>AOP</code>中的通用切入点表达式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通用表达式配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lizhi.service.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建立事务通知和切入点表达式的对应关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 通用表达式配置 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lizhi.service.*.*(..))"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置事务的属性 – <code>tx:attributes</code></p><p>是在事务的通知<code>tx:advice</code>标签的内部 <code>tx:method</code></p><ul><li><code>name</code>属性：表明业务层中哪个方法需要被事务控制。</li></ul><p>配置事务的属性:</p><ul><li><code>isolation</code>:用于指定事务的隔离级别。默认值是<code>DEFAULT</code>,表示使用数据库的默认隔离级别。</li><li><code>propagation</code>:用于指定事务的传播行为。默认值是<code>REQUIRED</code>,表示一定会有事务，增删改的选择。查询方法可以选择<code>SUPPORTS</code>。</li><li><code>read-only</code>:用于指定事务是否只读。只有查询方法才能设置为<code>true</code>。默认值是<code>false</code>，表示读写。</li><li><code>timeout</code>:用于指定事务的超时时间，默认值是-1,表示永不超时。如果指定了数值，以秒为单位。</li><li><code>rollback-for</code>:用于指定一个异常。当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值，表示任何异常都回滚。</li><li><code>no-rollback-for</code>:用于指定一个异常，当产生异常时，事务不回滚，产生其他异常时事务回滚。没有默认值，表示任何异常都回滚。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务通知 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 增删改事务的控制 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 查询方法事务的控制 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要命名规范，通过通配符配置方法名。</p></li></ol><p>最终<code>bean.xml</code>中的配置为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置账户的持久层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dateSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置账户的业务层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"cn.lizhi.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dateSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://url:3306/draft"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dateSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- AOP配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通用表达式配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.lizhi.service.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-Spring中基于注解的声明式事务控制配置步骤"><a href="#5-4-Spring中基于注解的声明式事务控制配置步骤" class="headerlink" title="5.4 Spring中基于注解的声明式事务控制配置步骤"></a>5.4 Spring中基于注解的声明式事务控制配置步骤</h3><ol><li><p>配置事务管理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dateSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>开启<code>spring</code>对注解事务的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在需要事务支持的地方使用<code>@Transaction</code>注解</p></li></ol><p>以上中的注意事项有：因为是使用注解式配置，所以在<code>dao</code>层，不能通过继承<code>JdbcDaoSupport</code>的方式简化我们的代码，故需要在<code>bean.xml</code>中对<code>SpringJdbcTemplate</code>进行配置。</p><h4 id="5-4-1-基于纯注解的声明式事务控制"><a href="#5-4-1-基于纯注解的声明式事务控制" class="headerlink" title="5.4.1 基于纯注解的声明式事务控制"></a>5.4.1 基于纯注解的声明式事务控制</h4><p>通过配置类的方式实现。</p><ol><li><p><code>SpringConfig</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.lizhi"</span>)</span><br><span class="line"><span class="meta">@Import</span>(&#123;JdbcConfig<span class="class">.<span class="keyword">class</span>, <span class="title">TransactionConfig</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line">@PropertySource("classpath:jdbcConfig.properties")</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>JdbcConfig</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"template"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>TransactionConfig</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">getTransactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-5-Spring编程式事务控制"><a href="#5-5-Spring编程式事务控制" class="headerlink" title="5.5 Spring编程式事务控制"></a>5.5 Spring编程式事务控制</h3><p>因为我们的事务管理都是由<code>Spring</code>进行控制，所以我们都需要进行事务管理器的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dateSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当有了事务管理器之后，<code>Spring</code>同样为我们提供了事务模板，供我们具体使用事务控制的相关方法(相当于代理对象，对业务层方法进行增强)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务模板对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看具体的<code>TransactionTemplate</code>源码，其中一段为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(TransactionCallback&lt;T&gt; action)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">    Assert.state(<span class="keyword">this</span>.transactionManager != <span class="keyword">null</span>, <span class="string">"No PlatformTransactionManager set"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.transactionManager <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((CallbackPreferringPlatformTransactionManager)<span class="keyword">this</span>.transactionManager).execute(<span class="keyword">this</span>, action);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        TransactionStatus status = <span class="keyword">this</span>.transactionManager.getTransaction(<span class="keyword">this</span>);</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = action.doInTransaction(status);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error | RuntimeException var5) &#123;</span><br><span class="line">            <span class="keyword">this</span>.rollbackOnException(status, var5);</span><br><span class="line">            <span class="keyword">throw</span> var5;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">            <span class="keyword">this</span>.rollbackOnException(status, var6);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var6, <span class="string">"TransactionCallback threw undeclared checked exception"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.transactionManager.commit(status);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的异常代码块中，可以看出，当执行不通过时，执行<code>this.rollbackOnException(status, var5)</code>，进行事务回滚；当执行通过时，<code>try</code>代码块中执行事务状态<code>result = action.doInTransaction(status)</code>，最后执行<code>this.transactionManager.commit(status)</code>，进行事务的提交。</p><p>具体使用：</p><p>模仿<code>TransactionTemplate</code>中的<code>execute</code>方法，在业务层中需要事务控制的方法中，执行该方法，该方法中的参数是一个接口，需要我们自己实现，其内容就填写我们需要控制的业务具体代码块。</p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/22/wXMua8.png" style="zoom:150%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">final</span> String startName, <span class="keyword">final</span> String endName, <span class="keyword">final</span> Float money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        template.execute(<span class="keyword">new</span> TransactionCallback&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class="line">                Account startAccount = dao.findByName(startName); <span class="comment">// 出款人账号 -- 会获取连接</span></span><br><span class="line">                Account endAccount = dao.findByName(endName); <span class="comment">// 收款人账号 -- 会获取连接</span></span><br><span class="line">                Float startMoney = startAccount.getMoney();</span><br><span class="line">                startAccount.setMoney(startMoney - money);</span><br><span class="line">                Float endMoney = endAccount.getMoney();</span><br><span class="line">                endAccount.setMoney(endMoney + money);</span><br><span class="line">                dao.update(startAccount, startAccount.getId()); <span class="comment">// 会获取连接</span></span><br><span class="line"><span class="comment">//                int a = 3 / 0;</span></span><br><span class="line">                dao.update(endAccount, endAccount.getId()); <span class="comment">// 会获取连接</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于编程式的事务控制，又增加了代码的冗余，违背了<code>AOP</code>的初心，所以实际中很少使用这种事务控制方式。</p><h2 id="六、Spring整合JavaWeb"><a href="#六、Spring整合JavaWeb" class="headerlink" title="六、Spring整合JavaWeb"></a>六、Spring整合JavaWeb</h2><p>整合步骤：</p><ol><li><p>导包 —— Spring相关的Jar包</p></li><li><p>写配置</p><ul><li>将所有组件加入容器中，并能正确获取<ul><li><code>@Controller</code>：<code>Servlet</code>层；但是不能标注在<code>Servlet</code>层，因为这个对象是Tomcat创建的，而非<code>Spring</code>容器进行创建的。</li><li><code>@Service</code>：业务逻辑层</li><li><code>@Repository</code>：dao层</li><li><code>@Component</code>：其他组件</li></ul></li></ul></li><li><p>每个组件之间自动装配</p></li><li><p>配置出声明式事务</p><ul><li>配置数据源。配置数据源之前，可抽离出<code>JDBC</code>配置文件。</li><li><code>JDBCTemplate</code>操作数据库。给其注入数据源。</li><li>配置事务管理器 – 让其控制住数据源<ul><li>注解方式</li><li>XML配置方式</li></ul></li></ul></li><li><p>IOC容器创建和销毁都要在合适的时机完成；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">项目启动：&#123;</span><br><span class="line">    IOC创建完成</span><br><span class="line">&#125;</span><br><span class="line">项目销毁：&#123;</span><br><span class="line">    IOC销毁</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过监听器完成这项工作，监听器是Tomcat中的，因此，配置在web.xml中。采用Spring提供的监听器(ContextLoaderListener)；容器位置，即为Spring配置文件。</p><p>这个监听器创建好的IOC容器在ContextLoader —— 这个属性就是IoC容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> WebApplicationContext context;</span><br></pre></td></tr></table></figure><p>通过静态方法能获取——<code>getCurrentWebApplicationContext</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis框架介绍与基本使用笔记</title>
      <link href="/2020/09/06/Mybatis%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/09/06/Mybatis%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis框架介绍与基本使用笔记"><a href="#Mybatis框架介绍与基本使用笔记" class="headerlink" title="Mybatis框架介绍与基本使用笔记"></a>Mybatis框架介绍与基本使用笔记</h1><p><strong>注意:</strong>一般的一个<code>Maven</code>工程首先注入的依赖包含数据库驱动依赖，日志依赖，测试依赖</p><p><code>domain</code>中的实体类实现<code>serizlizable</code>接口序列化的原因:</p><blockquote><p>最重要的两个原因是：</p><p>　　1、将对象的状态保存在存储媒体中以便可以在以后重新创建出完全相同的副本；</p><p>　　2、按值将对象从一个应用程序域发送至另一个应用程序域。</p><p>　　实现<a href="https://www.baidu.com/s?wd=serializable接口&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Y3nHRknHu9uHm4PWTznWNb0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHmknjfkn1cd" target="_blank" rel="noopener">serializable接口</a>的作用是就是可以把对象存到字节流，然后可以恢复。所以你想如果你的对象没实现序列化怎么才能进行<a href="https://www.baidu.com/s?wd=网络传输&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Y3nHRknHu9uHm4PWTznWNb0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHmknjfkn1cd" target="_blank" rel="noopener">网络传输</a>呢，要<a href="https://www.baidu.com/s?wd=网络传输&tn=44039180_cpr&fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1Y3nHRknHu9uHm4PWTznWNb0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPHmknjfkn1cd" target="_blank" rel="noopener">网络传输</a>就得转为字节流，所以在分布式应用中，你就得实现序列化，如果你不需要分布式应用，那就没那个必要实现序列.</p></blockquote><p><strong>namespace</strong>:名称空间；写接口的全类名；相当于告诉<code>Mybatis</code>这个配置文件是实现哪个接口的;</p><a id="more"></a><h2 id="一、Mybatis相关配置"><a href="#一、Mybatis相关配置" class="headerlink" title="一、Mybatis相关配置"></a>一、Mybatis相关配置</h2><blockquote><p>[1] <a href="https://blog.csdn.net/gaoxin_gx/article/details/100183455?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param" target="_blank" rel="noopener">mybatis配置文件中config与mapper的约束</a></p></blockquote><p>自己预设定的配置文件:</p><h3 id="1-1-config-mybatis-config-xml-全局配置文件"><a href="#1-1-config-mybatis-config-xml-全局配置文件" class="headerlink" title="1.1 config(mybatis-config.xml)全局配置文件"></a>1.1 config(mybatis-config.xml)全局配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span> <span class="comment">&lt;!-- 引入Mybatis的配置声明dtd文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 若想让environments环境起作用，下列的标签中的配置都需要起作用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql(default的值)环境 id值等于default的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源(连接池 -\- druid、c3p0..) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置数据库连接的基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://url:3306/mybatis?characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用的是注解 指定映射配置文件的位置(使用注解时，不能留下配置文件的方式，否则会冲突)，映射配置文件指的是每个dao对立的配置文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         &lt;mapper class="cn.lizhi.mybatis_01.dao.UserDao"/&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         该包下所有的dao接口都可以使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;package name="cn.lizhi.mybatis_01.dao"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置文件的指定方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/lizhi/mybatis_01/dao/UserDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-1-通过properties标签引入外部配置信息-动态配置"><a href="#1-1-1-通过properties标签引入外部配置信息-动态配置" class="headerlink" title="1.1.1 通过properties标签引入外部配置信息(动态配置)"></a>1.1.1 通过properties标签引入外部配置信息(动态配置)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span> <span class="comment">&lt;!-- 引入Mybatis的配置声明dtd文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置properties</span></span><br><span class="line"><span class="comment">  可以在标签内部配置连接数据库的信息。也可以通过属性引用外部配置文件信息</span></span><br><span class="line"><span class="comment"> resource属性:</span></span><br><span class="line"><span class="comment"> 用于指定配置文件的位置，是按照类路径的写法来写，并且必须存在与类路径下</span></span><br><span class="line"><span class="comment"> url属性:</span></span><br><span class="line"><span class="comment">是要求按照url的写法来写地址</span></span><br><span class="line"><span class="comment">写法:</span></span><br><span class="line"><span class="comment">http://localhost:8080/servlet/demoServlet</span></span><br><span class="line"><span class="comment">协议     主机     端口        URI</span></span><br><span class="line"><span class="comment">URI：统一资源标识符。应用中可以唯一定位一个资源。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式1.jdbcConfig.properties 是存放在类(resources)路径的根路径下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbcConfig.properties"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 方式2. 这种是在标签内部配置连接数据库信息</span></span><br><span class="line"><span class="comment">    &lt;properties&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="url" value="jdbc:mysql://url:3306/mybatis?characterEncoding=utf8"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="username" value="root"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="password" value="root"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/properties&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 若想让environments环境起作用，下列的标签中的配置都需要起作用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql(default的值)环境 id值等于default的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源(连接池 -\- druid、c3p0..) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置数据库连接的基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/lizhi/mybatis_01/dao/UserDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>jdbcConfig.properties</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://url:3306/mybatis?characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure><h3 id="1-2-Mapper"><a href="#1-2-Mapper" class="headerlink" title="1.2 Mapper"></a>1.2 Mapper</h3><p><code>Mapper</code>是具体某张表的映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lizhi.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有，resultType的作用就是返回封装的位置，如果你要是不写的话，最后mybatis是不知道你到底要封装到哪里，会出现错误，我这个是User表，查询的也是这个，最后返回的结果就封装在User类中 id要写对应dao中的方法名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.lizhi.domain.User"</span>&gt;</span></span><br><span class="line">        SELECT *FROM user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注意在resources中，目录是一级结构，要一个一个创建，而cn.lizhi.mybatis.dao是一个目录。而包是三级结构--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用时直接复制以下的即可 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">resultType</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        SELECT *FROM user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过实例 – 由<code>Mybatis</code>创建实现<code>Dao</code>的接口，进行数据库的查询时，在<code>mapper</code>中只有<code>id</code>是无法定位到具体数据库访问的方法的，所以要加上<code>namespace</code>，限定住工作空间(即限定住全类名，一个类中，方法名是唯一的)。可以简单理解为<code>namespace</code>是定位到具体的一个<code>dao</code>接口，<code>id</code>是定位到当前这个<code>dao</code>下的具体方法。</p><h3 id="1-3-log4j的日志配置文件-–-log4j-properties"><a href="#1-3-log4j的日志配置文件-–-log4j-properties" class="headerlink" title="1.3 log4j的日志配置文件 – log4j.properties"></a>1.3 log4j的日志配置文件 – log4j.properties</h3><p>将<code>log4j</code>配置文件放入resource资源目录下，记录日志，对日志的操作。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class="line"><span class="comment">#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span></span><br><span class="line"><span class="meta">log4j.rootCategory</span>=<span class="string">debug, CONSOLE, LOGFILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.axis.enterprise</span>=<span class="string">FATAL, CONSOLE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.File</span>=<span class="string">axis.log</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br></pre></td></tr></table></figure><h3 id="1-4-表的初始创建"><a href="#1-4-表的初始创建" class="headerlink" title="1.4 表的初始创建"></a>1.4 表的初始创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">create DATABASE mybatis;</span><br><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line">-- user表的创建</span><br><span class="line">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; int(11) Not NULL PRIMARY KEYauto_increment,</span><br><span class="line">  &#96;username&#96; varchar(32) NOT NULL COMMENT &#39;用户名称&#39;,</span><br><span class="line">  &#96;birthday&#96; datetime default NULL COMMENT &#39;生日&#39;,</span><br><span class="line">  &#96;sex&#96; char(1) default NULL COMMENT &#39;性别&#39;,</span><br><span class="line">  &#96;address&#96; varchar(256) default NULL COMMENT &#39;地址&#39;</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">insert  into &#96;user&#96;(&#96;id&#96;,&#96;username&#96;,&#96;birthday&#96;,&#96;sex&#96;,&#96;address&#96;) values (41,&#39;老王&#39;,&#39;2018-02-27 17:47:08&#39;,&#39;男&#39;,&#39;北京&#39;),(42,&#39;小二王&#39;,&#39;2018-03-02 15:09:37&#39;,&#39;女&#39;,&#39;北京金燕龙&#39;),(43,&#39;小二王&#39;,&#39;2018-03-04 11:34:34&#39;,&#39;女&#39;,&#39;北京金燕龙&#39;),(45,&#39;传智播客&#39;,&#39;2018-03-04 12:04:06&#39;,&#39;男&#39;,&#39;北京金燕龙&#39;),(46,&#39;老王&#39;,&#39;2018-03-07 17:37:26&#39;,&#39;男&#39;,&#39;北京&#39;),(48,&#39;小马宝莉&#39;,&#39;2018-03-08 11:44:00&#39;,&#39;女&#39;,&#39;北京修正&#39;);</span><br><span class="line"></span><br><span class="line">-- account表的创建</span><br><span class="line">DROP TABLE IF EXISTS &#96;account&#96;;</span><br><span class="line">CREATE TABLE &#96;account&#96; (</span><br><span class="line">  &#96;ID&#96; int(11) NOT NULL COMMENT &#39;编号&#39;,</span><br><span class="line">  &#96;UID&#96; int(11) default NULL COMMENT &#39;用户编号&#39;,</span><br><span class="line">  &#96;MONEY&#96; double default NULL COMMENT &#39;金额&#39;,</span><br><span class="line">  PRIMARY KEY  (&#96;ID&#96;),</span><br><span class="line">  KEY &#96;FK_Reference_8&#96; (&#96;UID&#96;),</span><br><span class="line">  CONSTRAINT &#96;FK_Reference_8&#96; FOREIGN KEY (&#96;UID&#96;) REFERENCES &#96;user&#96; (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">insert  into &#96;account&#96;(&#96;ID&#96;,&#96;UID&#96;,&#96;MONEY&#96;) values (1,41,1000),(2,45,1000),(3,41,2000);</span><br><span class="line"></span><br><span class="line">-- role表的创建</span><br><span class="line">DROP TABLE IF EXISTS &#96;role&#96;;</span><br><span class="line">CREATE TABLE &#96;role&#96; (</span><br><span class="line">  &#96;ID&#96; int(11) NOT NULL COMMENT &#39;编号&#39;,</span><br><span class="line">  &#96;ROLE_NAME&#96; varchar(30) default NULL COMMENT &#39;角色名称&#39;,</span><br><span class="line">  &#96;ROLE_DESC&#96; varchar(60) default NULL COMMENT &#39;角色描述&#39;,</span><br><span class="line">  PRIMARY KEY  (&#96;ID&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">insert  into &#96;role&#96;(&#96;ID&#96;,&#96;ROLE_NAME&#96;,&#96;ROLE_DESC&#96;) values (1,&#39;院长&#39;,&#39;管理整个学院&#39;),(2,&#39;总裁&#39;,&#39;管理整个公司&#39;),(3,&#39;校长&#39;,&#39;管理整个学校&#39;);</span><br><span class="line"></span><br><span class="line">-- user_role表的创建</span><br><span class="line">DROP TABLE IF EXISTS &#96;user_role&#96;;</span><br><span class="line">CREATE TABLE &#96;user_role&#96; (</span><br><span class="line">  &#96;UID&#96; int(11) NOT NULL COMMENT &#39;用户编号&#39;,</span><br><span class="line">  &#96;RID&#96; int(11) NOT NULL COMMENT &#39;角色编号&#39;,</span><br><span class="line">  PRIMARY KEY  (&#96;UID&#96;,&#96;RID&#96;),</span><br><span class="line">  KEY &#96;FK_Reference_10&#96; (&#96;RID&#96;),</span><br><span class="line">  CONSTRAINT &#96;FK_Reference_10&#96; FOREIGN KEY (&#96;RID&#96;) REFERENCES &#96;role&#96; (&#96;ID&#96;),</span><br><span class="line">  CONSTRAINT &#96;FK_Reference_9&#96; FOREIGN KEY (&#96;UID&#96;) REFERENCES &#96;user&#96; (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line">insert  into &#96;user_role&#96;(&#96;UID&#96;,&#96;RID&#96;) values (41,1),(45,1),(41,2);</span><br></pre></td></tr></table></figure><h2 id="二、Mybatis的注意事项"><a href="#二、Mybatis的注意事项" class="headerlink" title="二、Mybatis的注意事项"></a>二、Mybatis的注意事项</h2><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/06/weQhbF.png" alt="Mybaits入门使用"></p><ul><li>两个配置文件的编写<ul><li><code>config</code>(全局环境<code>Mybatis</code>配置文件)</li><li><code>mapper</code>(映射配置文件) – 要与<code>dao</code>的目录结构相同<ul><li><code>select</code>中的，<code>resultType</code>的作用就是返回封装的位置，如果你要是不写的话，最后<code>mybatis</code>是不知道你到底要封装到哪里，会出现错误，我这个是<code>User</code>表，查询的也是这个，最后返回的结果就封装在<code>User</code>类中 <code>id</code>要写对应<code>dao</code>中的方法名称。</li></ul></li></ul></li></ul><h2 id="三、快速入门-–-实现user表中的全部用户信息的查询"><a href="#三、快速入门-–-实现user表中的全部用户信息的查询" class="headerlink" title="三、快速入门 – 实现user表中的全部用户信息的查询"></a>三、快速入门 – 实现user表中的全部用户信息的查询</h2><h3 id="3-1-实体类编写"><a href="#3-1-实体类编写" class="headerlink" title="3.1 实体类编写"></a>3.1 实体类编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Character sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, Date birthday, Character sex, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略getter和setter方法以及toString()方法的展示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-dao层接口的编写"><a href="#3-2-dao层接口的编写" class="headerlink" title="3.2 dao层接口的编写"></a>3.2 dao层接口的编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-UserMapper-xml配置文件的创建"><a href="#3-3-UserMapper-xml配置文件的创建" class="headerlink" title="3.3 UserMapper.xml配置文件的创建"></a>3.3 UserMapper.xml配置文件的创建</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lizhi.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有，resultType的作用就是返回封装的位置。这里是对User对象进行封装 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"cn.lizhi.domain.User"</span>&gt;</span></span><br><span class="line">        SELECT *FROM user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-测试方法"><a href="#3-4-测试方法" class="headerlink" title="3.4 测试方法"></a>3.4 测试方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 读取mybatis的全局配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        <span class="comment">// 3.使用工厂生产SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">// 4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        UserDao userDao = session.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 5.使用代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>Resources</code>(<code>ibatis</code>)类默认加载<code>resource</code>资源路径下的配置文件。</p><h2 id="四、路径问题与代理dao的方式解析"><a href="#四、路径问题与代理dao的方式解析" class="headerlink" title="四、路径问题与代理dao的方式解析"></a>四、路径问题与代理dao的方式解析</h2><ul><li>绝对路径:<del>d:/xxx/xxx/xml</del>  –&gt; 采用：类加载器，它只能读取类路径的配置文件</li><li>相对路径:<del>src/java/main/xxx.xml</del> (在web项目下没有src目录文件) –&gt; 使用<code>ServletContext</code>对象的<code>getRealPath()</code>获取<code>web</code>下真实运行的类的路径。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.创建SqlSessionFactory工厂</span></span><br><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">SqlSessionFactory factory = builder.build(in);</span><br></pre></td></tr></table></figure><p>以上创建工厂使用了构建者模式。 — <code>builder</code>就是构建者。</p><p><strong>构建者模式:</strong>把对象的创建细节隐藏，是使用者直接调用方法即可拿到对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.使用工厂生产SqlSession对象</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br></pre></td></tr></table></figure><p>通过<code>factory</code>生产<code>SqlSession</code>使用了工厂模式。优势：解耦(降低类之间的依赖关系)。没有用<code>new</code>，不需重新边编译，解决了类之间的依赖关系。通过工厂生产对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">UserDao userDao = session.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>创建<code>Dao</code>接口实现类使用了代理模式。优势:不修改源码的基础上对已有方法增强。</p><h3 id="代理dao的方式解析"><a href="#代理dao的方式解析" class="headerlink" title="代理dao的方式解析"></a>代理dao的方式解析</h3><ol><li>连接数据库信息 – 用于创建<code>connection</code>对象。</li><li>同时在<code>config</code>配置中的有了<code>mapper</code>就有了所需要映射的信息(位置)</li><li>映射到<code>Mapper</code>文件，即可查询到全类名，id(接口方法),sql语句。便能获取到<code>PreparedStatement</code>。</li></ol><p>对以上进行读取配置文件(用到解析XML的技术) – 此处用到的是<code>dom4j</code>解析<code>xml</code>的技术</p><p>继而：</p><ol><li><p>根据配置文件的信息创建Connection对象</p><p>注册驱动，获取连接</p></li><li><p>获取预处理对象PreparedStatement</p><p>此时需要SQL语句 –&gt; 从3中的sql语句中获取</p></li><li><p>执行查询</p></li></ol><blockquote><p>此节涉及源码，待我理解完了，再填上。</p></blockquote><h2 id="五、Mybatis的增删改查"><a href="#五、Mybatis的增删改查" class="headerlink" title="五、Mybatis的增删改查"></a>五、Mybatis的增删改查</h2><p>在<code>Mapper</code>配置文件中，增加配置信息,其中<code>id</code>为接口中的方法名.</p><p>如果在测试类中，自定义方法上<code>@Before</code>表示在测试方法前执行；<code>@After</code>表示在测试方法之后执行。</p><p><code>sqlSession.commit()</code> – 手动提交事务。<code>resultType</code>的指定是在对数据库的结果进行封装时的<strong>返回值类型</strong>，告诉<code>Mybatis</code>应该封装到哪里的参数。<code>parameterType</code>指查询的时候<strong>查询参数类型</strong></p><h3 id="5-1-findAll-–-查找全部用户的信息"><a href="#5-1-findAll-–-查找全部用户的信息" class="headerlink" title="5.1 findAll() – 查找全部用户的信息"></a>5.1 findAll() – 查找全部用户的信息</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span>&gt;</span></span><br><span class="line">        SELECT *FROM user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>resultType</code>为全类名，表示需要封装到的对象。</p><h3 id="5-2-saveUser-–-保存用户信息-插入用户"><a href="#5-2-saveUser-–-保存用户信息-插入用户" class="headerlink" title="5.2 saveUser – 保存用户信息(插入用户)"></a>5.2 saveUser – 保存用户信息(插入用户)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span>&gt;</span></span><br><span class="line">       insert into user(username,address,sex,birthday)values(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>parameterType</code>为提供属性的<code>domain</code>中的对象全类名。<code>values</code>中是写<code>{}</code>是写<code>domain</code>对象中的属性名称。</p><p><strong>如果要想获得当前保存的信息的<code>id</code>，其使用方法是:</strong></p><p><code>select last_insert_id()</code> – 获取最后一条插入语句的<code>id</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- KeyPropery代表要返回的值名称，order:取值为AFTER代表插入后的行为 resultType代表返回值的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">'id'</span> <span class="attr">order</span>=<span class="string">'AFTER'</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    select last_insert_id();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">       insert into user(username,address,sex,birthday)values(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-updateUser-–-更新用户"><a href="#5-3-updateUser-–-更新用户" class="headerlink" title="5.3 updateUser – 更新用户"></a>5.3 updateUser – 更新用户</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span>&gt;</span></span><br><span class="line">       update user set username=#&#123;username&#125;,address=#&#123;address&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125; where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4-deleteUser-–-删除用户"><a href="#5-4-deleteUser-–-删除用户" class="headerlink" title="5.4 deleteUser – 删除用户"></a>5.4 deleteUser – 删除用户</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">delete from user where id=#&#123;uid&#125;; <span class="comment">&lt;!-- 这个id的占位符可以随便写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在删除方法中<code>parameterType</code>只指定id，没有像上面一样指定<code>User</code>对象，是因为，我们这个是只对表进行操作，没有经过<code>User</code>对象的取值或使用(即在delete中，指定了我所要删除的是哪张表，并指定了id，那么我就可以通过这两项信息去定位到我所要删除的那条记录)。</p><h3 id="5-5-findById-–-根据用户id查询一条记录"><a href="#5-5-findById-–-根据用户id查询一条记录" class="headerlink" title="5.5 findById – 根据用户id查询一条记录"></a>5.5 findById – 根据用户id查询一条记录</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span>&gt;</span></span><br><span class="line">        SELECT *FROM user where id=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-6-findByName-–-模糊查询"><a href="#5-6-findByName-–-模糊查询" class="headerlink" title="5.6 findByName – 模糊查询"></a>5.6 findByName – 模糊查询</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span>&gt;</span></span><br><span class="line">        SELECT *FROM user where username like #&#123;name&#125;;</span><br><span class="line">    或者</span><br><span class="line">    SELECT *FROM user where username like '%$&#123;value&#125;%'; <span class="comment">&lt;!-- value是固定写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在进行<code>MyBatis</code>时的模糊查询时，通配符需要需要设置在参数中，即和查询的参数组成字符串，而不是将通配符写在<code>mapper</code>配置文件中。推荐用第一种，预编译可防止<code>SQL</code>注入。</p><h3 id="5-7-findTotal-–-聚合函数的使用"><a href="#5-7-findTotal-–-聚合函数的使用" class="headerlink" title="5.7 findTotal – 聚合函数的使用"></a>5.7 findTotal – 聚合函数的使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotal"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        SELECT count(id) FROM user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、MyBatis的参数深入"><a href="#六、MyBatis的参数深入" class="headerlink" title="六、MyBatis的参数深入"></a>六、MyBatis的参数深入</h2><h3 id="6-1-parameterType-查询参数的输入类型"><a href="#6-1-parameterType-查询参数的输入类型" class="headerlink" title="6.1 parameterType(查询参数的输入类型)"></a>6.1 parameterType(查询参数的输入类型)</h3><ol><li><p><code>Integer</code>,<code>String</code>等简单类型</p></li><li><p>OGNL表达式 Object Graphic Navigation Language</p><p>通过对象的取值方法来获取数组，在写法上将<code>get</code>省去。</p><p>例如获取用户的名称：</p><p>​    类中的写法:user.getUsername();</p><p>​    OGNL表达式写法:user.username;</p><p>Mybatis中能直接写<code>username</code>,而不用<code>user.</code>的原因是：</p><p>​        因为在parameterType中已经提供了属性所属的类，所以此时不需要写对象名。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"c"</span>&gt;</span></span><br><span class="line">       update user set username=#&#123;username&#125;,address=#&#123;address&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125; where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        上面的参数都是直接写属性名称，而没有通过<code>对象.属性</code>的方式进行获取值<code>username=#{username},address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id}</code></p><p>这里的用处：当我们的查询条件被封装成一个对象时，就需要采用OGNL表达式。</p><p>例如封装了一个对象<code>QueryVo</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时将<code>QueryVo</code>作为查询对象时，<code>mapper</code>配置文件应该写成:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByVo"</span> <span class="attr">parameterType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span>&gt;</span></span><br><span class="line">select * from user where username like #&#123;user.username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>{user.username}</code>的解释，根据上面的解释，我们知道<code>user</code>是<code>QueryVo</code>类的一个属性，我们可以直接获取属性，而<code>username</code>是<code>user</code>类的属性，所以可以继而通过<code>对象.属性</code>(继续对ONGL表达式的嵌套使用)的方式获取。</p><p><strong>以上这种适用于由多个对象组成的查询条件，实现对数据库的进行查询</strong></p></li><li><p>传递<code>pojo</code>对象</p><p><code>Mybatis</code>使用<code>ognl</code>表达式解析对象字段的值，<code>#{}</code>或者<code>${}</code>括号中的值为<code>pojo</code>属性名称。</p><p>其中对<code>pojo</code>和<code>javaBean</code>两者的区别，参考链接:<a href="https://www.jianshu.com/p/224489dfdec8" target="_blank" rel="noopener">java对象 POJO和JavaBean的区别</a>。可以简单的把<code>pojo</code>理解为我们定义的实体类。</p></li><li><p>传递<code>pojo</code>包装对象</p><p>开发中通过<code>pojo</code>传递查询条件，查询条件时综合的查询条件，不仅包括用户查询条件还包含其它的查询条件(比如将用户购买商品信息也作为查询条件),这时可以使用包装对象传递输入参数。<code>Pojo</code>类中包含<code>pojo</code>.</p><p>例如上面的：根据用户名查询用户信息，查询条件放到<code>QueryVo</code>的<code>user</code>属性中。</p></li></ol><h3 id="6-2-resultType-输出类型"><a href="#6-2-resultType-输出类型" class="headerlink" title="6.2 resultType(输出类型)"></a>6.2 resultType(输出类型)</h3><ol><li>可以输出<code>Integer</code>、<code>String</code>等简单类型</li><li><code>pojo</code>对象</li><li><code>pojo</code>列表</li></ol><ul><li><p>问题一</p><p>在属性和<code>Mysql</code>数据库表中字段不统一时，会无法进行封装。</p><p><strong>注意:</strong><code>windows</code>下的<code>MySQL</code>不区分大小写；<code>Linux</code>下的<code>MySQL</code>严格区分大小写。</p><p>解决方式：</p><ul><li><p>在<code>Mapper</code>配置文件中的<code>sql</code>语句中对操作字段起别名。别名和<code>pojo</code>中的属性名称相同。</p><p>例如: <code>select id as userId,username as userName,address as userAddress,sex as UserSex from user;</code></p><p>这种方式运行效率最高，因为在数据库层面进行了解决，速度更快。</p></li><li><p>配置查询结果的列名和实体类的属性名的对应关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主键字段的对应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非主键字段的对应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userAddress"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>id</code>:唯一标志 – 随便填写。用于<code>select</code>、<code>insert</code>、<code>delete</code>等配置的类型映射。</p><p><code>type</code>:查询的实体类，所对应的实体类是哪一个 – 全类名</p><p>举例使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">select * from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即将以前的<code>resultType</code>替换成<code>resultMap</code>，值匹配<code>resultMap</code>配置中的<code>id</code>，这样就能够进行映射匹配。</p><p>这种方式能够提升开发效率。</p></li></ul></li></ul><h4 id="6-3-配置别名文件"><a href="#6-3-配置别名文件" class="headerlink" title="6.3 配置别名文件"></a>6.3 配置别名文件</h4><ol><li><code>typeAliases</code>配置别名，用于配置<code>domain</code>中类的别名 – 指定实体类别名</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>typeAlias</code>用于配置别名。<code>type</code>属性指定的是实体类全限定类名。<code>alias</code>属性指定别名，当指定了别名就不再区分大小写。</p><ol start="2"><li><code>package</code>用于指定要配置别名的包，当指定后，该包下的实体类都会注册别名，并且类名就是别名，不再区分大小写。 – 指定实体类别名</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lizhi.mybatis_01.domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>作用于接口，<code>package</code>标签是用于指定<code>dao</code>接口所在的包，当指定了之后，就不需要再写mapper以及<code>resource</code>或者<code>class</code>.</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- package标签是用于指定dao接口所在的包，当指定了之后，就不需要再写mapper以及resource或者class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.lizhi.mybatis_01.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、Mybatis实现Dao层的开发"><a href="#七、Mybatis实现Dao层的开发" class="headerlink" title="七、Mybatis实现Dao层的开发"></a>七、Mybatis实现Dao层的开发</h2><h3 id="7-1-Dao实现类的使用"><a href="#7-1-Dao实现类的使用" class="headerlink" title="7.1 Dao实现类的使用"></a>7.1 Dao实现类的使用</h3><p>  由于是自己写实现类，所以就不需要代理对象对我们的方法进行增强。</p><p>  首先实现类的方法：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory factory)</span> </span>&#123; <span class="comment">// 保证我们的factory中有值,通过构造方法将配置文件读取</span></span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        List&lt;User&gt; user = session.selectList(<span class="string">"cn.lizhi.mybatis_01.dao.UserDao.findAll"</span>);<span class="comment">// 配置文件中namespace+id</span></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  测试类:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       InputStream is = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">       SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">       SqlSessionFactory factory = builder.build(is);</span><br><span class="line">       UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl(factory);</span><br><span class="line">       List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">       <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">       is.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-session中各种操作数据库语句"><a href="#7-2-session中各种操作数据库语句" class="headerlink" title="7.2 session中各种操作数据库语句"></a>7.2 session中各种操作数据库语句</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存方法</span></span><br><span class="line">session.insert(<span class="string">"namespace+id"</span>,Object)</span><br><span class="line"><span class="comment">// 更新操作</span></span><br><span class="line">session.update(<span class="string">"namespace+id"</span>,Object)</span><br><span class="line"><span class="comment">// 删除操作</span></span><br><span class="line">session.delete(<span class="string">"namespace+id"</span>,Integer id)</span><br><span class="line"><span class="comment">// 单条查询</span></span><br><span class="line">session.selectOne(<span class="string">"namespace+id"</span>,Integer id)</span><br><span class="line"><span class="comment">// 聚合函数</span></span><br><span class="line">session.selectOne(<span class="string">"namespace+id"</span>)</span><br></pre></td></tr></table></figure><h3 id="7-3-源码分析"><a href="#7-3-源码分析" class="headerlink" title="7.3 源码分析"></a>7.3 源码分析</h3><ul><li><p><code>PreparedStatement</code>对象的执行方法</p><ul><li><code>execute</code>:执行<code>CRUD</code>中的任意一种语句。它的返回值是一个<code>boolean</code>类型，表示是否有结果集。有结果集是<code>true</code>,没有结果集是<code>false</code>。</li><li><code>executeUpdate</code>:只能执行<code>CUD</code>语句，查询语句无法执行。他的返回值是影响数据库记录的记录数。</li><li><code>executeQuery</code>:只能执行<code>select</code>语句，无法执行增删改。执行结果封装的结果集<code>ResultSet</code>对象。</li></ul></li></ul><blockquote><p>以后再补上…</p></blockquote><h2 id="八、Mybatis连接池与事务相关"><a href="#八、Mybatis连接池与事务相关" class="headerlink" title="八、Mybatis连接池与事务相关"></a>八、Mybatis连接池与事务相关</h2><p>连接池介绍：可以减少我们获取连接所消耗的时间。用于存储连接的一个容器。</p><ul><li>容器其实就是一个集合对象，该集合必须是线程安全的，不能两个线程拿到同一连接。该集合还必须实现队列的特性 – 先进先出</li></ul><h3 id="8-1-Mybatis连接池"><a href="#8-1-Mybatis连接池" class="headerlink" title="8.1 Mybatis连接池"></a>8.1 Mybatis连接池</h3><p>配置位置：</p><ul><li><p>主配置文件<code>SqlMapConfig.xml</code>中的<code>dataSource</code>标签，<code>type</code>属性就是表示采用何种连接池方式。</p></li><li><p><code>type</code>属性：</p><ul><li><p><code>POOLED</code>:采用传统的<code>javax.sql.DataSource</code>规范中的连接池,<code>Mybatis</code>中有针对规范的实现(每次从池中获取连接，连接完以后归还)</p></li><li><p><code>UNPOOLED</code>:采用传统的获取连接的方式，虽然也实现<code>Javax.sql.DataSource</code>接口，但是并没有实现池的思想(每次创建一个连接来使用)</p></li><li><p><code>JNDI</code>:采用服务器提供的<code>JNDI</code>技术实现，来获取<code>DataSource</code>对象，不同的服务器所能拿到<code>DataSource</code>是不一样的。</p><p><strong>注意：</strong>如果不是<code>web</code>或者<code>maven</code>的<code>war</code>工程，是不能使用的。</p><p>这里采用<code>dbcp</code>连接池。</p></li></ul></li></ul><p><code>Mybaits POOLED</code>的连接池原理:</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/06/weleaQ.jpg" alt="连接池源代码"></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/06/weltIJ.png" alt="mybatis_pooled的过程"></p><h3 id="8-2-事务"><a href="#8-2-事务" class="headerlink" title="8.2 事务"></a>8.2 事务</h3><p>解决4个问题</p><ol><li>什么是事务</li><li>事务的四大特性<code>ACID</code></li><li>不考虑隔离性会产生的3个问题</li><li>解决办法：四种隔离级别</li></ol><p><code>Mybatis</code>底层实现还是借用<code>JDBC</code>。</p><h2 id="九、Mybatis动态sql"><a href="#九、Mybatis动态sql" class="headerlink" title="九、Mybatis动态sql"></a>九、Mybatis动态sql</h2><h3 id="9-1-动态查询"><a href="#9-1-动态查询" class="headerlink" title="9.1 动态查询"></a>9.1 动态查询</h3><p>动态查询(组合查询) – 查询条件不确定有没有的情况.</p><p>查询条件:可以根据<code>username</code>、<code>gender</code>、<code>age</code>等多条件组合查询</p><p><code>Mapper</code>中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据条件进行查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"方法名"</span> <span class="attr">resultType</span>=<span class="string">"返回值类型"</span> <span class="attr">parameterType</span>=<span class="string">"查询的参数类型"</span>&gt;</span></span><br><span class="line">select * from user where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null（条件1）"</span>&gt;</span> <span class="comment">&lt;!-- username是对应的实体类属性名(判断是否提供了这个查询条件的参数值)  --&gt;</span></span><br><span class="line">    and username = #&#123;username&#125;  <span class="comment">&lt;!-- 左边是数据库column字段名称，右边是实体类属性名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"（条件2）"</span>&gt;</span></span><br><span class="line">    and sex = #&#123;sex&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"（条件3）"</span>&gt;</span></span><br><span class="line">    and age = #&#123;age&#125; <span class="comment">&lt;!-- 注意属性名和字段名对应问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- where 标签可以省略 初始条件的 where --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"方法名"</span> <span class="attr">resultType</span>=<span class="string">"返回值类型"</span> <span class="attr">parameterType</span>=<span class="string">"查询的参数类型"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"（条件1）"</span>&gt;</span></span><br><span class="line">           and username = #&#123;username&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"（条件2）"</span>&gt;</span></span><br><span class="line">           and sex = #&#123;sex&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"（条件3）"</span>&gt;</span></span><br><span class="line">           and age = #&#123;age&#125; <span class="comment">&lt;!-- 注意属性名和字段名对应问题 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       ...    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据可能提供的条件，进行组合查询(这些条件可能存在也可能不存在)，例如：</p><p>主查询代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       User user = <span class="keyword">new</span> User();</span><br><span class="line">       user.setUsername(<span class="string">"Tom"</span>); <span class="comment">// 查询出所有叫Tom的记录，提供的查询条件只有"Tom"</span></span><br><span class="line">       List&lt;User&gt; users = userDao.findUserByCondition(user);</span><br><span class="line">       <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">           System.out.println(u);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对应表的配置文件查询:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByCondition"</span> <span class="attr">parameterType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span> <span class="attr">resultType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">                and username=#&#123;username&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null"</span>&gt;</span></span><br><span class="line">                and sex=#&#123;sex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span></span><br><span class="line">                and address=#&#123;address&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span></span><br><span class="line">                and address=#&#123;address&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"birthday != null"</span>&gt;</span></span><br><span class="line">                and birthday=#&#123;birthday&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-2-子查询"><a href="#9-2-子查询" class="headerlink" title="9.2 子查询"></a>9.2 子查询</h3><p><strong>子查询</strong>：根据被封装对象(例如queryvo)的<code>id</code>集合，查询用户信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据queryvo中的Id集合实现查询用户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserInIds"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span> <span class="attr">parameterType</span>=<span class="string">"queryvo"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids !=null and ids.size()&gt;0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>(代表一个集合)=<span class="string">"ids"</span> <span class="attr">open</span>=<span class="string">"and id in ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"uid(集合中每个元素的代称)"</span> <span class="attr">separator</span>(每一项的分隔符)=<span class="string">","</span>&gt;</span> <span class="comment">&lt;!-- 查询出id在集合中的全部条目 --&gt;</span> </span><br><span class="line">            #&#123;uid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 属性解释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span>&gt;</span>:标签用于遍历集合，它的属性：</span><br><span class="line">collection:代表要遍历的集合元素，注意编写时不要写#&#123;&#125;</span><br><span class="line">open:代表语句的开始部分</span><br><span class="line">close:代表结束部分</span><br><span class="line">item:代表遍历集合的每个元素，生成的变量名</span><br><span class="line">sperator:代表分隔符</span><br></pre></td></tr></table></figure><h2 id="十、Mybatis中的多表查询"><a href="#十、Mybatis中的多表查询" class="headerlink" title="十、Mybatis中的多表查询"></a>十、Mybatis中的多表查询</h2><p>示例：用户和账户</p><ul><li>一个用户可以有多个账户(一对多)</li><li>一个账户只能属于一个用户 (多个账户也可以属于同一个用户；一对一或者多对一)</li></ul><p>步骤：</p><ol><li><p>建立两张表：用户表、账户表</p><p>让用户表和账户表之间具备一对多的关系：需要使用外键在账户表中添加</p></li><li><p>建立两个实体类：用户实体类和账户实体类</p><p>让用户和账户的实体类能体现出一对多的关系</p></li><li><p>建立<strong>两个配置文件</strong></p><ul><li>用户的配置文件</li><li>账户的配置文件</li></ul><p><strong>注意:</strong>一张数据库表对应一个实体类且对应一个配置文件，并在相应的配置文件中进行配置操作。</p></li><li><p>实现配置</p><ul><li>当我们查询用户时，可以同时得到用户下所包含的账户信息</li><li>当我们查询账户时，可以同时得到账户的所属用户信息</li></ul></li><li><p>一的一方是主表；多的一方是主表。</p></li></ol><h3 id="10-1-Mybatis一对一的查询"><a href="#10-1-Mybatis一对一的查询" class="headerlink" title="10.1 Mybatis一对一的查询"></a>10.1 Mybatis一对一的查询</h3><p><strong>查询所有账户同时包含用户名和地址信息</strong></p><p>方式一:新建子类对象<code>accountUser</code>继承<code>account</code></p><p><code>accountUser</code>实体类中包含需要展示的<code>User</code>实体类中的信息，例如需要展示<code>username</code>，<code>address</code>。那么<code>accountUser</code>定义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountUser</span> <span class="keyword">extends</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   省略了getter与setter方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString()+<span class="string">"AccountUser&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mapper</code>中配置的查询信息 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新建子类对象accountUsr继承account --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllAccount"</span> <span class="attr">resultType</span>=<span class="string">"accountUser"</span>&gt;</span></span><br><span class="line">select 所要查询的字段 from 表1，表2 where 表1.字段 = 表2.字段   <span class="comment">&lt;!-- 组合查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体使用，创建<code>AccountMap.xml</code>配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.lizhi.dao.AccountDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有，resultType的作用就是返回封装的位置。这里是对User对象进行封装 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllAccount"</span> <span class="attr">resultType</span>=<span class="string">"cn.lizhi.domain.AccountUser"</span>&gt;</span></span><br><span class="line">        SELECT u.*,a.* from user u,account a where u.id=a.UID;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;AccountUser&gt; allAccount = accountDao.findAllAccount();</span><br><span class="line">    <span class="keyword">for</span> (AccountUser accountUser : allAccount) &#123;</span><br><span class="line">        System.out.println(accountUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Account&#123;id&#x3D;41, uid&#x3D;41, money&#x3D;1000.0, user&#x3D;null&#125;AccountUser&#123;username&#x3D;&#39;老王&#39;, address&#x3D;&#39;北京&#39;&#125;</span><br><span class="line">Account&#123;id&#x3D;45, uid&#x3D;45, money&#x3D;1000.0, user&#x3D;null&#125;AccountUser&#123;username&#x3D;&#39;传智播客&#39;, address&#x3D;&#39;北京金燕龙&#39;&#125;</span><br><span class="line">Account&#123;id&#x3D;41, uid&#x3D;41, money&#x3D;2000.0, user&#x3D;null&#125;AccountUser&#123;username&#x3D;&#39;老王&#39;, address&#x3D;&#39;北京&#39;&#125;</span><br></pre></td></tr></table></figure><p><strong>方式二:定义封装<code>account</code>和<code>user</code>的<code>resultMap</code></strong></p><p>例如在从表<code>domain</code>中<code>Account</code>的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user; <span class="comment">// 这里从表中包含了主表实体的对象引用</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   省略了getter与setter方法   </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", uid="</span> + uid +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Mybatis</code>中<strong>多对一</strong>或<strong>一对一</strong>中，从表的实体类和主表的实体类关系：<strong>从表实体应该包含主表实体的对象应用</strong>。</p><p>定义封装<code>account</code>和<code>user</code>的<code>resultMap</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义封装account和user的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span> <span class="comment">&lt;!-- type表明从表封装的对象 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 先写从表的信息 配置account信息的封装--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主键信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"aid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非主键信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主表信息 一对一的关系映射:配置封装user的内容 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多对一的关系, property: 指的是属性的值(account中),column:指通过哪一个字段进行获取属性值，这里选择uid(外键), javaType：指的是属性的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span> <span class="comment">&lt;!-- javaType表明从表中主表实体需要封装的对象(因为配置了别名，所以这里没有写全类名) --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 主键信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">'id'</span> <span class="attr">column</span>=<span class="string">'id'</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 非主键字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查询所有，一对一的查询(在查询账户时，也会查询出用户信息)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">select 所要查询的字段 from 表1，表2 where 表1.字段 = 表2.字段   <span class="comment">&lt;!-- 组合查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用左外连接的查询语句，通过此种方式，其输出结果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">    SELECT * from account left outer join user on user.id=account.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-2-Mybatis一对多的查询"><a href="#10-2-Mybatis一对多的查询" class="headerlink" title="10.2 Mybatis一对多的查询"></a>10.2 Mybatis一对多的查询</h3><p><strong>一对多映射:主表实体应该包含从表实体的集合引用。</strong></p><p><code>Domain</code>中<code>User</code>加入从表实体的集合引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line">   <span class="keyword">private</span> String Username;</span><br><span class="line">   <span class="keyword">private</span> Date birthday;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Account&gt; accounts; <span class="comment">// 加入的从表实体集合</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> accounts;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccounts</span><span class="params">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.accounts = accounts;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">其余属性的getter与setter方法省略，以及toString()方法的省略</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对应的<code>mapper</code>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义封装User的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span> <span class="comment">&lt;!-- type表明主表封装的对象 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主键信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">'id'</span> <span class="attr">column</span>=<span class="string">'id'</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 非主键字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置user对象中accounts集合的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span>&gt;</span> <span class="comment">&lt;!-- ofType写集合中元素的对象类型(因为配置了别名，所以这里没有写全类名) --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 主键信息 以下property是java domain的属性，column是数据库列名(可以用别名代替) --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"aid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 非主键信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">数据库中的查询语句   <span class="comment">&lt;!-- 组合查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>resultMap</code>中，需要注意两个<code>id</code>中是否存在<code>column</code>重名的情况，如果相同将其中一个进行修改(查询数据库时起别名)。查询时，建议将所有字段内容都查询出，便于对对象的封装(对象的封装的内容就是来源于查询的内容返回的内容,<code>property</code>与<code>column</code>对应)。</p><h3 id="10-3-Mybatis-多对多查询"><a href="#10-3-Mybatis-多对多查询" class="headerlink" title="10.3 Mybatis 多对多查询"></a>10.3 Mybatis 多对多查询</h3><p>实例：用户和角色</p><ul><li>一个用户可以有多个角色</li><li>一个角色可以赋予多个用户</li></ul><p><strong>步骤:</strong></p><ol><li><p>建立两张表：用户表、角色表</p><p>让用户表和角色表之间具备多对多的关系：需要使用中间表，中间表包含各自的主键，在中间表中是外键。</p></li><li><p>建立两个实体类：用户实体类和角色实体类</p><p>让用户和角色的实体类能体现出多对多的关系</p><p><strong>各自包含对方一个集合引用</strong></p></li><li><p>建立<strong>两个配置文件</strong></p><ul><li>用户的配置文件</li><li>角色的配置文件</li></ul></li><li><p>实现配置</p><ul><li>当我们查询用户时，可以同时得到用户下所包含的角色信息</li><li>当我们查询角色时，可以同时得到角色的所赋予的用户信息</li></ul></li></ol><p>两个实体类中各自加入多对多的实体关系映射。</p><p><strong>第一种：</strong>查询所有角色，同时获取角色的所赋予的用户。即：在查询角色时，同时获取到它的全部用户信息。</p><p>以中间表作为连接的媒介。确定出查询角色时，同时获取角色下的全部用户信息(可以简单的看成一对多的查询关系)。这里角色表作为主表(用左外连接，保存主表的全部信息)</p><p><code>Mapper</code>配置同一对多。</p><p><strong>第二种：</strong>查询所有的用户，同时获取用户的所拥有的角色。</p><ul><li>思路同第一种</li></ul><h3 id="10-4-JNDI补充"><a href="#10-4-JNDI补充" class="headerlink" title="10.4 JNDI补充"></a>10.4 JNDI补充</h3><p>模仿<code>windows</code>的注册表。</p><p>插图</p><ol><li><p>创建<code>Maven</code>的<code>war</code>工程。</p></li><li><p>在<code>webapp</code>下创建<code>META-INF</code>,将<code>context.xml</code>方入此目录下。</p></li><li><p>替换原有的<code>SqlMapConfig</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入约束 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  </span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span>  </span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itheima.domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mybatis的环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mysql的环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务控制的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置连接数据库的必备信息  type属性表示是否使用数据源（连接池）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"JNDI"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"data_source"</span> <span class="attr">value</span>=<span class="string">"java:comp/env/jdbc/eesy_mybatis"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定mapper配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/itheima/dao/IUserDao.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将之前的测试方法写在<code>jsp</code>的java代码块中。</p><p>原因是有<code>tomcat</code>服务器进行，将<code>.jsp</code>翻译成.<code>java</code>再进行编译，运行字节码文件，进而使用<code>tomcat</code>服务器内部的资源连接池再通过<code>Mybatis</code>访问数据库。</p></li></ol><h2 id="十一、Mybatis缓存相关"><a href="#十一、Mybatis缓存相关" class="headerlink" title="十一、Mybatis缓存相关"></a>十一、Mybatis缓存相关</h2><h3 id="11-1-Mybatis中的延迟加载"><a href="#11-1-Mybatis中的延迟加载" class="headerlink" title="11.1 Mybatis中的延迟加载"></a>11.1 Mybatis中的延迟加载</h3><p><strong>问题:</strong></p><p>在一对多中，当我们有一个用户，它有100个账户。(用户对象-user;accounts(集合,size=100))</p><p><strong>问：</strong>在查询用户的时候，要不要把关联的账户查询出来？</p><p><strong>答：</strong>在查询用户时，用户下的账户信息应该是，什么时候使用，什么时候查询的。</p><p><strong>问：</strong>在查询账户的时候，要不要把关联的用户查询出来？</p><p><strong>答：</strong>在查询用户时，账户的所属用户信息应该是随着账户查询时一起查询出来。</p><p><strong>延迟加载：</strong>在真正使用数据时才发起查询，不用的时候不查询。按需加载(懒加载)。</p><p><strong>立即加载：</strong>无论是否使用，只要一调用方法，马上发起查询。</p><p>在对应的四种表关系中：一对多，多对一，一对一，多对多</p><ul><li>一对多，多对多：通常情况下都采用延迟加载。</li><li>多对一，一对一：通常情况下采用立即加载。</li></ul><h4 id="11-1-1-一对一-association"><a href="#11-1-1-一对一-association" class="headerlink" title="11.1.1 一对一(association)"></a>11.1.1 一对一(association)</h4><p>延迟加载：</p><p>全局配置文件需设置</p><ul><li><code>lazyLoadingEnabled</code>:<code>true</code></li><li><code>aggressiveLazyLoading</code>:<code>false</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mybatis全局延迟加载的开关，true表示打开--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>mapper</code>的配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一对一的查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountUserMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">proerty</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"user"</span> <span class="attr">select</span>=<span class="string">"cn.lizhi.mybatis_01.dao.UserDao.findById"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>select属性</code>:查询用户的唯一标识，这个例子中是关联信息的主键<code>id</code>。例如这里<code>account</code>表中的<code>uid</code>对应着<code>user</code>表中的<code>id</code>。所以我们要使得<code>uid</code>和<code>id</code>进行匹配，故在user中的唯一标识就是<code>id</code>。反之，如果我们通过查询<code>user</code>表同时将其关联的<code>account</code>表的信息一并查出，此时<code>user</code>表中的<code>id</code>对应着<code>account</code>表中的<code>uid</code>，那么<code>uid</code>便是所要查询的关联表的唯一标识。</p><p>这里对唯一标识的理解是两个表之间相关联的字段。</p><p><code>column属性</code>:查询用户是根据id查询，而id对应的是<code>account</code>表中的<code>uid</code>，所需要的参数的值(外键）- 根据当前表中的uid去查询user表的记录(对应到user表中的主键)。即，拿着当前表的uid(外键),去user表中匹配主键，查询出记录。</p><p><code>cn.lizhi.mybatis_01.dao.UserDao.findById</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>cn.lizhi.mybatis_01.dao.AccountDao.findAllByCount</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllByCount"</span> <span class="attr">resultMap</span>=<span class="string">"accountUserMap"</span>&gt;</span></span><br><span class="line">        select * from account</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上可以实现懒加载。</p><h4 id="11-1-2-一对多-Collection"><a href="#11-1-2-一对多-Collection" class="headerlink" title="11.1.2 一对多(Collection)"></a>11.1.2 一对多(Collection)</h4><p>使用方法同上:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一对多的查询 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">'id'</span> <span class="attr">column</span>=<span class="string">'id'</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"account"</span> <span class="attr">select</span>=<span class="string">"cn.lizhi.mybatis_01.dao.AccountDao.findAccountByUid"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span> </span><br><span class="line">           <span class="comment">&lt;!-- select中uid是唯一标识(因为user中的id对应这account中的uid)。这里column写id是因为通过用户的id去查询Account表中的信息(对应account表中的uid) --&gt;</span>        </span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>延迟加载的两点:</p><ul><li><code>mapper</code>中内容的填写。即<code>sql</code>语句的写法,<code>resultMap</code>中标签的写法。</li><li>开启全局配置文件的懒加载</li></ul><h3 id="11-2-Mybatis中的一级缓存"><a href="#11-2-Mybatis中的一级缓存" class="headerlink" title="11.2 Mybatis中的一级缓存"></a>11.2 Mybatis中的一级缓存</h3><p>指的是<code>Mybatis</code>中<code>SqlSession</code>对象的缓存。当我们执行查询之后，查询的结果会同时存入到<code>SqlSession</code>为我们提供一块区域中。该区域的结构是一个<code>Map</code>。当我们再次查询同样的数据，<code>Mybatis</code>会先去<code>SqlSession</code>中查询是否有，有的话直接拿出来用。当<code>SqlSession</code>对象消失时，<code>Mybatis</code>的一级缓存也就消失了。</p><p>默认开启了一级缓存。当<code>SqlSession</code>关闭(<code>sqlSession.close()</code>)时，缓存会自动消失。</p><p>同时<code>sqlSession.clearCache()</code>,也可以清楚缓存。</p><p>当数据库中的内容和缓存中数据不同时，<code>Mybatis</code>的做法：</p><p>一级缓存是<code>SqlSession</code>范围的缓存，当调用<code>SqlSession</code>的修改，添加，修改，<code>commit()</code>，<code>close()</code>等方法时，就会清空一级缓存，直接从数据库中查询，并将查询的记录添加入缓存当中。</p><h3 id="11-3-Mybatis中的二级缓存"><a href="#11-3-Mybatis中的二级缓存" class="headerlink" title="11.3 Mybatis中的二级缓存"></a>11.3 Mybatis中的二级缓存</h3><p>指的是<code>Mybatis</code>中<code>SqlSessionFactory</code>对象的缓存。由同一个<code>SqlSessionFactory</code>对象创建的<code>SqlSession</code>共享其缓存。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/06/wel6de.png" alt="二级缓存"></p><p>二级缓存的使用步骤：</p><p>第一步：让<code>Mybatis</code>框架支持二级缓存(在<code>SqlMapConfig.xml</code>中配置，可以不用配置，默认是开启状态)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：让当前的映射文件支持二级缓存(在<code>UserDao.xml</code>中配置)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启user支持二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>第三部：让当前的操作支持二级缓存(在<code>select</code>标签中配置，配置<code>userCache</code>值为<code>true</code>)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"cn.lizhi.mybatis_01.domain.User"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二级缓存中存放的内容是数据(<code>json</code>数据)，而不是对象。当发起查询时，创建一个新的对象，然后将二级缓存中的数据填充到对象当中，所以前后两次查询中对象不同。</p><h2 id="十二、Mybatis的注解开发"><a href="#十二、Mybatis的注解开发" class="headerlink" title="十二、Mybatis的注解开发"></a>十二、Mybatis的注解开发</h2><p><code>&lt;packaging&gt;jar&lt;/packaging&gt;</code></p><p>在<code>Mybatis</code>中针对<code>CRUD</code>的四个注解：</p><p><code>@Select</code>、<code>@Insert</code>、<code>@Update</code>、<code>@Delete</code></p><p>在对应的<code>Dao</code>方法中直接写上对应的注解，注解中(<code>@Select)</code>写入操作数据库的语句即可。</p><p>注意：<code>dao.XML</code>配置文件会和注解产生冲突。故不能混用(<code>dao.xml</code>配置文件存放到其他地方或者不用)</p><h3 id="12-1-Mybatis中的属性与字段不一致解决办法"><a href="#12-1-Mybatis中的属性与字段不一致解决办法" class="headerlink" title="12.1 Mybatis中的属性与字段不一致解决办法"></a>12.1 Mybatis中的属性与字段不一致解决办法</h3><p>使用注解<code>@Results</code></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Results</span>(id=<span class="string">"userMap"</span>,value=&#123;</span><br><span class="line"><span class="meta">@Result</span>(id=<span class="keyword">true</span>,cloumn=<span class="string">"id"</span>,property=<span class="string">"userId"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(cloumn=<span class="string">"username"</span>,property=<span class="string">"userName"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(cloumn=<span class="string">"address"</span>,property=<span class="string">"userAddress"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(cloumn=<span class="string">"sex"</span>,property=<span class="string">"userSex"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>id</code>用于表示是否是主键,默认值是<code>false</code>。外部的<code>id=&quot;userMap&quot;</code>，用于指定唯一标识，可以让其他的注解进行复用。</p><p>如果需要让当前<code>dao</code>下其他的方法也能使用，指定注解<code>@ResultMap</code>.即:<code>@ResultMap(&quot;userMap&quot;)</code>,其中为数组类型，可以指定多个,例如：<code>@ResultMap(value={&quot;userMap&quot;,...})</code>。可以理解为对应在<code>dao.xml</code>配置文件中的<code>resultMap</code>。</p><h3 id="12-2-Mybatis中的多表查询-–-注解方式"><a href="#12-2-Mybatis中的多表查询-–-注解方式" class="headerlink" title="12.2 Mybatis中的多表查询 – 注解方式"></a>12.2 Mybatis中的多表查询 – 注解方式</h3><h4 id="12-2-1-一对一"><a href="#12-2-1-一对一" class="headerlink" title="12.2.1 一对一"></a>12.2.1 一对一</h4><p>思想同<code>dao.xml</code>一样。通过配置<code>@Results</code>注解实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from account"</span>) </span><br><span class="line"><span class="meta">@Results</span>(id=<span class="string">"accountMap"</span>,value=&#123;</span><br><span class="line"><span class="meta">@Result</span>(id=<span class="keyword">true</span>,cloumn=<span class="string">"id"</span>,property=<span class="string">"Id"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(cloumn=<span class="string">"uid"</span>,property=<span class="string">"uid"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(cloumn=<span class="string">"money"</span>,property=<span class="string">"money"</span>),</span><br><span class="line">    <span class="comment">// 以上完成了对account类对象的封装,下面是完成对User类对象的封装</span></span><br><span class="line">    <span class="meta">@Result</span>(property=<span class="string">"user"</span>,column=<span class="string">"uid"</span>,one=<span class="meta">@One</span>(select=<span class="string">"全限定类名.方法名"</span>,fetchType = FetchType.EAGER(加载方式)))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>select</code>是指向如何查询封装对象的唯一标识 – 全限定类名.方法名。由于<code>select</code>直接定位到方法名，查询到具体的对象，所以在<code>@Select</code>语句中只查询了<code>account</code>(<code>account</code>中包含了<code>user</code>的属性,且在下方的注解中指定了<code>uid</code>去查询对应的<code>user</code>对象，进行封装) ，<strong>注解的方式包含了加载的方式，故采用这种查询方式</strong>。</p><h4 id="12-2-2-一对多"><a href="#12-2-2-一对多" class="headerlink" title="12.2.2 一对多"></a>12.2.2 一对多</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="meta">@Results</span>(id=<span class="string">"userMap"</span>,value=&#123;</span><br><span class="line"><span class="meta">@Result</span>(id=<span class="keyword">true</span>,cloumn=<span class="string">"id"</span>,property=<span class="string">"id"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(cloumn=<span class="string">"username"</span>,property=<span class="string">"name"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(cloumn=<span class="string">"address"</span>,property=<span class="string">"address"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(cloumn=<span class="string">"sex"</span>,property=<span class="string">"sex"</span>)</span><br><span class="line">    <span class="comment">// 以上完成对user对象的封装，下方是account集合，继而封装account对象</span></span><br><span class="line">    <span class="meta">@Result</span>(property=<span class="string">"accounts"</span>,column=<span class="string">"id"</span>,many=<span class="meta">@Many</span>(select=<span class="string">"全限定类名.方法名"</span>,fetchType = FetchType.LAZY(加载方式)))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以懒加载的形式，去理解这个查询语句及配置语句。</p><p>以上中，在<code>@Result</code>属性中需要关注的属性是<code>select</code>以及<code>fetchType</code>。</p><h3 id="12-3-Mybatis中的二级缓存-–-注解方式"><a href="#12-3-Mybatis中的二级缓存-–-注解方式" class="headerlink" title="12.3 Mybatis中的二级缓存 – 注解方式"></a>12.3 Mybatis中的二级缓存 – 注解方式</h3><p>在<code>Mybaits</code>中一级缓存是默认打开的。</p><p>注解使用二级缓存的步骤：</p><ol><li>二级缓存中，同样在全局配置中开启二级缓存。</li><li>在对应的<code>Dao</code>接口上配置全局的注解 – <code>@CacheNamespace(blocking = true)</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之反射初步理解</title>
      <link href="/2020/09/05/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%8D%E5%B0%84%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/"/>
      <url>/2020/09/05/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%8D%E5%B0%84%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>由于在学习框架时，经常会遇到反射，故此篇文章用于对反射的基本学习。</p><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p><strong>基本定义:</strong><btn><a href="https://baike.baidu.com/item/JAVA反射机制/6015990" target="_blank" rel="noopener">JAVA反射机制</a></btn>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><p>对其简单的理解就是将类的各个组成部分封装为其他对象，以便我们能够更加细化的使用。同时，我们也都知道，<code>Java</code>中程序是运行在虚拟机中，我们平常用文本编辑器或者是IDE编写的程序都是<code>.java</code>格式的文件，这是最基础的源码，但这类文件是不能直接运行的，必须经过编译成<code>.class</code>字节码文件进而加载进内存供<code>JVM</code>虚拟机执行。要想理解反射，就先需要谈起<code>Java</code>代码在计算机中经历的三个阶段，见下图。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/04/wkOWlQ.png" alt="java代码经历的三个阶段"></p><a id="more"></a><p><strong>第一个阶段 – 源代码阶段</strong></p><p>定义一个了类，继而将一个类进行编译<code>.class</code>文件。</p><p>在第一阶段中，可以通过<code>Class.forName(&quot;全类名&quot;)</code>的方式获取<code>Class</code>类对象。</p><p><strong>第二阶段 – 加载进内存阶段(Class对象阶段)</strong></p><p>类加载器(<code>ClassLoader</code>)：负责将<strong>字节码</strong>文件加载进内存。</p><p>在内存中需要由一个对象来描述加载进内存中这个<code>Class</code>文件 – <code>Class</code>类对象。</p><p><code>Class</code>类对象的基本组成：</p><ul><li>成员变量 封装成<code>Field[] fields</code>对象</li><li>构造方法 <code>Constructor[] cons</code></li><li>成员方法 <code>Method[] methods</code></li></ul><p>继而通过<code>Class</code>类对象创建真正的对象，供我们使用。</p><p>这一阶段可以通过<code>类名.class</code>的方式获取到<code>Class</code>类对象。</p><p><strong>第三阶段 – Runtime阶段</strong></p><p>通过类的实例化创建出对象。<code>Runtime</code>运行阶段 <code>new</code> 出类的实例化对象。</p><p>通过<code>对象.getClass()</code>方式获取到<code>Class</code>类对象。</p><p>综上上面的三个阶段对<code>Class</code>类对象的获取：同一个字节码文件<code>(*.class)</code>在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的<code>Class</code>对象都是同一个(内存中的位置同一个，本质就是一个<code>class</code>文件)。</p><p>好处:</p><ol><li>可以在程序运行过程中，操作这些对象。(例如:获取一个对象的方法，将一个类进行拆解，对其各个组成部分进行操作，获取到一个类对象在内存中的状态)</li><li>可以解耦，提高程序的可扩展性(在不改变原有代码的基础上，对功能进行增强实现)。</li></ol><h3 id="二、具体使用"><a href="#二、具体使用" class="headerlink" title="二、具体使用"></a>二、具体使用</h3><p><code>Java</code>反射相关的类：</p><table><thead><tr><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>Class类</td><td>代表类的实体，在运行的Java应用程序中表示类和接口</td></tr><tr><td>Field类</td><td>代表类的成员变量（成员变量也称为类的属性）</td></tr><tr><td>Method类</td><td>代表类的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr></tbody></table><h4 id="2-1-Class对象功能"><a href="#2-1-Class对象功能" class="headerlink" title="2.1 Class对象功能"></a>2.1 Class对象功能</h4><table><thead><tr><th>获取成员变量们</th><th>获取构造方法们</th><th>获取成员方法们</th><th>获取全类名</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>Constructor&lt;?&gt;[] getConstructors()</td><td>Method[] getMethods()</td><td>String getName()</td></tr><tr><td>Field getField(String name)</td><td>Constructor<T> getConstructor(类&lt;?&gt;… parameterTypes)</td><td>Method getMethod(String name, 类&lt;?&gt;… parameterTypes)</td><td></td></tr><tr><td>Field[] getDeclaredFields()</td><td>Constructor<T> getDeclaredConstructor(类&lt;?&gt;… parameterTypes)</td><td>Method[] getDeclaredMethods()</td><td></td></tr><tr><td>Field getDeclaredField(String name)</td><td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td><td>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)</td><td></td></tr></tbody></table><p> 其中<code>*Declared*</code>代表忽视权限修饰符的安全检查，可以获取一切权限的(成员变量、构造方法，成员方法);而上方的只能获取到<code>public</code>修饰的(成员变量，构造方法，成员方法)。</p><p>在忽视权限修饰符的同时，如果想对其成员变量\构造方法\成员方法使用等，可采用暴力反射(不推荐，降低了安全机制)。</p><p><code>setAccessible(true):暴力反射</code> – 忽略访问权限修饰符的安全检查</p><ol><li><p><strong>成员变量</strong> – <code>Field</code></p><p>1.1 设置值</p><ul><li><code>void set(Object obj, Object value)</code></li></ul><p>1.2 获取值</p><ul><li><code>get(Object obj)</code></li></ul></li><li><p><strong>构造方法</strong> – <code>Constructor</code></p><p>2.1 创建对象</p><ul><li><code>T newInstance(Object... initargs)</code>  – 非空参时，获取到<code>Class</code>类对象的对应的构造方法，再填入对应参数。</li><li>如果使用空参数构造方法创建对象，操作可以简化：<code>Class</code>对象的<code>newInstance</code>方法。例如:<code>Object obj = cls.newInstance</code>。</li></ul></li><li><p>方法对象 – <code>Method</code></p><p>3.1 执行方法</p><ul><li><code>Object invoke(Object obj, Object... args)</code>  </li></ul><p>3.2 获取方法名称</p><ul><li><code>String getName</code>:获取方法名</li></ul></li><li><p><code>ClassLoader</code></p><p><code>class类对象.getClassLoader</code>得到类加载器对象(获取到这个字节码文件对应的类加载器)，负责将这个类加载进行内存。<code>ClassLoader</code>对象可以获取到内存中当前类路径下的文件信息。</p></li></ol><h3 id="三、代码实操"><a href="#三、代码实操" class="headerlink" title="三、代码实操"></a>三、代码实操</h3><p>首先定义一个实体类:</p><details><summary>Student实体类</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat.."</span> + food + <span class="string">"..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>以上的<code>Student</code>实体类中，包含：</p><ul><li>成员变量：<code>name</code>、<code>age</code></li><li>构造方法：<ul><li><code>public Student()</code></li><li><code>public Student(String name, String age)</code></li></ul></li><li>成员方法:<code>getter</code>、<code>setter</code>、<code>public void eat()</code>、 <code>public void eat(String food)</code></li></ul><h4 id="3-1-反射基本方法使用"><a href="#3-1-反射基本方法使用" class="headerlink" title="3.1 反射基本方法使用"></a>3.1 反射基本方法使用</h4><h5 id="3-1-1-各阶段对Class对象的获取"><a href="#3-1-1-各阶段对Class对象的获取" class="headerlink" title="3.1.1 各阶段对Class对象的获取"></a>3.1.1 各阶段对<code>Class</code>对象的获取</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.通过全类名获取class对象 -- 源码阶段</span></span><br><span class="line">Class cls = Class.forName(<span class="string">"cn.lizhi.domain.Student"</span>);</span><br><span class="line"><span class="comment">// 2.通过类名的方式获取class对象 -- 加载进行内存后</span></span><br><span class="line">Class cls1 = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">// 3.类的实例化对象获取class对象 -- Runtime阶段</span></span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">Class cls2 = student.getClass();</span><br></pre></td></tr></table></figure><p>其中<code>cls</code>、<code>cls1</code>、<code>cls2</code>为同一个对象，内存地址值相等。</p><h5 id="3-1-2-Class对象功能使用-–-成员属性实例"><a href="#3-1-2-Class对象功能使用-–-成员属性实例" class="headerlink" title="3.1.2 Class对象功能使用 – 成员属性实例"></a>3.1.2 Class对象功能使用 – 成员属性实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">Field[] fields = cls.getDeclaredFields(); <span class="comment">// 获取全部的成员属性</span></span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">System.out.println(field);</span><br><span class="line">&#125;</span><br><span class="line">Field name = cls.getDeclaredField(<span class="string">"name"</span>); <span class="comment">// 获取指定的成员属性</span></span><br><span class="line">name.setAccessible(<span class="keyword">true</span>);  <span class="comment">// 暴力反射</span></span><br><span class="line">name.set(student, <span class="string">"Tom"</span>); <span class="comment">// 设置属性值(可以不改变原代码)</span></span><br><span class="line">String value_name = (String) name1.get(student); <span class="comment">// Tom</span></span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><h5 id="3-1-3-Class对象功能使用-–-创建对象"><a href="#3-1-3-Class对象功能使用-–-创建对象" class="headerlink" title="3.1.3 Class对象功能使用 – 创建对象"></a>3.1.3 Class对象功能使用 – 创建对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有参构造方法</span></span><br><span class="line">Constructor cs = cls.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">Object o = cs.newInstance(<span class="string">"张三"</span>, <span class="string">"6"</span>); <span class="comment">// 通过获取构造方法创建对象</span></span><br><span class="line">System.out.println(o);</span><br><span class="line"><span class="comment">// 空参构造方法</span></span><br><span class="line">Object o1 = cls.newInstance();</span><br></pre></td></tr></table></figure><h5 id="3-1-4-Class对象功能使用-–-方法调用"><a href="#3-1-4-Class对象功能使用-–-方法调用" class="headerlink" title="3.1.4 Class对象功能使用 – 方法调用"></a>3.1.4 Class对象功能使用 – 方法调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method eat = cls.getMethod(<span class="string">"eat"</span>, String<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 确定带参的eat()方法</span></span><br><span class="line">eat.invoke(o, <span class="string">"food"</span>); <span class="comment">// 传入对象与参数，执行方法</span></span><br></pre></td></tr></table></figure><h4 id="3-2-实例"><a href="#3-2-实例" class="headerlink" title="3.2 实例"></a>3.2 实例</h4><p>需求:不改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法。</p><ol><li><p>定义一个配置文件,配置文件中配置类名、方法名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">className=cn.lizhi.domain.Student</span><br><span class="line">methodName=eat</span><br></pre></td></tr></table></figure></li><li><p>代码编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="comment">// 类加载器 ClassLoader负责将这个类加载进内存</span></span><br><span class="line">    InputStream is = InflectDemo01.class.getClassLoader().getResourceAsStream("pro.properties");</span><br><span class="line">    pro.load(is);</span><br><span class="line">    String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">    String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line">    Class cls = Class.forName(className); <span class="comment">// 获取class对象</span></span><br><span class="line">    Object obj = cls.newInstance(); <span class="comment">// 创建对象</span></span><br><span class="line">    Method method = cls.getMethod(methodName,String<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 加载重载的方法</span></span><br><span class="line">    method.invoke(obj,<span class="string">"fish"</span>); <span class="comment">// 执行方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们需要创建其它类的对象和执行它的方法时，我们只需要修改配置文件即可，方便我们的解耦开发。</p></li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote><p>[1] <a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">Java高级特性——反射</a></p><p>[2] <a href="https://baike.baidu.com/item/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/6015990?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p><p>[3] <a href="">黑马讲义</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之Filter</title>
      <link href="/2020/09/03/Java%E5%9F%BA%E7%A1%80%E4%B9%8BFilter/"/>
      <url>/2020/09/03/Java%E5%9F%BA%E7%A1%80%E4%B9%8BFilter/</url>
      
        <content type="html"><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p><code>Filter</code>是<code>Java Web</code>的三大组件之一。<code>Java Web</code>三大组件分别是<code>Servlet</code>、<code>Filter</code>、<code>Listener</code>。</p><p><code>Filter</code>的作用一般用于完成通用的操作。例如:登录验证、统一编码处理、敏感字符过滤…在实际开发中，过滤器就是对Web资源进行拦截，做一些处理后再交给下一个过滤器或servlet处理，通常都是用来拦截<code>request</code>进行处理，或者对返回的<code>response</code>进行拦截处理。其处理流程见下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/03/wC9YkV.png" alt="Filter执行原理"></p><p>拦截<code>request</code>可以简单理解为，在客户端向后端发送请求时，我们需要对其请求加一些”修饰”，将”修饰”后的请求带到后端。其中这个”修饰”是需要在这个请求的过程中完成的，这里因为是通用操作，可能是对所有的<code>request</code>进行”修饰”，所以并没有在客户端进行编写，否则当再加入一个<code>request</code>请求时，我们又要编写对应的规则，因此我们借用过滤器在请求过程中，对我们需要改写的<code>request</code>进行”修饰”。</p><p>其中，这里的”修饰”就可以理解为在原有的<code>request</code>请求中，再加入一些”修改”。例如:在Servlet中过多字符集编码发生变化需要修改时，你是选择对每个<code>Servlet</code>都进行修改，还是会选择一个通用的”规则”,来自动判断帮我们进行修改呢？而这里通用的”规则”就是<code>Filter</code>，我们可以把这些通用的字符集编码配置等工作放在<code>Filter</code>中，由<code>Filter</code>在请求过程中或返回过程中帮我们来实现。</p><a id="more"></a><h3 id="二、过滤器的快速使用"><a href="#二、过滤器的快速使用" class="headerlink" title="二、过滤器的快速使用"></a>二、过滤器的快速使用</h3><p>其中过滤增强的方法写在<code>doFilter</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>) <span class="comment">//访问所有资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        </span><br><span class="line">              <span class="string">''</span><span class="string">'对request请求消息进行增强'</span><span class="string">''</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse); <span class="comment">// 修饰完以后进行放行</span></span><br><span class="line">              <span class="string">''</span><span class="string">'放行回来后，对response响应消息的增强'</span><span class="string">''</span></span><br><span class="line">              </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>filterChain.doFilter(servletRequest,servletResponse)</code> 用于对我们的请求进行放行。<code>doFilter</code>中的参数就是<code>request</code>，<code>response</code>；带着请求消息和响应消息。</p><h4 id="2-1-执行流程"><a href="#2-1-执行流程" class="headerlink" title="2.1 执行流程"></a>2.1 执行流程</h4><p>在<code>doFilter</code>放行前，对<code>request</code>请求进行增强，然后带着增强后的<code>requeset</code>进入到<code>doFilter</code>；从<code>doFilter</code>方法出来后，将后台返回的<code>response</code>进行增强，返回给前端。</p><h4 id="2-2-过滤器生命周期方法"><a href="#2-2-过滤器生命周期方法" class="headerlink" title="2.2 过滤器生命周期方法"></a>2.2 过滤器生命周期方法</h4><ol><li><code>init</code>:在服务器启动后，会创建<code>Filter</code>对象，然后调用<code>init</code>方法。只执行一次。用于加载资源。</li><li><code>doFilter</code>:每一次请求被拦截资源时，会执行。执行多次。</li><li><code>destroy</code>:在服务器关闭后，<code>Filter</code>对象被销毁。如果服务器是正常关闭，则会执行<code>destroy</code>方法。只执行一次。用于释放资源。</li></ol><h3 id="三、过滤器配置"><a href="#三、过滤器配置" class="headerlink" title="三、过滤器配置"></a>三、过滤器配置</h3><h4 id="3-1-web-xml配置"><a href="#3-1-web-xml配置" class="headerlink" title="3.1 web.xml配置"></a>3.1 web.xml配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.itcast.web.filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-拦截路径设置"><a href="#3-2-拦截路径设置" class="headerlink" title="3.2 拦截路径设置"></a>3.2 拦截路径设置</h4><ol><li>具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行</li><li>拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行</li><li>后缀名拦截： *.jsp   访问所有后缀名为jsp资源时，过滤器都会被执行</li><li>拦截所有资源：/*        访问所有资源时，过滤器都会被执行</li></ol><h4 id="3-3-注解配置"><a href="#3-3-注解配置" class="headerlink" title="3.3 注解配置"></a>3.3 注解配置</h4><p>通过设置<strong>dispatcherTypes</strong>属性，设置拦截方式，即资源被访问的方式。</p><ol><li><code>REQUEST</code>：默认值。浏览器直接请求资源</li><li><code>FORWARD</code>：转发访问资源（只有在转发访问资源时，才会被拦截器所拦截，直接访问反而不会了）</li><li><code>INCLUDE</code>：包含访问资源</li><li><code>ERROR</code>：错误跳转资源</li><li><code>ASYNC</code>：异步访问资源</li></ol><p>以上是数组的形式，可以同时同时填写多个条件。</p><p>在<code>web.xml</code>中的配置在：</p><p>设置<code>&lt;dispatcher&gt;&lt;/dispatcher&gt;</code>标签即可</p><h4 id="3-4-过滤器链"><a href="#3-4-过滤器链" class="headerlink" title="3.4 过滤器链"></a>3.4 过滤器链</h4><p>即同时配置多个过滤器，多个过滤器对同一路径进行拦截时。</p><p>类似于栈的形式<strong>先进后出</strong>，例如有两个过滤器 A和B。</p><p>执行顺序即为：过滤器A –&gt; 过滤器B –&gt; 执行资源 –&gt; 过滤器B –&gt; 过滤器A</p><p>执行资源前的是对<code>request</code>的增强，执行资源后的是对<code>response</code>的增强</p><p>过滤器执行的先后顺序：</p><ol><li>注解配置：按照类名的字符串比较规则比较，值小的先执行.<ul><li>如： AFilter 和 BFilter，AFilter就先执行了。</li></ul></li><li>web.xml配置： &lt;filter-mapping&gt;谁定义在上边，谁先执行.</li></ol><h3 id="四、过滤器基本案例实战"><a href="#四、过滤器基本案例实战" class="headerlink" title="四、过滤器基本案例实战"></a>四、过滤器基本案例实战</h3><h4 id="4-1-登录验证-权限控制"><a href="#4-1-登录验证-权限控制" class="headerlink" title="4.1 登录验证(权限控制)"></a>4.1 登录验证(权限控制)</h4><p>对这一讲中–<btn><a href="http://www.liizhi.cn/2020/08/16/Java%E5%88%9D%E8%AF%95MVC%E5%8F%8A%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/" target="_blank" rel="noopener">Java初试MVC及三层架构</a></btn>的登录进行验证。</p><p>要求：</p><ol><li>如果已经登录，则直接放行。</li><li>如果没有登录，则跳转到登录页面，并提示信息。</li></ol><p><strong>思路:</strong></p><p>设置<code>LoginFilter</code>。判断当前用户是否登录(判断<code>Session</code>中是否有<code>User</code>)。</p><ul><li>如果用户已经登录，则对其进行放行</li><li>如果没有登录，提示用户进行先进行登录。</li></ul><p><strong>注意：</strong>先排除是否是登录相关的资源。</p><ul><li>如果是，直接放行；</li><li>不是，判断是否登录。</li></ul><p>代码实现：</p><details><summary>登录权限的案例代码实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 强转 -- 转换成子接口HttpServletRequest;也可以将ServletResponse转换成子接口HttpServletResponse</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req; </span><br><span class="line">        String uri = request.getRequestURI(); <span class="comment">// 获取请求路径</span></span><br><span class="line">        <span class="comment">// 排除不需要过滤的资源路径</span></span><br><span class="line">        <span class="keyword">if</span> (uri.contains(<span class="string">"/login.jsp"</span>) || uri.contains(<span class="string">"/css/"</span>) || uri.contains(<span class="string">"/fonts/"</span>) || uri.contains(<span class="string">"/img/"</span>) || uri.contains(<span class="string">"/js/"</span>) || uri.contains(<span class="string">"/checkCode"</span>) || uri.contains(<span class="string">"/loginUser"</span>)) &#123;</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            HttpSession session = request.getSession(); <span class="comment">// 获取session</span></span><br><span class="line">            Object user = session.getAttribute(<span class="string">"adminUser"</span>); <span class="comment">// 从session中获取用户登录信息</span></span><br><span class="line">            <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123; <span class="comment">// 不为空说明已经登录</span></span><br><span class="line">                chain.doFilter(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则提示用户进行登录，并转发至登录首页</span></span><br><span class="line">                request.setAttribute(<span class="string">"adminUser_error"</span>, <span class="string">"请先登录"</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h4 id="4-2-敏感字符替换"><a href="#4-2-敏感字符替换" class="headerlink" title="4.2 敏感字符替换"></a>4.2 敏感字符替换</h4><p>对数据进行敏感词汇过滤，然后用<code>*</code>进行替换。</p><p>重点：</p><ul><li>将修改完的文字再设置回<code>request</code>域中，放行，继而传递至<code>doFilter</code>中，将请求数据传递给后台。使用新的<code>request</code>对象，图中是蓝色的<code>request</code>对象。通过代理模式实现对象的增强。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/09/03/wiP6QU.png" alt="敏感词汇过滤"></p><h4 id="4-2-1-代理模式介绍"><a href="#4-2-1-代理模式介绍" class="headerlink" title="4.2.1 代理模式介绍"></a>4.2.1 代理模式介绍</h4><h5 id="4-2-1-1-设计模式-一些通用的解决固定问题的方式。"><a href="#4-2-1-1-设计模式-一些通用的解决固定问题的方式。" class="headerlink" title="4.2.1.1 设计模式:一些通用的解决固定问题的方式。"></a>4.2.1.1 设计模式:一些通用的解决固定问题的方式。</h5><p>代理模式：</p><ul><li><p>概念</p><ol><li>真实对象：被代理的对象（可以理解为原厂商）</li><li>代理对象：代理真实对象的对象。（可以理解为经销商–中间厂商）</li><li>代理模式：代理对象代理真实对象，达到增强真实对象功能的目的</li></ol></li><li><p>实现方式</p><ul><li><p>静态代理：有一个类文件描述代理模式</p></li><li><p>动态代理：在内存中形成代理类</p></li></ul></li><li><p>实现步骤：</p><ol><li>代理对象和真实对象实现相同的接口</li><li>代理对象 = <code>Proxy.newProxyInstance();</code></li><li>使用代理对象调用方法</li><li>增强方法</li></ol></li><li><p>增强方式：</p><ol><li>增强参数列表:获取具体的参数，对参数进行增强(替换参数等操作)</li><li>增强返回值类型:对返回值进行增强(即对返回值的操作)</li><li>增强方法体执行逻辑:在方法体中增强具体的逻辑操作</li></ol></li></ul><h5 id="4-2-1-2-动态代理"><a href="#4-2-1-2-动态代理" class="headerlink" title="4.2.1.2 动态代理"></a>4.2.1.2 动态代理</h5><p>特点：字节码随用随创建，随用随加载</p><p>作用：不修改源码的基础上对方法增强</p><p>分类：</p><ul><li>基于接口的动态代理</li><li>基于子类的动态代理</li></ul><h6 id="1-基于接口的动态代理"><a href="#1-基于接口的动态代理" class="headerlink" title="1. 基于接口的动态代理"></a>1. 基于接口的动态代理</h6><p>涉及的类：<code>Proxy</code></p><p>提供者：<code>JDK</code>官方</p><ol><li>如何创建代理对象：</li></ol><ul><li>使用<code>Proxy</code>类中的<code>newProxyInstance</code>方法</li></ul><p>创建代理对象的要求:</p><ul><li>被代理类最少实现一个接口，如果没有则不能使用</li></ul><ol start="2"><li><code>newProxyInstance</code>方法的参数：</li></ol><ul><li><code>ClassLoader</code>:类加载器<ul><li>它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。(固定写法)</li></ul></li><li><code>Class[]</code>:字节码数组<ul><li>它是用于让代理对象和被代理对象有相同方法。(固定写法)</li></ul></li><li><code>InvocationHandler</code>：用于提供增强的代码<ul><li>它是让我们写如何代理。我们一般都是写一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</li></ul></li></ul><h6 id="2-基于子类的动态代理"><a href="#2-基于子类的动态代理" class="headerlink" title="2. 基于子类的动态代理"></a>2. 基于子类的动态代理</h6><p>涉及的类：<code>Enhancer</code></p><p>提供者：第三方<code>cglib</code>库</p><p>如何创建代理对象:</p><ul><li>使用<code>Enhancer</code>类中的<code>create</code>方法</li></ul><p>创建代理对象的要求:</p><ul><li>被代理类不能是最终类</li></ul><p><code>create</code>方法的参数：</p><ul><li><p><code>Class</code>：字节码</p><ul><li>它是用于指定被代理对象的字节码</li></ul></li><li><p><code>Callback</code>：用于提供增强的代码</p><p>它是让我们写如何代理。我们一般都是写一个该接口的实现类，通常情况下都是匿名内部类。</p><p>此接口的实现类都是谁用谁写(我们自己用，那便是我们自己写)</p><p>我们一般写的都是该接口的子接口的实现类：<code>MethodInterceptor</code></p></li></ul><h5 id="4-2-1-3-案例"><a href="#4-2-1-3-案例" class="headerlink" title="4.2.1.3 案例"></a>4.2.1.3 案例</h5><h6 id="1-基于接口的动态代理实例"><a href="#1-基于接口的动态代理实例" class="headerlink" title="1. 基于接口的动态代理实例"></a>1. 基于接口的动态代理实例</h6><p><strong>定义接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SaleComputer</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sale</span><span class="params">(<span class="keyword">double</span> money)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义真实对象:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真实类 -- 作为真实对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lenovo</span> <span class="keyword">implements</span> <span class="title">SaleComputer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sale</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"花了"</span> + money + <span class="string">"元买了一条电脑"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"联想电脑"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"展示电脑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代理对象的使用逻辑:</strong></p><details><summary>代理对象的使用逻辑</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lenovo lenovo = <span class="keyword">new</span> Lenovo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.动态代理增强Lenovo对象</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 三个参数：</span></span><br><span class="line"><span class="comment">         *      1.类加载器：真实对象.getClass().getClassLoader()</span></span><br><span class="line"><span class="comment">         *      2.接口数组(保证代理对象和真实对象实现相同的接口)：真实数组.getClass().getInterfaces() -- 真实对象的接口</span></span><br><span class="line"><span class="comment">         *      3.处理器：new InvocationHandler() 这是所关心的，即我们的代理方式</span></span><br><span class="line"><span class="comment">         *      4.这里的proxy_lenovo即为代理对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建代理对象 -- 使代理对象和真实对象实现相同的接口(相同接口类型)</span></span><br><span class="line">        SaleComputer proxy_lenovo = (SaleComputer) Proxy.newProxyInstance(lenovo.getClass().getClassLoader(), lenovo.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                代理逻辑编写的方法：代理对象调用的所有方法都会触发该方法执行</span></span><br><span class="line"><span class="comment">                参数:</span></span><br><span class="line"><span class="comment">                    1.proxy:代理对象</span></span><br><span class="line"><span class="comment">                    2.method:代理对象调用的方法。被封装为的对象</span></span><br><span class="line"><span class="comment">                    3.args:代理对象调用的方法时，传递的实际参数(调用方法中的参数列表)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//                System.out.println("该方法被执行了...");</span></span><br><span class="line"><span class="comment">//                System.out.println(method.getName());</span></span><br><span class="line"><span class="comment">//                System.out.println(args[0]);</span></span><br><span class="line">                <span class="comment">// 1.增强参数</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"sale"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">double</span> money = (<span class="keyword">double</span>) args[<span class="number">0</span>];</span><br><span class="line">                    money = money * <span class="number">0.85</span>; <span class="comment">// 对参数列表进行增强</span></span><br><span class="line">                    <span class="comment">// 使用真实对象调用该方法</span></span><br><span class="line">                   String obj = (String) method.invoke(lenovo, money);</span><br><span class="line">                   <span class="comment">// 2. 增强返回值</span></span><br><span class="line">                    <span class="keyword">return</span> obj+<span class="string">"_鼠标垫"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Object obj = method.invoke(lenovo, args);</span><br><span class="line">                    <span class="keyword">return</span> obj;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.调用方法</span></span><br><span class="line">        String computer = proxy_lenovo.sale(<span class="number">8000</span>); <span class="comment">// 确定了 方法名 -- sale;参数列表 -- &#123;8000&#125;</span></span><br><span class="line"><span class="comment">//        System.out.println(computer);</span></span><br><span class="line"><span class="comment">//        proxy_lenovo.show();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h6 id="2-基于子类的动态代理实例"><a href="#2-基于子类的动态代理实例" class="headerlink" title="2. 基于子类的动态代理实例"></a>2. 基于子类的动态代理实例</h6><details><summary>被代理对象类</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销售产品，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提供售后服务，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>代理对象类</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        Producer cglibProducer = (Producer)Enhancer.create(producer.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法都会经过该方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">             *    以上三个参数和基于接口的动态代理中invoke方法的参数是一样的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy ：当前执行方法的代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//提供增强的代码</span></span><br><span class="line">                Object returnValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//1.获取方法执行的参数</span></span><br><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">//2.判断当前方法是不是销售 -- 若是的话，则对方法进行增强</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                    returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> returnValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cglibProducer.saleProduct(<span class="number">12000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h4 id="4-2-2-敏感词汇过滤代码"><a href="#4-2-2-敏感词汇过滤代码" class="headerlink" title="4.2.2 敏感词汇过滤代码"></a>4.2.2 敏感词汇过滤代码</h4><p><strong>逻辑:</strong>获取<code>request</code>中带有请求参数的方法，例如:<code>getParameter</code>、<code>getParameterMap</code>、<code>getParameterValue</code>等。对其方法的返回值进行判定，是否存在敏感值。如果存在，则对返回值进行增强。</p><details><summary>敏感词汇过滤代码</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveWordsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 真实对象和代理对象都实现 ServletRequest 接口</span></span><br><span class="line">        ServletRequest request = (ServletRequest) Proxy.newProxyInstance(req.getClass().getClassLoader(), req.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"getParameter"</span>)) &#123; <span class="comment">// 存在getParameter方法</span></span><br><span class="line">                    String value = (String) method.invoke(req, args);</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (String word : list) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (value.contains(word)) &#123;</span><br><span class="line">                                value = value.replaceFirst(word, <span class="string">"**"</span>); <span class="comment">// 获取新的value</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"getParameterMap"</span>)) &#123; <span class="comment">// 存在getParameterMap方法</span></span><br><span class="line">                    Map&lt;String, String[]&gt; parameterMap = (Map&lt;String, String[]&gt;) method.invoke(req, args);</span><br><span class="line">                    <span class="keyword">if</span> (parameterMap != <span class="keyword">null</span> &amp;&amp; !parameterMap.isEmpty()) &#123;</span><br><span class="line">                        Set&lt;String&gt; keySet = parameterMap.keySet();</span><br><span class="line">                        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">                            String[] values = parameterMap.get(key);</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                                <span class="keyword">for</span> (String word : list) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (values[i].contains(word)) &#123;</span><br><span class="line">                                        parameterMap.get(key)[i] = values[i].replaceAll(word, <span class="string">"**"</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> parameterMap;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"getParameterValues"</span>)) &#123;</span><br><span class="line">                    String[] values = (String[]) method.invoke(req, args);</span><br><span class="line">                    <span class="keyword">if</span> (values != <span class="keyword">null</span> &amp;&amp; values.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (String word : list) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (values[i].contains(word)) &#123;</span><br><span class="line">                                    values[i] = values[i].replaceAll(word, <span class="string">"**"</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> values;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果不是以上方法，就返回客户端传递的req对象(旧对象)原来的方法返回值即可，而以上方法传递的是新的req对象方法返回值(经过增强后的返回值) -- 对返回值进行了增强</span></span><br><span class="line">                <span class="keyword">return</span> method.invoke(req, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    用于加载敏感词汇表，存放在列表中。init初始时加载 -- 只加载一次</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取真实路径</span></span><br><span class="line">            ServletContext servletContext = config.getServletContext();</span><br><span class="line">            String realPath = servletContext.getRealPath(<span class="string">"/WEB-INF/classes/word"</span>);</span><br><span class="line">            <span class="comment">// 读取文件</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(realPath));</span><br><span class="line">            <span class="comment">// 将文件添加到集合当中</span></span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                list.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote><p>[1] <a href="https://blog.csdn.net/yuzhiqiang_1993/article/details/81288912" target="_blank" rel="noopener">Java Web之过滤器(Filter)</a></p><p>[2] <a href="https://baike.baidu.com/item/java%E8%BF%87%E6%BB%A4%E5%99%A8/242605?fr=aladdin" target="_blank" rel="noopener">Java过滤器–百度百科</a></p><p>[3] <a href="">黑马讲义</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Filter </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet优化之功能重组成模块</title>
      <link href="/2020/08/31/Servlet%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8A%9F%E8%83%BD%E9%87%8D%E7%BB%84%E6%88%90%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/08/31/Servlet%E4%BC%98%E5%8C%96%E4%B9%8B%E5%8A%9F%E8%83%BD%E9%87%8D%E7%BB%84%E6%88%90%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>在之前的总结<btn><a href="http://www.liizhi.cn/2020/08/16/Java%E5%88%9D%E8%AF%95MVC%E5%8F%8A%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/" target="_blank" rel="noopener">Java初试MVC及三层架构</a></btn>中，查看其目录结构仅仅对于<code>User</code>对象的操作就写了6，7个<code>servlet</code>，而每一个<code>servlet</code>只对应一个功能，但随着以后项目的扩大，业务逻辑的复杂化，我们需要操作的对象不仅仅是一个<code>User</code>类时，换句话说，我们操作数据库中的表不止一张时，那么可想而知我们的servlet需要写多少！</p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/31/dXaNXq.png" alt="未优化前的目录结构" style="zoom:50%;" /><p><strong>思考:</strong>我们能否像<code>service</code>层和<code>dao</code>层一样，将关于<code>User</code>的操作都写在一个类当中，方便我们的使用呢。从而减少<code>Servlet</code>的数量，现在是一个功能一个<code>Servlet</code>，将其优化为一个模块一个<code>Servlet</code>，相当于在数据库中一张表对应一个<code>Servlet</code>，在<code>Servlet</code>中提供不同的方法，完成用户的请求。</p><p>我们编写的所有<code>servlet</code>都继承了<code>HttpServlet</code>，与此同时都复写了<code>doGet</code>以及<code>doPost</code>方法。查看<code>HttpServlet</code>源码，可以看见对<code>doGet</code>以及<code>doPost</code>的方法的调用都写在<code>service</code>中。</p><a id="more"></a><details><summary>HttpServlet中service方法源码</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String method = req.getMethod();</span><br><span class="line">    <span class="keyword">long</span> lastModified;</span><br><span class="line">    <span class="keyword">if</span> (method.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">        lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">        <span class="keyword">if</span> (lastModified == -<span class="number">1L</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ifModifiedSince = req.getDateHeader(<span class="string">"If-Modified-Since"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">                ifModifiedSince = -<span class="number">1L</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="number">1000L</span> * <span class="number">1000L</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">                <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resp.setStatus(<span class="number">304</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"HEAD"</span>)) &#123;</span><br><span class="line">        lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">        <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">        <span class="keyword">this</span>.doHead(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doPut(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"DELETE"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doDelete(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doOptions(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"TRACE"</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doTrace(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">        Object[] errArgs = <span class="keyword">new</span> Object[]&#123;method&#125;;</span><br><span class="line">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">        resp.sendError(<span class="number">501</span>, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>通过查看以上的源码，我们可以看到<code>service</code>是对当前进入到<code>servlet</code>方法进行判断，然后调用相对应的方法。受到源码的启发，我们是不是可以重写<code>service</code>方法，在里面对我们自己定义的方法进行判断，继而进行使用呢。</p><p>基本思路：定义一个<code>BaseServlet</code>类继承<code>HttpServlet</code>，用来重写<code>service</code>方法。然后，我们再定义一个<code>User</code>相关的<code>servlet</code>类继承<code>BaseServlet</code>，我们把之前功能分散的<code>servlet</code>都写在这个类中。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/31/dXBVVP.png" alt="继承关系图"></p><p>对于重写<code>service</code>方法，而覆盖了原有的<code>doGet</code>，<code>doPost</code>方法，如何对完成请求的疑惑解答。</p><p>(当时重写<code>service</code>时，产生了没有了<code>doGet</code>，<code>doPost</code>方法，那么我以后的请求都是如何请求，以及采用哪种请求方式的疑惑，后来查询了相关的博客，现将查询的资料以及自己的理解写在下方，如有不正确请指正)</p><blockquote><p><code>HttpServlet</code>中的<code>service</code>方法是用于转向(get,post,put,delete…对网页的请求方式进行判断)。当重写了<code>service</code>方法时，此时的<code>service</code>就不是用来转向的，而是用来处理业务的，现在不论客户端是用<code>post</code>还是<code>get</code>来请求此<code>servlet</code>,都会执行<code>service</code>方法来调用相应的方法。(可以简单理解为<strong><code>service</code>是客户端向后端传递数据的接口，必须由此进入路径</strong>)</p></blockquote><p>简而言之，后端只需要进行方法的调用，不必关心是采用哪种请求方式。是否还记得，在原来的<code>doPost</code>以及<code>doGet</code>中，其中一个方法中，会有这么一句，例如,在<code>doGet</code>方法体中会写<code>this.doPost(request,response)</code>，从而达到方法的复用。然而这一句是不是也间接的告诉了我们，两者内部的处理逻辑是一样的。</p><p>好了，有了以上的思路以及解答了上面的疑惑，下面我们开始对代码进行重构。</p><p>首先给出<code>BaseServlet</code>以及子类<code>User</code>的<code>servlet</code>：</p><details><summary>BaseServlet的代码</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取请求路径</span></span><br><span class="line">        String uri = request.getRequestURI(); <span class="comment">//  请求路径(例如:xx/user/add)其中xx代表虚拟目录，而add既包含在请求的资源路径中，也是我们的方法名称</span></span><br><span class="line">        <span class="comment">// 2.获取方法名称</span></span><br><span class="line">        String methodName = uri.substring(uri.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>); <span class="comment">// 通过访问路径，获取方法名称 -- 截取字符串的长度,返回结果 add</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3.获取方法对象Method</span></span><br><span class="line">            Method method = <span class="keyword">this</span>.getClass().getMethod(methodName, HttpServletRequest<span class="class">.<span class="keyword">class</span>, <span class="title">HttpServletResponse</span>.<span class="title">class</span>)</span>;<span class="comment">// 这里的this代表BaseServlet的子类调用者,这里就是UserServlet</span></span><br><span class="line">            <span class="comment">// 4.执行方法</span></span><br><span class="line">            method.invoke(<span class="keyword">this</span>, request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>UserServlet代码</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对于UserServlet的优化</span></span><br><span class="line"><span class="comment"> * 将单一功能进行模块化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/user/*"</span>) <span class="comment">// user路径下的所有资源都可以通过UserServlet被访问到</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户增加的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(user, parameterMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        service.addUser(user);</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        response.sendRedirect(request.getContextPath() + <span class="string">"/user/find"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">        UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        service.delete(Integer.parseInt(id));</span><br><span class="line">        response.sendRedirect(request.getContextPath() + <span class="string">"/user/find"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        String currentPage = request.getParameter(<span class="string">"currentPage"</span>);</span><br><span class="line">        String rows = request.getParameter(<span class="string">"rows"</span>);</span><br><span class="line">        <span class="keyword">if</span> (currentPage == <span class="keyword">null</span> || <span class="string">""</span>.equals(currentPage)) &#123;</span><br><span class="line">            currentPage = <span class="string">"1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rows == <span class="keyword">null</span> || <span class="string">""</span>.equals(rows)) &#123;</span><br><span class="line">            rows = <span class="string">"5"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String[]&gt; condition = request.getParameterMap();</span><br><span class="line"></span><br><span class="line">        UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        PageBean&lt;User&gt; userByPage = service.findUserByPage(Integer.parseInt(currentPage), Integer.parseInt(rows),condition);</span><br><span class="line">        request.setAttribute(<span class="string">"userByPages"</span>, userByPage);</span><br><span class="line">        request.setAttribute(<span class="string">"condition"</span>,condition);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/list.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">active</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);<span class="comment">// 设置编码</span></span><br><span class="line">        User loginUser = <span class="keyword">new</span> User();</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap(); <span class="comment">// 获取request全部提交的参数</span></span><br><span class="line">        String[] checkCodes = parameterMap.get(<span class="string">"verifycode"</span>); <span class="comment">// 取验证码</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        String checkCode_session = (String) session.getAttribute(<span class="string">"checkCode_session"</span>);<span class="comment">// 取生成的真正正确的验证码</span></span><br><span class="line">        session.removeAttribute(<span class="string">"checkCode_session"</span>); <span class="comment">// 获取验证码后，销毁验证码信息</span></span><br><span class="line">        <span class="comment">// 判断验证码是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (checkCode_session == <span class="keyword">null</span> || !checkCode_session.equalsIgnoreCase(checkCodes[<span class="number">0</span>])) &#123; <span class="comment">// 验证码不正确 -- 存储转发至首页重新登录</span></span><br><span class="line">            request.setAttribute(<span class="string">"code_error"</span>, <span class="string">"验证码输入错误"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 对username和password进行封装</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BeanUtils.populate(loginUser, parameterMap);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">            User adminUser = service.adminUser(loginUser); <span class="comment">// 查询数据库</span></span><br><span class="line">            <span class="keyword">if</span> (adminUser != <span class="keyword">null</span>) &#123; <span class="comment">// 查询成功</span></span><br><span class="line">                session.setAttribute(<span class="string">"adminUser"</span>, adminUser);</span><br><span class="line">                response.sendRedirect(request.getContextPath() + <span class="string">"/index.jsp"</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 查询失败 -- 存储转发至首页重新登录</span></span><br><span class="line">                request.setAttribute(<span class="string">"adminUser_error"</span>, <span class="string">"用户名或者密码错误"</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>首先<code>UserServlet</code>继承<code>BaseServlet</code>，而请求的资源路径是由子类的<code>UserServlet</code>决定，其注解<code>@WebServlet(&quot;/user/*&quot;)</code>。其中的通配符<code>*</code>就是用来匹配下方对应的方法名称。这里需要发挥作用的就需要父类<code>BaseServlet</code>中<code>service</code>方法<strong>通过反射的技术获取到资源路径，而资源路径中就包含了我们子类<code>UserServlet</code>的方法名</strong>，所以就可以通过反射的技术来使用定义在子类中的方法。</p><p>还有需要注意的一点是，子类中方法采用<code>public</code>修饰而不用<code>protect</code>修饰是因为作用域的原因。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote><p>[1] <a href="https://blog.csdn.net/muyihuakai/article/details/5858792?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-5.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-5.channel_param" target="_blank" rel="noopener">servlet中的service()方法重写与不重写</a></p><p>[2] 黑马讲义笔记</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端之表单验证</title>
      <link href="/2020/08/27/%E5%89%8D%E7%AB%AF%E4%B9%8B%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
      <url>/2020/08/27/%E5%89%8D%E7%AB%AF%E4%B9%8B%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="一、简概"><a href="#一、简概" class="headerlink" title="一、简概"></a>一、简概</h3><p>因为，前端经常涉及到表单验证，故此篇博客用于记录前端<code>JS</code>对表单验证的方法。</p><p>通过表单验证，当对<code>form</code>表单提交时，可以防止不合法的数据传递至后台(以及判空操作)。这里我们先定义一个表单，作为示例，其它的情况都可以此类推。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/30/dqw44H.png" alt="示例表单"></p><details><summary>前端表单代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">style</span>=<span class="string">"margin: 0 auto;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">style</span>=<span class="string">"width: 150px"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span> <span class="attr">style</span>=<span class="string">"width: 150px"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>出生日期<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">style</span>=<span class="string">"width: 150px"</span> <span class="attr">id</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"register"</span> <span class="attr">value</span>=<span class="string">"注册"</span> <span class="attr">style</span>=<span class="string">"margin-top: 5px"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></details><p>前端进行表单验证只需作用在两个地方即可：</p><ol><li><p>绑定当前需要验证的<code>input</code>标签的离焦事件。</p></li><li><p>对<code>form</code>表单的<code>submit</code>进行全部的<code>input</code>标签判定</p><p>当结果全部返回<code>true</code>才能进行提交，否则无法提交。</p></li></ol><a id="more"></a><h3 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h3><h4 id="2-1-单个标签的离焦事件"><a href="#2-1-单个标签的离焦事件" class="headerlink" title="2.1 单个标签的离焦事件"></a>2.1 单个标签的离焦事件</h4><ul><li>用户名：限制用户名的长度为3~10位。</li><li>邮箱：符合邮箱的规则(xxx+@xx+.xx+)其中的+号代表正则的通配符。</li><li>出生日期：非空即可。</li></ul><h5 id="1-用户名"><a href="#1-用户名" class="headerlink" title="1.用户名"></a>1.用户名</h5><p>对<code>username</code>绑定离焦事件 – 采用<code>JS</code>的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkusername</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> username = $(<span class="string">'#username'</span>);</span><br><span class="line">        <span class="keyword">var</span> value = username.val();</span><br><span class="line">        <span class="keyword">var</span> regex = <span class="regexp">/^\w&#123;3,10&#125;$/</span>; <span class="comment">//用户名长度3-10</span></span><br><span class="line">        <span class="keyword">var</span> flag = regex.test(value);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;  <span class="comment">// 如果验证通过</span></span><br><span class="line">            username.css(<span class="string">'border'</span>, <span class="string">''</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果验证不通过</span></span><br><span class="line">            username.css(<span class="string">'border'</span>, <span class="string">'2px solid red'</span>); <span class="comment">// 验证不通过输入框显示红色</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag; </span><br><span class="line">    &#125;</span><br><span class="line">$(<span class="string">'#username'</span>).blur(checkusername); <span class="comment">// 对username绑定离焦事件，触发checkusername函数</span></span><br></pre></td></tr></table></figure><p>示例：</p><p>当对用户名输入不合法时，输入框会报红：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/31/dL3O8f.png" alt="报错信息"></p><p>符合规定时：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/31/dL8FP0.png" alt=""></p><h5 id="2-邮箱"><a href="#2-邮箱" class="headerlink" title="2.邮箱"></a>2.邮箱</h5><p>同理，只要写出正确的正则表达式即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkemail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> val = $(<span class="string">'#email'</span>).val();</span><br><span class="line">        <span class="keyword">var</span> regx = <span class="regexp">/^\w+@\w+\.\w+$/</span>; <span class="comment">// 邮箱的验证规则</span></span><br><span class="line">        <span class="keyword">var</span> flag = regx.test(val);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            $(<span class="string">'#email'</span>).css(<span class="string">'border'</span>, <span class="string">''</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">'#email'</span>).css(<span class="string">'border'</span>, <span class="string">'2px solid red'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    &#125;</span><br><span class="line">$(<span class="string">'#email'</span>).blur(checkemail);</span><br></pre></td></tr></table></figure><h5 id="3-出生日期-非空"><a href="#3-出生日期-非空" class="headerlink" title="3.出生日期 非空"></a>3.出生日期 非空</h5><p>非空的正则表达式：<code>var regex = /\S/;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkbirthday</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> birthday = $(<span class="string">'#birthday'</span>);</span><br><span class="line">        <span class="keyword">var</span> value = birthday.val();</span><br><span class="line">        <span class="keyword">var</span> regex = <span class="regexp">/\S/</span>; <span class="comment">// 非空验证</span></span><br><span class="line">        <span class="keyword">var</span> flag = regex.test(value);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;  <span class="comment">// 如果验证通过</span></span><br><span class="line">            birthday.css(<span class="string">'border'</span>, <span class="string">''</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果验证不通过</span></span><br><span class="line">            birthday.css(<span class="string">'border'</span>, <span class="string">'2px solid red'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">$(<span class="string">'#birthday'</span>).blur(checkbirthday);</span><br></pre></td></tr></table></figure><p><strong>注意:</strong>以上所有的函数返回<code>flag</code>标记，是最后对表单<code>form</code>的<code>submit</code>事件进行判定，只有当以上三个全部返回<code>true</code>时，那么表单才能够进行提交。</p><h4 id="2-2-表单提交的验证"><a href="#2-2-表单提交的验证" class="headerlink" title="2.2 表单提交的验证"></a>2.2 表单提交的验证</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当submit接收false时不提交，接收true时才进行提交</span></span><br><span class="line">$(<span class="string">'#form'</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> checkemail() &amp;&amp; checkusername() &amp;&amp; checkbirthday(); </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="2-3-全部代码"><a href="#2-3-全部代码" class="headerlink" title="2.3 全部代码"></a>2.3 全部代码</h4><details><summary>前端全部代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;form表单验证&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>jquery<span class="number">-3.2</span><span class="number">.1</span>.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" href="</span>css/注册样式.css<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;style&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        div &#123;</span></span><br><span class="line"><span class="string">            padding-top: 200px;</span></span><br><span class="line"><span class="string">            margin: 0 auto;</span></span><br><span class="line"><span class="string">            text-align: center;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;form method="</span><span class="keyword">get</span>" action="https://www.baidu.com" id="form"&gt;</span><br><span class="line">        &lt;table align="center" style="margin: 0 auto;"&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;label&gt;用户名&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="text" name="username" placeholder="请输入用户名" style="width: 150px" id="username"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;label&gt;邮箱&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="email" name="email" placeholder="请输入邮箱" style="width: 150px" id="email"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;label&gt;性别&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td align="left"&gt;</span><br><span class="line">                    &lt;input type="radio" name="male" value="male" checked&gt;男</span><br><span class="line">                    &lt;input type="radio" name="female" value="female"&gt;女</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;label&gt;出生日期&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="date" name="birthday" style="width: 150px" id="birthday"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td align="center" colspan="2"&gt;</span><br><span class="line">                    &lt;input type="submit" name="register" value="注册" style="margin-top: 5px"&gt;</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    function checkusername() &#123;</span><br><span class="line">        <span class="keyword">var</span> username = $(<span class="string">'#username'</span>);</span><br><span class="line">        <span class="keyword">var</span> value = username.val();</span><br><span class="line">        <span class="keyword">var</span> regex = <span class="regexp">/^\w&#123;3,10&#125;$/</span>; <span class="comment">//用户名长度3-10</span></span><br><span class="line">        <span class="keyword">var</span> flag = regex.test(value);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;  <span class="comment">// 如果验证通过</span></span><br><span class="line">            username.css(<span class="string">'border'</span>, <span class="string">''</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果验证不通过</span></span><br><span class="line">            username.css(<span class="string">'border'</span>, <span class="string">'2px solid red'</span>); <span class="comment">// 验证不通过输入框显示红色</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkemail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> val = $(<span class="string">'#email'</span>).val();</span><br><span class="line">        <span class="keyword">var</span> regx = <span class="regexp">/^\w+@\w+\.\w+$/</span>;</span><br><span class="line">        <span class="keyword">var</span> flag = regx.test(val);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            $(<span class="string">'#email'</span>).css(<span class="string">'border'</span>, <span class="string">''</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">'#email'</span>).css(<span class="string">'border'</span>, <span class="string">'2px solid red'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkbirthday</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> birthday = $(<span class="string">'#birthday'</span>);</span><br><span class="line">        <span class="keyword">var</span> value = birthday.val();</span><br><span class="line">        <span class="keyword">var</span> regex = <span class="regexp">/\S/</span>; <span class="comment">// 非空验证</span></span><br><span class="line">        <span class="keyword">var</span> flag = regex.test(value);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;  <span class="comment">// 如果验证通过</span></span><br><span class="line">            birthday.css(<span class="string">'border'</span>, <span class="string">''</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果验证不通过</span></span><br><span class="line">            birthday.css(<span class="string">'border'</span>, <span class="string">'2px solid red'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#email'</span>).blur(checkemail);</span><br><span class="line">    $(<span class="string">'#birthday'</span>).blur(checkbirthday);</span><br><span class="line">    $(<span class="string">'#username'</span>).blur(checkusername);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#form'</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> checkemail() &amp;&amp; checkusername() &amp;&amp; checkbirthday();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></details><h3 id="三、附-常用表单验证的正则表达式"><a href="#三、附-常用表单验证的正则表达式" class="headerlink" title="三、附 常用表单验证的正则表达式"></a>三、附 常用表单验证的正则表达式</h3><blockquote><p>待续</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表单验证 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis思考及基础案例实战</title>
      <link href="/2020/08/26/Redis%E5%9F%BA%E7%A1%80%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/08/26/Redis%E5%9F%BA%E7%A1%80%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、简单介绍"><a href="#一、简单介绍" class="headerlink" title="一、简单介绍"></a>一、简单介绍</h3><p><code>redis</code>是一款高性能的<code>NOSQL</code>系列的非关系型数据库。主要用于缓存，可提升数据访问的性能。这里用于做缓存的数据是不经常做改变的数据。核心思想见下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/26/d2IU4s.jpg" alt="redis"></p><p>使用缓存机制，可以加快我们数据的访问。因为数据是暂存在内存中，直接访问内存的数据可以减少在访问数据库过程中的<code>I/O</code>操作，这样便可以提升系统的性能，查询速度。但是作为缓存也有一定的缺点：数据因为是暂存在内存上的，一旦<code>redis</code>服务端关闭，再次开启时，缓存数据将不复存在。因此在某些场合中，我们需要对<code>redis</code>缓存数据做持久化操作，将其持久化到硬盘上，当再次查询时，可将数据读取到缓存中。</p><p>从以上我们看出<code>redis</code>使用时的两点注意事项：</p><ol><li>数据不会经常改变。如果，数据持续改变，就不断的访问数据库，再将数据放入到缓存中。</li><li>确定持久化操作的条件。不能随时随地的进行持久化(反而增加了<code>IO</code>操作)，也不能对缓存中大量改变的数据不做持久化数据(会导致数据大量的丢失)。</li></ol><a id="more"></a><h3 id="二、案例实操"><a href="#二、案例实操" class="headerlink" title="二、案例实操"></a>二、案例实操</h3><p>通过对<code>redis</code>的基本介绍，我们做一个小案例。案例需求如下：</p><ol><li>提供index.html页面，页面中有一个省份下拉列表</li><li>当页面加载完成后，发送<code>ajax</code>请求，加载所有省份</li></ol><p><strong>思路:</strong></p><p>当接收到请求时，做<code>redis</code>缓存的查询。如果缓存中存在所需要的数据，就将缓存数据进行返回；如果不存在，就进行数据库查询，同时将数据库中的数据加入到缓存中，再将数据进行返回。</p><p>前端接收到的数据是序列化后的<code>Json</code>数据，便于数据的读取，进行页面数据的展示。</p><p><strong>思考:</strong>为什么这里要使用<code>ajax</code>？<br>当我们对页面进行加载时，就需要自动显示后台传递的数据，而没有进行任何链接的操作(form表单提交、点击超链接等操作)，而让页面主动对后端进行请求，所以我们这里需要使用<code>ajax</code>，简化我们的操作。</p><p>第二点是因为异步请求是为了获取服务器响应的数据，而前端使用的是<code>html</code>，不能够直接从<code>servlet</code>相关的域对象获取值，只能通过<code>ajax</code>获取相应的数据。</p><p>以下便是具体实现的代码：</p><details><summary>dao层中findAll方法的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvinceDaoImpl</span> <span class="keyword">implements</span> <span class="title">ProvinceDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from province"</span>;</span><br><span class="line">        List&lt;Province&gt; list = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Province&gt;(Province<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>service层中findAll方法的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvinceServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProvinceService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ProvinceDao provinceDao = <span class="keyword">new</span> ProvinceDaoImpl();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllByRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis jedis = JedisUtils.getJedis(); <span class="comment">// 创建Jedis对象，用于redis的操作</span></span><br><span class="line">        String province = jedis.get(<span class="string">"province"</span>); <span class="comment">// 获取需要查询的对象</span></span><br><span class="line">        <span class="keyword">if</span> (province == <span class="keyword">null</span> || province.length() == <span class="number">0</span>) &#123; <span class="comment">// 若缓存中不存在则查询数据库</span></span><br><span class="line">            System.out.println(<span class="string">"缓存中没有，先对数据库进行查询"</span>);</span><br><span class="line">            List&lt;Province&gt; list = provinceDao.findAll(); <span class="comment">// 调用dao中，数据库查询操作</span></span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper(); <span class="comment">// 数据序列化 -- Json格式</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                province = mapper.writeValueAsString(list);</span><br><span class="line">                jedis.set(<span class="string">"province"</span>, province);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"查询的数据在缓存中"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>web层中FindAllProvince类</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/findAllProvince"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindAllProvince</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);<span class="comment">// 设置编码格式</span></span><br><span class="line">        ProvinceService service = <span class="keyword">new</span> ProvinceServiceImpl();</span><br><span class="line">        String json_list = service.findAllByRedis(); <span class="comment">// Redis缓存机制</span></span><br><span class="line">        response.getWriter().write(json_list); <span class="comment">// Ajax数据返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h4 id="2-1-Util包"><a href="#2-1-Util包" class="headerlink" title="2.1 Util包"></a>2.1 Util包</h4><details><summary>JDBCUtils工具类</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties");// 配置文件的字节输入流</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(is); <span class="comment">// 属性集的加载 -- map，key:value</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);<span class="comment">// 初始化数据库连接池</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123; <span class="comment">// 用于获取连接对象</span></span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>JedisUtils工具类</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        InputStream is = JedisUtils.class.getClassLoader().getResourceAsStream("jedis.properties");</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig(); <span class="comment">// 配置对象，可对redis进行配置</span></span><br><span class="line">        String password = (String) properties.get(<span class="string">"password"</span>);</span><br><span class="line">        String port = properties.getProperty(<span class="string">"port"</span>);</span><br><span class="line">        String host = (String) properties.get(<span class="string">"host"</span>);</span><br><span class="line">        String maxTotal = (String) properties.get(<span class="string">"maxTotal"</span>);</span><br><span class="line">        String maxIdle = (String) properties.get(<span class="string">"maxIdle"</span>);</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(maxIdle));</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(maxTotal));</span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config, host, Integer.parseInt(port));</span><br><span class="line">        jedis = jedisPool.getResource();</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123; <span class="comment">// 返回Jedis对象</span></span><br><span class="line">        <span class="keyword">return</span> jedis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h4 id="2-2前端代码"><a href="#2-2前端代码" class="headerlink" title="2.2前端代码"></a>2.2前端代码</h4><details><summary>前端代码展示</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>省份导入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.3.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"province"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择省份--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $.<span class="keyword">get</span>("findAllProvince", &#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(data).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> option = <span class="string">"&lt;option name=(''+this.id) value=(''+this.id)&gt;"</span>+<span class="keyword">this</span>.name+<span class="string">"&lt;/option&gt;"</span>; <span class="comment">// value中的值是被送往服务器作为请求参数，而标签中的值是作为前端的展示值不是作为请求参数。</span></span></span><br><span class="line">            $province.append(option)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></details><h4 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h4><p><code>redis</code>是用于缓存一些不经常发生变化的数据。</p><p>数据库的数据一旦发生改变，则需要更新缓存。</p><ul><li>数据库的表执行增删改的相关操作，需要将对应的<code>redis</code>缓存数据清空，再次存入</li><li>在<code>service</code>对应的增删改方法中，将<code>redis</code>数据删除。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的基本操作</title>
      <link href="/2020/08/20/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/20/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>本文借鉴<btn><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰</a></btn>老师博客而整理的<code>git</code>相关总结，以方便自己查阅使用。</p><h4 id="1-Git用户设定及其配置"><a href="#1-Git用户设定及其配置" class="headerlink" title="1.Git用户设定及其配置"></a>1.Git用户设定及其配置</h4><h5 id="1-Git配置"><a href="#1-Git配置" class="headerlink" title="1.Git配置"></a>1.Git配置</h5><p><code>Git</code> 提供了一个叫做 <code>git config</code> 的工具，专门用来配置或读取相应的工作环境变量。这些环境变量，决定了 <code>Git</code> 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><ul><li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</li><li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li><li>当前项目的 <code>Git</code> 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li></ul><a id="more"></a><h5 id="2-用户信息"><a href="#2-用户信息" class="headerlink" title="2.用户信息"></a>2.用户信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"runoob"</span></span><br><span class="line">$ git config --global user.email <span class="built_in">test</span>@runoob.com</span><br></pre></td></tr></table></figure><ul><li>如果用了 <code>--global</code> 选项，那么更改的配置文件就是位于你<strong>用户主目录下</strong>的那个，以后你所有的项目都会默认使用这里配置的用户信息。</li><li>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 <code>--global</code> 选项重新配置即可，新的设定保存在当前项目的 <code>.git/config</code> 文件里。</li></ul><h5 id="3-查看配置信息"><a href="#3-查看配置信息" class="headerlink" title="3.查看配置信息"></a>3.查看配置信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><h4 id="2-版本库的创建"><a href="#2-版本库的创建" class="headerlink" title="2.版本库的创建"></a>2.版本库的创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 初始化一个仓库</span></span><br><span class="line">git add &lt;file1&gt; &lt;file2&gt; ... &lt;filen&gt; <span class="comment"># 添加文件，并将文件修改添加到暂存区</span></span><br><span class="line">git commit -m &lt;message&gt; <span class="comment"># 添加文件到Git仓库，提交修改，将暂存区的所有内容提交到当前分支</span></span><br><span class="line">git commit -am <span class="string">"committed message"</span> <span class="comment"># 一次提交所有在暂存区中改动的文件到版本库</span></span><br></pre></td></tr></table></figure><h4 id="3-查看历史"><a href="#3-查看历史" class="headerlink" title="3.查看历史"></a>3.查看历史</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment"># 显示从最近到最远的提交日志 -- 显示最近的3次提交</span></span><br><span class="line">git <span class="built_in">log</span> --pretty =oneline <span class="comment"># 简略输出</span></span><br></pre></td></tr></table></figure><h4 id="4-版本回退"><a href="#4-版本回退" class="headerlink" title="4.版本回退"></a>4.版本回退</h4><p>在<code>git</code>中<code>HEAD</code>代表的是当前版本，可以将<code>HEAD</code>理解为一个指针（指向版本）。上一个版本是<code>HEAD^</code>,上上版本为<code>HEAD^^</code>…,若向上100个版本则为<code>HEAD^100</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ <span class="comment"># 返回至上一个版本</span></span><br><span class="line">git reset --hard 版本号 <span class="comment"># 达到指定版本</span></span><br><span class="line">git reflog <span class="comment"># 记录着每一次的命令（查看历史命令）</span></span><br></pre></td></tr></table></figure><h4 id="5-工作区与暂存区"><a href="#5-工作区与暂存区" class="headerlink" title="5.工作区与暂存区"></a>5.工作区与暂存区</h4><ul><li><p>工作区:包含整个项目的文件夹（<code>.git</code>隐藏文件夹不包含在工作区内）。</p></li><li><p>版本库:工作区中的隐藏目录<code>.git</code>，不算工作区，而是<code>Git</code>的版本库。</p><p><code>Git</code>的版本库里存了很多东西，其中最重要的就是称为<code>stage</code>（或者叫index）的暂存区，还有<code>Git</code>为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。具体结构分析参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897271968352576" target="_blank" rel="noopener">廖雪峰</a>此节。</p><p>其中在创建<code>Git</code>版本库时，<code>Git</code>自动为我们创建了唯一一个<code>master</code>分支。</p></li><li><p>暂存区:英文叫<code>stage</code>, 或<code>index</code>。一般存放在 “<code>.git</code>目录下” 下的<code>index</code>文件（<code>.git/index</code>）中，所以我们把暂存区有时也叫作索引（<code>index</code>）。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment"># 查看工作区的状态</span></span><br></pre></td></tr></table></figure><p><code>Git</code>版本控制下的文件状态的三种状态：</p><ul><li>已提交(committed)：该文件已经被安全地保存在本地数据库中了。</li><li>已修改(modified)：修改了某个文件，但还没有提交保存。</li><li>已暂存(staged)：把已修改的文件放在下次提交时要保存的清单中。</li></ul><h4 id="6-修改操作"><a href="#6-修改操作" class="headerlink" title="6.修改操作"></a>6.修改操作</h4><p><strong>注意:</strong><code>Git</code><strong>跟踪管理的是修改而非文件</strong>。每次需要将工作区的修改添加入到暂存区中，然后再进行<code>commit</code>，将暂存区中跟踪的修改的进行全部的提交。</p><p>其中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD -- &lt;file&gt; <span class="comment"># 可以查看工作区和版本库里面最新版本的区别</span></span><br><span class="line">git diff ANode BNode 用于比较项目中任意两个版本（分支）的差异，即A B两个节点之间的差异</span><br><span class="line">同理，可以比较两个分支之间的差异</span><br><span class="line">git diff --cached <span class="comment"># 比较当前索引和上次提交间的差异 以及在--name--status,只看文件列表</span></span><br></pre></td></tr></table></figure><p>几种撤销修改方式：</p><ol><li><p>未添加到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt; <span class="comment"># 让这个文件回到最近一次git commit或git add时的状态</span></span><br></pre></td></tr></table></figure></li><li><p>添加到暂存区未commit到分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt; <span class="comment"># 将暂存区的修改撤销(unstage) -- 即回到场景1(这里HEAD表示最新的版本)</span></span><br><span class="line">git checkout -- &lt;file&gt; <span class="comment"># 同场景1，丢弃工作区的修改</span></span><br></pre></td></tr></table></figure></li><li><p>添加到分支中，未推送至远端</p><ol><li>版本回退</li><li>进行情况2中的两步</li></ol></li></ol><h4 id="7-文件删除"><a href="#7-文件删除" class="headerlink" title="7.文件删除"></a>7.文件删除</h4><p>在<code>git add</code>后，即添加到版本库之后。见以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以test.txt文件为例</span></span><br><span class="line">git add test.txt <span class="comment"># 提交到版本库</span></span><br><span class="line">rm test.txt <span class="comment"># 删除工作区的文件</span></span><br></pre></td></tr></table></figure><p>此时就会出现工作区和版本库不一致的情况。通过<code>git status</code>命令查看工作区的状态。此时有两种选择：</p><ol><li><pre><code class="bash">git rm test.txt git commit -m <span class="string">"remove test.txt"</span> <span class="comment"># 提交至分支中</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   此时，文件就从版本库中被删除。</span><br><span class="line"></span><br><span class="line">2. &#96;&#96;&#96;bash</span><br><span class="line">   git checkout -- test.txt</span><br></pre></td></tr></table></figure>误删。但是版本库中存在，可以通过以上命令将其恢复到最新版本。`git checkout`是用版本库里的版本替换工作区的版本，故无论工作区是修改还是删除，都可以进行还原。</code></pre></li></ol><p><strong>注意:</strong>从来没有被添加到版本库就被删除的文件，是无法恢复的。同时恢复文件只能恢复到最新版本（<code>commit</code>的最新一次），会丢失最近一次提交后修改的内容。</p><h4 id="8-远程库添加的两种方式"><a href="#8-远程库添加的两种方式" class="headerlink" title="8.远程库添加的两种方式"></a>8.远程库添加的两种方式</h4><p><strong>前置工作</strong></p><p>在本地创建密匙，添加到<code>GitHub</code>上，这样便可以将本地与自己的<code>GitHub</code>账号关联起来。</p><h5 id="git-ssh"><a href="#git-ssh" class="headerlink" title="git-ssh"></a>git-ssh</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C [邮箱]</span><br></pre></td></tr></table></figure><p>其中的<strong>邮箱</strong>对应的是<code>Git</code>设置的邮箱。</p><p>【解释】：<code>ssh-agent</code> 是一种控制用来保存公钥身份验证所使用的私钥的程序，其实 <code>ssh-agent</code> 就是一个密钥管理器，运行 <code>ssh-agent</code> 以后，使用 <code>ssh-add</code> 将私钥交给 ssh-agent 保管，其他程序需要身份验证的时候可以将验证申请交给 <code>ssh-agent</code> 来完成整个认证过程，即进行公钥和秘钥的匹配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br></pre></td></tr></table></figure><p>添加生成的<code>SSH key</code>到<code>ssh-agent</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>最后登录<code>GitHub</code>，添加<code>ssh</code>，将id_rsa.pub(这里注意是添加公钥，不要添加成了秘钥)添加入<code>GitHub</code>设置中的<code>SSH</code>中。至此，本地和<code>GitHub</code>的关联完成。</p><ol><li><p>将本地创建的<code>Git</code>仓库同步至<code>GitHub</code>上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git &lt;ssh路径&gt; <span class="comment"># 添加成功后远程库的名字就是origin(默认)</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master <span class="comment"># 将本地库所有内容推送到远程库上</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong><code>git push</code>命令实际将当前分支<code>master</code>推送到远程；由于远程库是空的，在第一次推送<code>master</code>分支时，加上<code>-u</code>参数，<code>Git</code>不但会把本地的<code>master</code>分支内容推送到远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时刻简化命令。即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li><li><p>直接<code>clone</code>远程库，将 文件添加至到本地，再将本地库推送至远端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;ssh地址&gt; <span class="comment"># 带具体仓库</span></span><br><span class="line">/-------------修改完文件以后-----------/</span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git commit -m &lt;message&gt;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ol><h4 id="9-分支管理"><a href="#9-分支管理" class="headerlink" title="9.分支管理"></a>9.分支管理</h4><p>具体的理解与解释，可以参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424" target="_blank" rel="noopener">廖雪峰分支管理一节</a>，这里只做命令的汇总。</p><h5 id="9-1创建dev分支，再切换到dev分支"><a href="#9-1创建dev分支，再切换到dev分支" class="headerlink" title="9.1创建dev分支，再切换到dev分支"></a>9.1创建dev分支，再切换到dev分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;分支名&gt; <span class="comment"># -b参数代表创建并切换</span></span><br><span class="line">/----等价于以下两句----/</span><br><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git switch -c &lt;name&gt;</span><br></pre></td></tr></table></figure><h5 id="9-2-查看分支"><a href="#9-2-查看分支" class="headerlink" title="9.2 查看分支"></a>9.2 查看分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="comment"># 查看本地工程所有分支</span></span><br><span class="line">git branch -r <span class="comment"># 远端服务器分支</span></span><br><span class="line">git branch -a <span class="comment"># 远端服务器和本地服务器分支</span></span><br></pre></td></tr></table></figure><p>会列出所有分支，当前分支前面会标有<code>*</code>号。</p><h5 id="9-3分支切换"><a href="#9-3分支切换" class="headerlink" title="9.3分支切换"></a>9.3分支切换</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout [分支] <span class="comment"># 分支1切换分支2</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git switch &lt;name&gt;</span><br></pre></td></tr></table></figure><h5 id="9-4合并分支"><a href="#9-4合并分支" class="headerlink" title="9.4合并分支"></a>9.4合并分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于合并指定分支到当前分支。</span></span><br><span class="line">git merge &lt;指定分支&gt;</span><br></pre></td></tr></table></figure><h5 id="9-5删除分支"><a href="#9-5删除分支" class="headerlink" title="9.5删除分支"></a>9.5删除分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;分支名&gt;</span><br><span class="line">git branch -d -r branch_name <span class="comment"># 删除服务端分支 -&gt; 推送该分支到远端服务器 git push origin:branch_name</span></span><br></pre></td></tr></table></figure><p><code>HEAD</code>指向的就是当前分支，每一次提交，<code>master</code>分支都会向前移动一步。</p><h5 id="9-6-switch命令-用于切换分支"><a href="#9-6-switch命令-用于切换分支" class="headerlink" title="9.6 switch命令(用于切换分支)"></a>9.6 switch命令(用于切换分支)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git switch -c &lt;分支名&gt; <span class="comment"># 创建并切换到新的dev分支上</span></span><br><span class="line">git switch &lt;分支名&gt; <span class="comment"># 直接切换到已有的分支上</span></span><br></pre></td></tr></table></figure><h4 id="10-解决冲突"><a href="#10-解决冲突" class="headerlink" title="10.解决冲突"></a>10.解决冲突</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*   <span class="number">51</span>af5f6 (HEAD -&gt; master) conflict fixed2</span><br><span class="line"><span class="params">|\  </span></span><br><span class="line"><span class="params">|</span> * <span class="number">30</span>a56f8 conflict feature1</span><br><span class="line">* <span class="params">| 5e4ae6e conflict add fixed</span></span><br><span class="line"><span class="params">* |</span> d4fa5fc conflict fixed</span><br><span class="line"><span class="params">|\|</span> </span><br><span class="line"><span class="params">| * a4c77c0 feature11</span></span><br><span class="line"><span class="params">* |</span> cb7d18b &amp; feature11</span><br><span class="line"><span class="params">|/  </span></span><br><span class="line"><span class="params">* 44e1c04 feature1</span></span><br><span class="line"><span class="params">* bee796d (origin/master, origin/HEAD) 分支练习</span></span><br><span class="line"><span class="params">* ba3dee6 测试提交</span></span><br><span class="line"><span class="params">* 0caf900 Initial commit</span></span><br></pre></td></tr></table></figure><p>当<code>Git</code>无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把<code>Git</code>合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>查看分支合并图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit <span class="comment"># 详细版</span></span><br><span class="line">git <span class="built_in">log</span> --graph <span class="comment"># 简略版</span></span><br></pre></td></tr></table></figure><h4 id="11-分支管理"><a href="#11-分支管理" class="headerlink" title="11.分支管理"></a>11.分支管理</h4><p>通常，合并分支时，如果可能，<code>Git</code>会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在<code>merge</code>时生成一个新的<code>commit</code>。这样，从分支历史上就可以看出分支信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m "message" branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子</span></span><br><span class="line">sh-3.2# git merge --no-ff -m "merge with no-ff" dev</span><br><span class="line">Merge made by the 'recursive' strategy.</span><br><span class="line">test.txt | 1 +</span><br><span class="line">1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>因为本次合并要创建一个新的<code>commit</code>，所以加上<code>-m</code>参数，把<code>commit</code>描述写进去。</p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><p>目的：为了协同开发，保证我们自己一直能够使用自己的分支，不像之前那样合并完后就删除了。需要在哪个分支上创建分支，就先切换到该分支上，创建分支。</p><p>保存工作现场：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>查看工作现场：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><p>回复工作现场：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.恢复工作现场 2.删除stash内容</span></span><br><span class="line">git stash apply</span><br><span class="line">git stash drop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.恢复的同时，删除stash内容</span></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>复制一个特定的提交到当前分支(<code>bug</code>修复复制)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;commit&gt;</span><br></pre></td></tr></table></figure><h4 id="12-Feature分支"><a href="#12-Feature分支" class="headerlink" title="12.Feature分支"></a>12.Feature分支</h4><p>用于新功能的分开，开发一个新模块，最好创建一个<code>feature</code>分支，在此上面开发，完成后，合并，最后删除该<code>feature</code>分支。</p><p>强制删除:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D feature-vulcan</span><br></pre></td></tr></table></figure><h4 id="13-协作开发"><a href="#13-协作开发" class="headerlink" title="13. 协作开发"></a>13. 协作开发</h4><p>查看远程库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin master # 主分支</span><br><span class="line">git push origin dev # dev分支</span><br></pre></td></tr></table></figure><p>抓取分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:ssh</span><br><span class="line">git branch # 查看分支</span><br><span class="line">git checkout -b dev origin/dev # 创建远程orgin的dev分支到本地(为了和远程的dev分支对应),创建本地dev分支</span><br></pre></td></tr></table></figure><p>经修改commit后推送：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><p>如果产生冲突(最新提交和你试图推送的提交有冲突)，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line"></span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure><p>如果，<code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/dev dev</span><br><span class="line"></span><br><span class="line">Branch 'dev' set up to track remote branch 'dev' from 'origin'.</span><br></pre></td></tr></table></figure><p>如果出现冲突，就解决冲突(更新文件)即可。</p><p>多人协作工作模式：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin remote_branch:local_branch <span class="comment"># 将远端分支拉取到本地，并和本地分支合并，如果远端和本地分支名相同，可省略本地分支名部分</span></span><br><span class="line">git fetch origin remote_branch:local_branch <span class="comment"># 相比较git pull，没有将更新同本地合并，而是获取远端的更新</span></span><br></pre></td></tr></table></figure><h4 id="14-标签操作"><a href="#14-标签操作" class="headerlink" title="14.标签操作"></a>14.标签操作</h4><p>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个<code>commit id</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure><p>指定标签信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m "blablabla..."</span><br></pre></td></tr></table></figure><p>查看所有标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>查看标签信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;tagname&gt;</span><br></pre></td></tr></table></figure><p>删除标签:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tagname&gt;</span><br><span class="line">git tag -D &lt;tagname&gt;</span><br></pre></td></tr></table></figure><p>标签推送远端:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;tagname&gt;</span><br><span class="line">git push origin --tags # 一次性推送全部</span><br></pre></td></tr></table></figure><p>删除远程标签，先删除本地，再推送远端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></table></figure><h4 id="15-其他"><a href="#15-其他" class="headerlink" title="15.其他"></a>15.其他</h4><p>修改最新<code>commit</code>提交的信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>修改多次的信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i commit_id ## 只能修改commit_id 之前的log message</span><br><span class="line">git rebase -i --root  ## 修改第一次及之前的log message</span><br><span class="line">git rebase -i HEAD~2   ## 修改倒数第二次及之前的log message</span><br><span class="line">git rebase -i HEAD~1   ## 修改最后一次提交的log message</span><br></pre></td></tr></table></figure><blockquote><p>未完待续…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java初试MVC及三层架构</title>
      <link href="/2020/08/16/Java%E5%88%9D%E8%AF%95MVC%E5%8F%8A%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
      <url>/2020/08/16/Java%E5%88%9D%E8%AF%95MVC%E5%8F%8A%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>最近又捡起了对<code>Java</code>的学习，通过对一个实例的介绍，总结下此次对<code>Web</code>开发中<code>MVC</code>三层架构的学习，以便用于日后的复习。</p><h4 id="一、-MVC"><a href="#一、-MVC" class="headerlink" title="一、 MVC"></a>一、 MVC</h4><p>简单的先介绍下MVC模式：</p><ul><li><p>M（Model）：<code>JavaBean</code>。用于完成具体的业务操作。</p><p><code>JavaBean</code>：<code>Java</code>中特殊的类.</p><p><code>JavaBean</code>满足条件：</p><ul><li><code>public</code>修饰的类，并提供<code>public</code>无参构造方法</li><li>所有的属性都是<code>private</code>修饰</li><li>提供<code>getter</code>和<code>setter</code>方法</li></ul><p>使用层面：</p><ul><li>封装业务逻辑：<code>dao</code>层封装对数据库的底层操作</li><li>封装数据：<code>domain</code>层。对数据库中所要查询对象的封装</li></ul></li><li><p>V（View）：视图。用于数据的展示。</p><ul><li>页面的展示</li><li>与用户的交互</li></ul></li><li><p>C（Controller）：控制器。由Servlet实现控制器。</p><p>主要功能：</p><ul><li>获取用户的输入</li><li>调用模型，将请求交给模型进行处理</li><li>将数据交给视图进行展示</li></ul></li></ul><a id="more"></a><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dECMWQ.png" alt="MVC模式"/><p>首先浏览器（通过View页面）向服务器端进行请求（可以是表单请求、超链接、AJAX请求等），<code>Controller</code>层获取浏览器请求的数据进行解析，调用模型；模型进行业务逻辑的操作，并将处理结果返回给<code>Controller</code>层；<code>Controller</code>层再将相应的数据交给<code>View</code>层，进行数据展示到客户端。</p><h4 id="二、三层架构"><a href="#二、三层架构" class="headerlink" title="二、三层架构"></a>二、三层架构</h4><p>三层架构：视图层View、服务层Service、与持久层Dao。</p><ul><li><code>View</code>:用于接收用户提交请求的代码。</li><li><code>Service</code>:用于编写系统的业务逻辑。（最重要的一层）</li><li><code>Dao</code>:对数据库进行最直接的操作。即：对数据库的增删改查。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dEi6PO.png" alt="三层架构"></p><p>dao层中，定义了对数据库的增删改查的接口。而service层中即对数据的具体业务操作，用于组合dao层中的接口方法。web层中则用于对用户数据的接收和发送。上图很好的解释了MVC与三层架构之间的关系。</p><h4 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h4><p>通过<code>servlet</code>、<code>jsp</code>、<code>Mysql</code>、<code>JDBCTempleat</code>、<code>Duird</code>、<code>BeanUtils</code>、<code>Tomcat</code>等技术完成用户信息列表展示的实例。此部分着重解释后端代码的实现。</p><h5 id="1-查询所有用户信息"><a href="#1-查询所有用户信息" class="headerlink" title="1.查询所有用户信息"></a>1.查询所有用户信息</h5><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dEGRSJ.png" alt=""></p><p>当点击前端页面查询按钮时，此时通过对服务器端的请求，到<code>web</code>层中的<code>Controller</code>层，触发<code>FindUserServlet</code>。由<code>Controller</code>调用<code>Service</code>层中的模型，继而<code>Service</code>层通过<code>dao</code>层获取全部的用户信息，封装到<code>List&lt;User&gt;</code>集合中。返回给<code>Service</code>层，再通过<code>Service</code>层将用户信息返回给<code>Controller</code>层。<code>Web</code>层中的<code>Controller</code>将数据进行存储转发给<code>View</code>，进行数据的解析展示，返回给客户端。</p><p><code>findAll方法：</code></p><details><summary>dao层中findAll接口的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">    List&lt;User&gt; users = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>service层中findAll接口的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>web层中UserListServlet</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/userListServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        List&lt;User&gt; users = userService.findAll();</span><br><span class="line">        request.setAttribute(<span class="string">"users"</span>, users);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/list.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h5 id="2-增加用户信息"><a href="#2-增加用户信息" class="headerlink" title="2.增加用户信息"></a>2.增加用户信息</h5><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dEthOs.png" alt="增加用户信息"></p><p>当客户端点击提交按钮时，此次对服务器端的请求带着表单的数据。根据我们上面对三层架构以及<code>Controller</code>层的介绍可知，由其进行数据的接收。这里即为<code>AddUserServlet</code>对获取的数据进行处理、封装。将封装好的数据传给Service层（Model),即为<code>UerService</code>，进行业务逻辑的操作。再通过<code>dao</code>层对数据库进行相应的访问。</p><details><summary>dao层中add接口的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql = <span class="string">"insert into user values(null,?,?,?,?,?,?,null,null)"</span>;</span><br><span class="line">    template.update(sql, user.getName(), user.getGender(), user.getAge(), user.getAddress(), user.getQq(), user.getEmail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>Service层中add接口的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    userDao.addUser(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></details><details><summary>web层中addServlet的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/addServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap(); <span class="comment">// 将请求参数进行Map集合的封装</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(user, parameterMap);<span class="comment">//将获取到的值封装到User对象中</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        service.addUser(user);</span><br><span class="line">        HttpSession session = request.getSession(); <span class="comment">// 再进行重定向之前，将需要添加的User对象设置到session中，以便后续对其的获取使用</span></span><br><span class="line">        session.setAttribute(<span class="string">"addUser"</span>, user);</span><br><span class="line">        response.sendRedirect(request.getContextPath() + <span class="string">"/findUserByPageServlet"</span>);<span class="comment">//重定向至View层</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>思考：</strong></p><p>在上一个方法查找所有的用户时，在最后，我们将获取到的数据传给view层，采用的是存储转发，而在这里，对用户的添加，我们却采用的是重定向（实际上，增、删、改都是采用的重定向）。这是为什么呢？</p><p>这里先对重定向和存储转发的几个特点进行简单的比较：</p><ul><li><p>存储转发：一种在服务器内部的资源跳转方式。</p><p>特点：</p><ol><li>浏览器地址栏不会发生变化</li><li><strong>只能转发到当前服务器内部资源中</strong></li><li><strong>转发是一次请求</strong></li></ol><p>最重要的一点便是转发只在当前服务器内部进行，请求也只有一次。这样做带来的一点用处便是，request域中带有的请求是可以在多次资源跳转中进行共享的。在使用时，只需要添加资源路径即可。</p></li><li><p>重定向：具有多次的请求。其跳转在于客户端与服务器端之间，每次请求都是独立的，存在新的<code>request</code>与<code>response</code>。</p><p>特点：</p><ol><li>重定向之后地址栏会发生变化</li><li>重定向可以访问其他站点（服务器）的资源</li><li>重定向是两次请求。故不能使用<code>request</code>域共享数据。</li></ol></li></ul><p>其中，重定向可避免在用户重新加载页面时，两次调用相同的动作。即，访问数据库时，增删改使用重定向。<strong>当前我的理解是</strong>：转发只有一次请求，故当重新加载页面时，会沿着之前的请求再请求一次（这句话可能比较绕），在页面进行展示全部用户数据之前，又会将数据库添加用户的操作进行一遍，所以会造成表单的重复提交；而重定向中是多次（两次）请求，所以只复用”最近一次“请求（因为每次请求是独立的，之前的请求都不在了），这里只是对页面进行全部用户的展示。</p><p><strong>重定向：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dEBTKS.png" alt=""></p><p><strong>存储转发：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dEBIv8.png" alt="存储转发"></p><h5 id="3-用户信息更改"><a href="#3-用户信息更改" class="headerlink" title="3.用户信息更改"></a>3.用户信息更改</h5><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dEyIij.png" alt="update"></p><p>思路：用户信息的更改相对前面的用户显示的展示和增加要多了一些步骤。首先，在我们需要对信息进行更改时，需要将原信息展示给我们，在原信息的基础上进行修改，即：是查询到所要修改的用户，将其信息进行回显。其次，当我们对用户信息更改完毕以后，通过对数据库的访问，将对应的数据库信息进行Update操作。最后，通过view层，对列表信息进行展示传送给客户端。这里，每个用户都有一个唯一标识符–id主键，所以当我们拿到主键id时，其实也就获得了对应的数据库中的User对象，后面的操作也就顺理成章了。</p><ol><li><code>FindUserServlet</code> – 查询需要修改的用户，用于信息的回显</li></ol><details><summary>web层中FindUserServlet的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/findUserServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindUserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        String id = request.getParameter(<span class="string">"id"</span>); <span class="comment">// 获取id</span></span><br><span class="line">        UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        User user = service.findUser(Integer.parseInt(id));<span class="comment">// 通过id返回User对象</span></span><br><span class="line">        request.setAttribute(<span class="string">"user"</span>, user);<span class="comment">// 查找操作所以存储-转发，将用户信息封装传至view层</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/update.jsp"</span>).forward(request,response);<span class="comment">// 即传至update.jsp页面进行解析</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>service层中findUser的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    User user = userDao.findUser(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>dao层中findUser接口的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql = <span class="string">"select * from user where id = ?"</span>;</span><br><span class="line">    User user = template.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>), <span class="title">id</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>以上是获取到需要修改的对象，然后对用户信息进行一个回显操作。</p><p>下面，便是对用户信息进行修改。</p><ol start="2"><li><code>UpdateUserServlet</code> – 修改用户信息，对数据库数据进行修改</li></ol><details><summary>web层中UpdateUserServlet的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/updateUserServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateUserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(user, parameterMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> id = user.getId();</span><br><span class="line">        UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        service.updateUser(id, user);<span class="comment">// 对用户信息进行修改</span></span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">"/findUserByPageServlet"</span>);<span class="comment">//View层，信息的展示</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>service层中UpdateUser接口的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(<span class="keyword">int</span> id, User user)</span> </span>&#123;</span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    userDao.updateUser(id, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>dao层中UpdateUser抽象方法的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(<span class="keyword">int</span> id, User user)</span> </span>&#123;</span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql = <span class="string">"update user set name = ?,age=?,gender=?,address=?,qq=?,email=? where id=?"</span>;</span><br><span class="line">    template.update(sql, user.getName(), user.getAge(), user.getGender(), user.getAddress(), user.getQq(), user.getEmail(), user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h5 id="4-用户的删除"><a href="#4-用户的删除" class="headerlink" title="4.用户的删除"></a>4.<strong>用户的删除</strong></h5><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dE26AS.png" alt="用户的删除"></p><p>用户的删除同用户的更新类似，这里同样是获取用户的id，通过id查询到数据库中相应的数据，然后将数据进行删除。</p><details><summary>dao层中deleteUser抽象方法的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql = <span class="string">"delete from user where id = ?"</span>;</span><br><span class="line">    template.update(sql, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h5 id="5-删除选中功能"><a href="#5-删除选中功能" class="headerlink" title="5.删除选中功能"></a>5.<strong>删除选中功能</strong></h5><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dE2HNF.png" alt="删除选中"></p><p>这里删除选中，是对数据进行批量删除。其中思路同单个用户的删除类似，这里是获取一个id的集合，然后通过循环遍历id删除用户即可。这里的难点在于如何通过前端获取到这些id传递到web层。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">onclick</span>=<span class="string">"select()"</span>&gt;</span>删除选中<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义<code>Javascript</code>方法。</p><p>其中:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> uids = <span class="built_in">document</span>.getElementsByName(<span class="string">"uid"</span>);<span class="comment">// 获取属性为uid的标签 -- 这里给所有用户指定的class属性值即为uid,所以是为了获取每一个用户的信息</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; uids.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> checked = uids[i].checked;</span><br><span class="line">        <span class="keyword">if</span> (checked) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123; <span class="comment">// 判断id是否为空 （前端防空的校验）</span></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="built_in">window</span>.confirm(<span class="string">"您确认删除么？"</span>); <span class="comment">// 用于确认删除</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"s_form"</span>).submit(); <span class="comment">// 提交表单</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先获取被选中的<code>uid</code>，判断是否有用户被选中，这里是为了防止传入到后端的值为空，而报空指针异常。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;userByPages.user&#125;"</span> <span class="attr">var</span>=<span class="string">"user"</span> <span class="attr">varStatus</span>=<span class="string">"u"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"uid"</span> <span class="attr">value</span>=<span class="string">"$&#123;user.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;u.count&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.gender&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.address&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.qq&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.email&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-sm"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/findUserServlet?id=$&#123;user.id&#125;"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-sm"</span> <span class="attr">href</span>=<span class="string">"javascript:give_msg($&#123;user.id&#125;)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上便是由前端获取需要删除的用户的id。</p><details><summary>web层中DeleteSelectServlet的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/delSelectServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelSelectServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        String[] uids = request.getParameterValues(<span class="string">"uid"</span>);<span class="comment">// 获取用户id的数组</span></span><br><span class="line">        UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        service.delByIds(uids);</span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">"/findUserByPageServlet"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>service层中DelByIds接口的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delByIds</span><span class="params">(String[] ids)</span> </span>&#123;</span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    <span class="keyword">int</span> id_count;</span><br><span class="line">    <span class="keyword">if</span> (ids != <span class="keyword">null</span> &amp;&amp; ids.length != <span class="number">0</span>) &#123; <span class="comment">// 删除选项的后台验证 -- 防止参数为空（后端判空的校验）</span></span><br><span class="line">        <span class="keyword">for</span> (String id : ids) &#123;</span><br><span class="line">        id_count = Integer.parseInt(id);</span><br><span class="line">        userDao.deleteUser(id_count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>dao层中DeleteUser接口的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql = <span class="string">"delete from user where id = ?"</span>;</span><br><span class="line">    template.update(sql, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>批量删除的注意事项：</p><ul><li>id获取的批量方式</li><li>删除前的确认操作</li><li>防止空参数时的删除操作（前后端都进行校验）</li></ul><h5 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6.分页查询"></a>6.<strong>分页查询</strong></h5><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dEb8BQ.png" alt="页面基础信息"></p><p>在客户端对用户列表进行分页展示的基本思路，即需要获取以下的信息：</p><ul><li>首先确定数据库中总的条目数 – totalCount;</li><li>总的页面数量 – totalPage</li><li>获取每页的数据 – List集合</li><li>获取当前的页码 – currentPage</li><li>每页显示的条数 – rows</li></ul><p><code>totalCount:</code>可以借鉴<code>findAll()</code>的思路，统计出总条目数。    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">totalCount = <span class="keyword">select</span> <span class="keyword">count</span>(*) frow <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><code>rows:</code>有客户端进行传递到参数，即预先设定好的请求参数。</p><p><code>totalPage:</code>totalCount/rows，上取。</p><p><code>currentPage:</code>包含在客户端的请求参数中。</p><p><code>List集合:</code>获取起始索引<code>index</code>以及上面的<code>rows</code>即可确定当前页面需要显示的条目数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index = (currentPage - 1)*rows</span><br><span class="line">list = <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">limit</span> <span class="keyword">index</span>,<span class="keyword">rows</span></span><br></pre></td></tr></table></figure><p>还记得前面所说的<code>Model</code>中操作的是<code>JavaBean</code>对象么，所以这里我们将以上的信息封装成一个<code>PageBean</code>对象。以便我们进行业务逻辑的操作，最终将整个<code>PageBean</code>进行返回交给Web层的<code>Controller</code>，再由<code>Controller</code>传递给View视图，进行展示。逻辑操作见下图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dEbYAs.png" alt=""></p><p><strong>扩展:</strong>对数据的查询进行组合查询，即复杂功能的查询。</p><details><summary>web层中FindUserByPageServlet的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//findUserByPageServlet?currentPage=2&amp;rows=5</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/findUserByPageServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindUserByPageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        String currentPage = request.getParameter(<span class="string">"currentPage"</span>);</span><br><span class="line">        String rows = request.getParameter(<span class="string">"rows"</span>);</span><br><span class="line">        <span class="keyword">if</span> (currentPage == <span class="keyword">null</span> || <span class="string">""</span>.equals(currentPage)) &#123; <span class="comment">// 当首次进入到列表查询页面时，用于判空操作，即给currentPage,rows赋初始值。</span></span><br><span class="line">            currentPage = <span class="string">"1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rows == <span class="keyword">null</span> || <span class="string">""</span>.equals(rows)) &#123;</span><br><span class="line">            rows = <span class="string">"5"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String[]&gt; condition = request.getParameterMap();<span class="comment">//用于复杂条件的查询，本小结可暂时忽略</span></span><br><span class="line"></span><br><span class="line">        UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        PageBean&lt;User&gt; userByPage = service.findUserByPage(Integer.parseInt(currentPage), Integer.parseInt(rows),condition);</span><br><span class="line">        request.setAttribute(<span class="string">"userByPages"</span>, userByPage);</span><br><span class="line">        request.setAttribute(<span class="string">"condition"</span>,condition);<span class="comment">// 后续转发时，条件的回显</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/list.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>Service层中findUserByPage抽象方法的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageBean&lt;User&gt; <span class="title">findUserByPage</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> rows, Map&lt;String, String[]&gt; condition)</span> </span>&#123;</span><br><span class="line">    PageBean&lt;User&gt; userPageBean = <span class="keyword">new</span> PageBean&lt;&gt;();</span><br><span class="line">    <span class="comment">// 页数不能小于1</span></span><br><span class="line">    <span class="keyword">if</span> (currentPage &lt;= <span class="number">0</span>) &#123; </span><br><span class="line">        currentPage = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询总条目数</span></span><br><span class="line">    UserDao dao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    <span class="keyword">int</span> totalCount = dao.findTotalCount(condition);</span><br><span class="line">    <span class="comment">// 计算出总页数</span></span><br><span class="line">    <span class="keyword">int</span> totalPageCount = (totalCount % rows == <span class="number">0</span>) ? (totalCount / rows) : (totalCount / rows + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 页数不能大于总页数</span></span><br><span class="line">    <span class="keyword">if</span> (currentPage &gt; totalPageCount) &#123;</span><br><span class="line">        currentPage = totalPageCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询的索引数</span></span><br><span class="line">    <span class="keyword">int</span> starIndex = (currentPage - <span class="number">1</span>) * rows;</span><br><span class="line">    <span class="comment">// 返回出所要查询的对象数目</span></span><br><span class="line">    List&lt;User&gt; users = dao.findByPage(starIndex, rows,condition);</span><br><span class="line">    <span class="comment">// 设置对象的属性</span></span><br><span class="line">    userPageBean.setTotalCount(totalCount);</span><br><span class="line">    userPageBean.setTotalPage(totalPageCount);</span><br><span class="line">    userPageBean.setUser(users);</span><br><span class="line">    userPageBean.setCurrentPage(currentPage); <span class="comment">// 当前页数</span></span><br><span class="line">    userPageBean.setRows(rows); <span class="comment">// 每页展示的条目数</span></span><br><span class="line">    <span class="keyword">return</span> userPageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details><summary>dao层中findTotalCount及findByPage抽象方法的实现</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTotalCount</span><span class="params">(Map&lt;String, String[]&gt; condition)</span> </span>&#123; <span class="comment">// search condition</span></span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql = <span class="string">"select count(*) from user where 1=1 "</span>;</span><br><span class="line">    List&lt;Object&gt; params = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(sql);</span><br><span class="line">    Set&lt;String&gt; keySet = condition.keySet(); <span class="comment">// 复杂条件的查询</span></span><br><span class="line">    <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"currentPage"</span>.equals(key) || <span class="string">"rows"</span>.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String value = condition.get(key)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; value != <span class="string">""</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">" and "</span> + key + <span class="string">" like ?"</span>);</span><br><span class="line">            params.add(<span class="string">"%"</span> + value + <span class="string">"%"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    sql = sb.toString();</span><br><span class="line">    Integer count = template.queryForObject(sql, Integer<span class="class">.<span class="keyword">class</span>, <span class="title">params</span>.<span class="title">toArray</span>())</span>;</span><br><span class="line">    System.out.println(sql);</span><br><span class="line">    System.out.println(params);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByPage</span><span class="params">(<span class="keyword">int</span> starIndex, <span class="keyword">int</span> rows, Map&lt;String, String[]&gt; condition)</span> </span>&#123; <span class="comment">// 根据索引返回的列表对象</span></span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    String sql = <span class="string">"select * from user where 1=1"</span>;</span><br><span class="line">    List&lt;Object&gt; params = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(sql);</span><br><span class="line">    Set&lt;String&gt; keySet = condition.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : keySet) &#123; <span class="comment">// 用于复杂条件的查询</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"currentPage"</span>.equals(key) || <span class="string">"rows"</span>.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String value = condition.get(key)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; value != <span class="string">""</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">" and "</span> + key + <span class="string">" like ?"</span>);</span><br><span class="line">            params.add(<span class="string">"%"</span> + value + <span class="string">"%"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    params.add(starIndex);</span><br><span class="line">    params.add(rows);</span><br><span class="line">    sb.append(<span class="string">" limit ?,? "</span>);</span><br><span class="line">    sql = sb.toString();</span><br><span class="line">    List&lt;User&gt; users = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>), <span class="title">params</span>.<span class="title">toArray</span>())</span>;</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h5 id="7-复杂条件的分页查询"><a href="#7-复杂条件的分页查询" class="headerlink" title="7.复杂条件的分页查询"></a>7.<strong>复杂条件的分页查询</strong></h5><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/08/16/dV8AW4.png" alt=""></p><p>组合条件的查询，在于<code>SQL</code>语句的编写。</p><ol><li>定义初始化<code>SQL</code>语句： <code>select count(*) from user where 1=1</code>再将查询条件进行拼接，再拼接之前先进行判空操作。</li></ol><p><code>web</code>、<code>service</code>、<code>dao</code>层的编写在上一个小节中已包含。</p><h4 id="四、前端代码展示"><a href="#四、前端代码展示" class="headerlink" title="四、前端代码展示"></a>四、前端代码展示</h4><details><summary>add.jsp</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></span><br><span class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">liz</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2020</span>/<span class="attr">8</span>/<span class="attr">9</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Time:</span> <span class="attr">19:17</span></span></span><br><span class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></span><br><span class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用Edge最新的浏览器的渲染方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。</span></span><br><span class="line"><span class="comment">    width: 默认宽度与设备的宽度相同</span></span><br><span class="line"><span class="comment">    initial-scale: 初始的缩放比，为1:1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1. 导入CSS的全局样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. jQuery导入，建议使用1.9以上的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-2.1.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 导入bootstrap的js文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.error</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'form'</span>).onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> checkName() &amp;&amp; checkAge() &amp;&amp; checkQQ() &amp;&amp; checkEmail();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).onblur = checkName;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"age"</span>).onblur = checkAge;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"qq"</span>).onblur = checkQQ;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).onblur = checkEmail;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">checkName</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> regExp = <span class="regexp">/(^([a-zA-Z]+\s)*[a-zA-Z]+$)|(^[\u4e00-\u9fa5]+$)/</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> flag = regExp.test(name);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> s_name = <span class="built_in">document</span>.getElementById(<span class="string">"s_name"</span>);</span></span><br><span class="line">            if (flag) &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                s_name.innerHTML = '<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/gou.png"</span> <span class="attr">width</span>=<span class="string">"35px"</span> <span class="attr">height</span>=<span class="string">"25px"</span>&gt;</span>';</span></span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                s_name.innerHTML = <span class="string">"请输入正确姓名"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> flag;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">checkAge</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> age = <span class="built_in">document</span>.getElementById(<span class="string">"age"</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> s_age = <span class="built_in">document</span>.getElementById(<span class="string">"s_age"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> regExp = <span class="regexp">/^(([0-9]|[1-9][1-9]|1[0-7][0-9])(\\.[0-9]+)?|180)$/</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> flag = regExp.test(age);</span></span><br><span class="line">            if (flag) &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                s_age.innerHTML = '<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/gou.png"</span> <span class="attr">width</span>=<span class="string">"35px"</span> <span class="attr">height</span>=<span class="string">"25px"</span>&gt;</span>';</span></span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                s_age.innerHTML = <span class="string">"请输入正确格式的年龄"</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> flag;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">checkQQ</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> qq = <span class="built_in">document</span>.getElementById(<span class="string">"qq"</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> regExp = <span class="regexp">/^[1-9][0-9]&#123;4,14&#125;$/</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> flag = regExp.test(qq);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> s_qq = <span class="built_in">document</span>.getElementById(<span class="string">"s_qq"</span>);</span></span><br><span class="line">            if (flag) &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                s_qq.innerHTML = '<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/gou.png"</span> <span class="attr">width</span>=<span class="string">"35px"</span> <span class="attr">height</span>=<span class="string">"25px"</span>&gt;</span>';</span></span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                s_qq.innerHTML = <span class="string">'请输入正确格式的qq号'</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> flag;</span></span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> regExp = <span class="regexp">/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-9_-]&#123;2,3&#125;)&#123;1,2&#125;)$/</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> flag = regExp.test(email);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> s_email = <span class="built_in">document</span>.getElementById(<span class="string">"s_email"</span>);</span></span><br><span class="line">            if (flag) &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                s_email.innerHTML = '<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/gou.png"</span> <span class="attr">width</span>=<span class="string">"35px"</span> <span class="attr">height</span>=<span class="string">"25px"</span>&gt;</span>';</span></span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                s_email.innerHTML = <span class="string">'请输入正确格式的email地址'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> flag;</span></span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>添加联系人页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/addServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"请输入姓名"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sapn</span> <span class="attr">id</span>=<span class="string">"s_name"</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>男</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"女"</span>/&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"age"</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"age"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">placeholder</span>=<span class="string">"请输入年龄"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sapn</span> <span class="attr">id</span>=<span class="string">"s_age"</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"address"</span>&gt;</span>籍贯：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"陕西"</span>&gt;</span>陕西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"北京"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"南京"</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"安徽"</span>&gt;</span>安徽<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"上海"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"qq"</span>&gt;</span>QQ：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"qq"</span> <span class="attr">name</span>=<span class="string">"qq"</span> <span class="attr">placeholder</span>=<span class="string">"请输入QQ号码"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sapn</span> <span class="attr">id</span>=<span class="string">"s_qq"</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱地址"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sapn</span> <span class="attr">id</span>=<span class="string">"s_email"</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">id</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"返回"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></details><details><summary>index.jsp</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></span><br><span class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">liz</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2020</span>/<span class="attr">8</span>/<span class="attr">9</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Time:</span> <span class="attr">14:20</span></span></span><br><span class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></span><br><span class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 1. 导入CSS的全局样式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. jQuery导入，建议使用1.9以上的版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-2.1.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3. 导入bootstrap的js文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">          <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/findUserByPageServlet"</span> <span class="attr">style</span>=<span class="string">"text-decoration:none;font-size:33px"</span>&gt;</span>查询所有用户信息</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></details><details><summary>list.jsp</summary><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!-- 网页使用的语言 --&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!-- 指定字符集 --&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;!-- 使用Edge最新的浏览器的渲染方式 --&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;!-- viewport视口：网页可以根据设置的宽度自动进行适配，在浏览器的内部虚拟一个容器，容器的宽度与设备的宽度相同。</span><br><span class="line">    width: 默认宽度与设备的宽度相同</span><br><span class="line">    initial-scale: 初始的缩放比，为<span class="number">1</span>:<span class="number">1</span> --&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">    &lt;!-- 上述<span class="number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;用户信息管理系统&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">1</span>. 导入CSS的全局样式 --&gt;</span><br><span class="line">    &lt;link href=<span class="string">"css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">    &lt;!-- <span class="number">2</span>. jQuery导入，建议使用<span class="number">1.9</span>以上的版本 --&gt;</span><br><span class="line">    &lt;script src="js/jquery-2.1.0.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- <span class="number">3</span>. 导入bootstrap的js文件 --&gt;</span><br><span class="line">    &lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        td, th &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function">function <span class="title">give_msg</span><span class="params">(id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> flag = confirm(<span class="string">"您确定删除么？"</span>);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                location.href = <span class="string">'$&#123;pageContext.request.contextPath&#125;/deleteServlet?id='</span> + id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">function <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> uids = document.getElementsByName(<span class="string">"uid"</span>);</span><br><span class="line">            <span class="keyword">var</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; uids.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">var</span> checked = uids[i].checked;</span><br><span class="line">                <span class="keyword">if</span> (checked) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">var</span> flag = window.confirm(<span class="string">"您确认删除么？"</span>);</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    document.getElementById(<span class="string">"s_form"</span>).submit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        window.onload = function () &#123;</span><br><span class="line"></span><br><span class="line">            document.getElementById(<span class="string">"selectAll"</span>).onclick = function () &#123;</span><br><span class="line">                <span class="keyword">var</span> uids = document.getElementsByName(<span class="string">"uid"</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; uids.length; ++i) &#123;</span><br><span class="line">                    uids[i].checked = <span class="keyword">this</span>.checked; <span class="comment">// this代表 --&gt; document.getElementById("selectAll")组件</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;h3 style="text-align: center"&gt;用户信息列表&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-inline"</span> style=<span class="string">"float: left"</span> action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/findUserByPageServlet"</span></span><br><span class="line">              method=<span class="string">"post"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">                &lt;label for="name"&gt;姓名&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"name"</span> value=<span class="string">"$&#123;condition.name[0]&#125;"</span>&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">                &lt;label for="address"&gt;籍贯&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> name=<span class="string">"address"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"address"</span> value=<span class="string">"$&#123;condition.address[0]&#125;"</span>&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">                &lt;label for="email"&gt;Email&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> name=<span class="string">"email"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"email"</span> value=<span class="string">"$&#123;condition.email[0]&#125;"</span>&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;button type="submit" name="submit" class="btn btn-default"&gt;查询&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &lt;div style=<span class="string">"float: right;margin: 3px"</span>&gt;</span><br><span class="line">            &lt;a class="btn btn-primary" href="$&#123;pageContext.request.contextPath&#125;/add.jsp"&gt;添加联系人&lt;/a&gt;</span><br><span class="line">            &lt;a class="btn btn-primary" href="javascript:void(0);" onclick="select()"&gt;删除选中&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/delSelectServlet"</span> method=<span class="string">"post"</span> id=<span class="string">"s_form"</span>&gt;</span><br><span class="line">        &lt;table border=<span class="string">"1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"table table-bordered table-hover"</span>&gt;</span><br><span class="line">            &lt;tr <span class="class"><span class="keyword">class</span></span>=<span class="string">"success"</span>&gt;</span><br><span class="line">                &lt;th&gt;&lt;input type="checkbox" id="selectAll"&gt;&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;籍贯&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;QQ&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;邮箱&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;c:forEach items=<span class="string">"$&#123;userByPages.user&#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span> varStatus=<span class="string">"u"</span>&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;&lt;input type="checkbox" name="uid" value="$&#123;user.id&#125;"&gt;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;u.count&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;user.gender&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;user.address&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;user.qq&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;$&#123;user.email&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default btn-sm"</span></span><br><span class="line">                           href="$&#123;pageContext.request.contextPath&#125;/findUserServlet?id=$&#123;user.id&#125;"&gt;修改&lt;/a&gt;&amp;nbsp;</span><br><span class="line">                        &lt;a class="btn btn-default btn-sm" href="javascript:give_msg($&#123;user.id&#125;)"&gt;删除&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/c:forEach&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;nav aria-label=<span class="string">"Page navigation"</span>&gt;</span><br><span class="line">            &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"pagination"</span>&gt;</span><br><span class="line">                &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;userByPages.currentPage - 1==0&#125;"</span>&gt;</span><br><span class="line">                &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"disabled"</span>&gt;</span><br><span class="line">                    &lt;/c:if&gt;</span><br><span class="line">                    &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;userByPages.currentPage - 1 &gt; 0&#125;"</span>&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;/c:if&gt;</span><br><span class="line">                    &lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/findUserByPageServlet?currentPage=$&#123;userByPages.currentPage - 1&#125;&amp;rows=$&#123;5&#125;&amp;name=$&#123;condition.name[0]&#125;&amp;address=$&#123;condition.address[0]&#125;&amp;email=$&#123;condition.email[0]&#125;"</span></span><br><span class="line">                       aria-label=<span class="string">"Previous"</span>&gt;</span><br><span class="line">                        &lt;span aria-hidden="true"&gt;&amp;laquo;&lt;/span&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"$&#123;userByPages.totalPage&#125;"</span> <span class="keyword">var</span>=<span class="string">"num"</span> step=<span class="string">"1"</span> varStatus=<span class="string">"c"</span>&gt;</span><br><span class="line">                    &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;userByPages.currentPage==num&#125;"</span>&gt;</span><br><span class="line">                        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;</span><br><span class="line">                            &lt;a href="$&#123;pageContext.request.contextPath&#125;/findUserByPageServlet?currentPage=$&#123;num&#125;&amp;rows=$&#123;5&#125;&amp;name=$&#123;condition.name[0]&#125;&amp;address=$&#123;condition.address[0]&#125;&amp;email=$&#123;condition.email[0]&#125;"&gt;$&#123;num&#125;&lt;/a&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                    &lt;/c:if&gt;</span><br><span class="line">                    &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;userByPages.currentPage!=num&#125;"</span>&gt;</span><br><span class="line">                        &lt;li&gt;</span><br><span class="line">                            &lt;a href="$&#123;pageContext.request.contextPath&#125;/findUserByPageServlet?currentPage=$&#123;num&#125;&amp;rows=$&#123;5&#125;&amp;name=$&#123;condition.name[0]&#125;&amp;address=$&#123;condition.address[0]&#125;&amp;email=$&#123;condition.email[0]&#125;"&gt;$&#123;num&#125;&lt;/a&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                    &lt;/c:if&gt;</span><br><span class="line">                &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">                &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;userByPages.currentPage + 1 &gt; userByPages.totalPage&#125;"</span>&gt;</span><br><span class="line">                &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"disabled"</span>&gt;</span><br><span class="line">                    &lt;/c:if&gt;</span><br><span class="line">                    &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;userByPages.currentPage + 1 &lt;= userByPages.totalPage&#125;"</span>&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;/c:if&gt;</span><br><span class="line">                    &lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/findUserByPageServlet?currentPage=$&#123;userByPages.currentPage + 1&#125;&amp;rows=$&#123;5&#125;&amp;name=$&#123;condition.name[0]&#125;&amp;address=$&#123;condition.address[0]&#125;&amp;email=$&#123;condition.email[0]&#125;"</span></span><br><span class="line">                       aria-label=<span class="string">"Next"</span>&gt;</span><br><span class="line">                        &lt;span aria-hidden="true"&gt;&amp;raquo;&lt;/span&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;span style=<span class="string">"font-size: 25px;padding-left: 10px"</span>&gt;</span><br><span class="line">                    共$&#123;userByPages.totalCount&#125;条记录，$&#123;userByPages.totalPage&#125;页</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/nav&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></details><details><summary>login.jsp</summary><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: liz</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">8</span>/<span class="number">9</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">35</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>/&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>/&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>/&gt;</span><br><span class="line">    &lt;title&gt;管理员登录&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">1</span>. 导入CSS的全局样式 --&gt;</span><br><span class="line">    &lt;link href=<span class="string">"css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">    &lt;!-- <span class="number">2</span>. jQuery导入，建议使用<span class="number">1.9</span>以上的版本 --&gt;</span><br><span class="line">    &lt;script src="js/jquery-2.1.0.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- <span class="number">3</span>. 导入bootstrap的js文件 --&gt;</span><br><span class="line">    &lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type="text/javascript"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function">function <span class="title">refreshCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> vcode = document.getElementById(<span class="string">"vcode"</span>);</span><br><span class="line">            <span class="keyword">var</span> date = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">            vcode.src = <span class="string">"$&#123;pageContext.request.contextPath&#125;/checkCode?time="</span> + date;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span> style=<span class="string">"width: 400px;"</span>&gt;</span><br><span class="line">    &lt;h3 style="text-align: center;"&gt;管理员登录&lt;/h3&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/loginUser"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;label for="user"&gt;用户名：&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"user"</span> placeholder=<span class="string">"请输入用户名"</span>/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;label for="password"&gt;密码：&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"password"</span> placeholder=<span class="string">"请输入密码"</span>/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-inline"</span>&gt;</span><br><span class="line">            &lt;label for="vcode"&gt;验证码：&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> name=<span class="string">"verifycode"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"verifycode"</span> placeholder=<span class="string">"请输入验证码"</span></span><br><span class="line">                   style=<span class="string">"width: 120px;"</span>/&gt;</span><br><span class="line">            &lt;a href=<span class="string">"javascript:refreshCode()"</span>&gt;&lt;img src=<span class="string">"$&#123;pageContext.request.contextPath&#125;/checkCode"</span> title=<span class="string">"看不清点击刷新"</span></span><br><span class="line">                                                    id="vcode"/&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span> style=<span class="string">"text-align: center;"</span>&gt;</span><br><span class="line">            &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn btn-primary"</span> type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 出错显示的信息框 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"alert alert-warning alert-dismissible"</span> role=<span class="string">"alert"</span>&gt;</span><br><span class="line">        &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"close"</span> data-dismiss=<span class="string">"alert"</span>&gt;</span><br><span class="line">            &lt;span&gt;&amp;times;&lt;/span&gt;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;strong&gt;$&#123;code_error&#125;&lt;/strong&gt;</span><br><span class="line">        &lt;strong&gt;$&#123;adminUser_error&#125;&lt;/strong&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></details><details><summary>update.jsp</summary><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: liz</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">8</span>/<span class="number">10</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">03</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!-- 指定字符集 --&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">    &lt;title&gt;修改用户&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">"css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">    &lt;script src="js/jquery-2.1.0.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span> style=<span class="string">"width: 400px;"</span>&gt;</span><br><span class="line">    &lt;h3 style="text-align: center;"&gt;修改联系人&lt;/h3&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/updateUserServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;label for="name"&gt;姓名：&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"id"</span> value=<span class="string">"$&#123;user.id&#125;"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"name"</span> name=<span class="string">"name"</span> readonly=<span class="string">"readonly"</span> placeholder=<span class="string">"请输入姓名"</span></span><br><span class="line">                   value=<span class="string">"$&#123;requestScope.user.name&#125;"</span>/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;label&gt;性别：&lt;/label&gt;</span><br><span class="line">            &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;user.gender=='男'&#125;"</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender"</span> value=<span class="string">"男"</span> checked/&gt;男</span><br><span class="line">                &lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender"</span> value=<span class="string">"女"</span>/&gt;女</span><br><span class="line">            &lt;/c:if&gt;</span><br><span class="line">            &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;user.gender=='女'&#125;"</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender"</span> value=<span class="string">"男"</span>/&gt;男</span><br><span class="line">                &lt;input type=<span class="string">"radio"</span> name=<span class="string">"gender"</span> value=<span class="string">"女"</span> checked/&gt;女</span><br><span class="line">            &lt;/c:if&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;label for="age"&gt;年龄：&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"age"</span> name=<span class="string">"age"</span> placeholder=<span class="string">"请输入年龄"</span> value=<span class="string">"$&#123;user.age&#125;"</span>/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;label for="address"&gt;籍贯：&lt;/label&gt;</span><br><span class="line">            &lt;select name=<span class="string">"address"</span> id=<span class="string">"address"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span>&gt;</span><br><span class="line">                &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;user.address =='陕西'&#125;"</span>&gt;</span><br><span class="line">                    &lt;option value="陕西" selected&gt;陕西&lt;/option&gt;</span><br><span class="line">                    &lt;option value="北京"&gt;北京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="上海"&gt;上海&lt;/option&gt;</span><br><span class="line">                    &lt;option value="南京"&gt;南京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="安徽"&gt;安徽&lt;/option&gt;</span><br><span class="line">                    &lt;option value="苏州"&gt;苏州&lt;/option&gt;</span><br><span class="line">                &lt;/c:if&gt;</span><br><span class="line">                &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;user.address =='北京'&#125;"</span>&gt;</span><br><span class="line">                    &lt;option value="陕西"&gt;陕西&lt;/option&gt;</span><br><span class="line">                    &lt;option value="北京" selected&gt;北京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="上海"&gt;上海&lt;/option&gt;</span><br><span class="line">                    &lt;option value="南京"&gt;南京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="安徽"&gt;安徽&lt;/option&gt;</span><br><span class="line">                    &lt;option value="苏州"&gt;苏州&lt;/option&gt;</span><br><span class="line">                &lt;/c:if&gt;</span><br><span class="line">                &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;user.address =='上海'&#125;"</span>&gt;</span><br><span class="line">                    &lt;option value="陕西"&gt;陕西&lt;/option&gt;</span><br><span class="line">                    &lt;option value="北京"&gt;北京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="上海" selected&gt;上海&lt;/option&gt;</span><br><span class="line">                    &lt;option value="南京"&gt;南京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="安徽"&gt;安徽&lt;/option&gt;</span><br><span class="line">                    &lt;option value="苏州"&gt;苏州&lt;/option&gt;</span><br><span class="line">                &lt;/c:if&gt;</span><br><span class="line">                &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;user.address =='南京'&#125;"</span>&gt;</span><br><span class="line">                    &lt;option value="陕西"&gt;陕西&lt;/option&gt;</span><br><span class="line">                    &lt;option value="北京"&gt;北京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="上海"&gt;上海&lt;/option&gt;</span><br><span class="line">                    &lt;option value="南京" selected&gt;南京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="安徽"&gt;安徽&lt;/option&gt;</span><br><span class="line">                    &lt;option value="苏州"&gt;苏州&lt;/option&gt;</span><br><span class="line">                &lt;/c:if&gt;</span><br><span class="line">                &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;user.address =='安徽'&#125;"</span>&gt;</span><br><span class="line">                    &lt;option value="陕西"&gt;陕西&lt;/option&gt;</span><br><span class="line">                    &lt;option value="北京"&gt;北京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="上海"&gt;上海&lt;/option&gt;</span><br><span class="line">                    &lt;option value="南京"&gt;南京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="安徽" selected&gt;安徽&lt;/option&gt;</span><br><span class="line">                    &lt;option value="苏州"&gt;苏州&lt;/option&gt;</span><br><span class="line">                &lt;/c:if&gt;</span><br><span class="line">                &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;user.address =='苏州'&#125;"</span>&gt;</span><br><span class="line">                    &lt;option value="陕西"&gt;陕西&lt;/option&gt;</span><br><span class="line">                    &lt;option value="北京"&gt;北京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="上海"&gt;上海&lt;/option&gt;</span><br><span class="line">                    &lt;option value="南京"&gt;南京&lt;/option&gt;</span><br><span class="line">                    &lt;option value="安徽"&gt;安徽&lt;/option&gt;</span><br><span class="line">                    &lt;option value="苏州" selected&gt;苏州&lt;/option&gt;</span><br><span class="line">                &lt;/c:if&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;label for="qq"&gt;QQ：&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> id=<span class="string">"qq"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> name=<span class="string">"qq"</span> placeholder=<span class="string">"请输入QQ号码"</span> value=<span class="string">"$&#123;user.qq&#125;"</span>/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">            &lt;label for="email"&gt;Email：&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> id=<span class="string">"email"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> name=<span class="string">"email"</span> placeholder=<span class="string">"请输入邮箱地址"</span></span><br><span class="line">                   value=<span class="string">"$&#123;user.email&#125;"</span>/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span> style=<span class="string">"text-align: center"</span>&gt;</span><br><span class="line">            &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span> type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">            &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default"</span> type=<span class="string">"reset"</span> value=<span class="string">"重置"</span>/&gt;</span><br><span class="line">            &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default"</span> type=<span class="string">"button"</span> value=<span class="string">"返回"</span>/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MVC </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda常用命令</title>
      <link href="/2020/05/27/conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/05/27/conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="一、设置镜像源"><a href="#一、设置镜像源" class="headerlink" title="一、设置镜像源"></a>一、设置镜像源</h4><h6 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以清华镜像为例</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p>此时在当前用户的根目录下生成一个名为”.condarc”的配置文件，打开该文件。</p><p>将”.condarc”配置文件内容修改如下，此外可以添加更多的下载渠道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">- defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">channel_alias: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda</span><br><span class="line">default_channels:</span><br><span class="line">- https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main</span><br><span class="line">- https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free</span><br><span class="line">- https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;r</span><br></pre></td></tr></table></figure><a id="more"></a><p>最后通过 <code>conda info</code>查看当前配置信息。<code>URL</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">channel URLs : https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;Paddle&#x2F;osx-64</span><br><span class="line">                          https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;Paddle&#x2F;noarch</span><br><span class="line">                          https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;osx-64</span><br><span class="line">                          https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;noarch</span><br><span class="line">                          https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;osx-64</span><br><span class="line">                          https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;noarch</span><br></pre></td></tr></table></figure><h6 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h6><ol><li><p><strong>临时使用</strong></p><p>在使用pip的时候加参数<code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p>例如：<code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas</code>，即从清华镜像下载<code>pandas</code>库。</p></li><li><p><strong>永久使用</strong></p><p>修改 <code>~/.pip/pip.conf</code>(如果没有则自行创建),修改<code>index-url</code>至<code>tuna</code>.即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure></li></ol><h6 id="阿里云镜像"><a href="#阿里云镜像" class="headerlink" title="阿里云镜像"></a>阿里云镜像</h6><p><code>https://mirrors.aliyun.com/pypi/simple</code></p><h4 id="二、常用命令"><a href="#二、常用命令" class="headerlink" title="二、常用命令"></a>二、常用命令</h4><h6 id="2-1-Anaconda环境相关"><a href="#2-1-Anaconda环境相关" class="headerlink" title="2.1 Anaconda环境相关"></a>2.1 Anaconda环境相关</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conda create --name [env-name] <span class="comment"># 建立名为[env-name]的conda环境</span></span><br><span class="line">conda create --name [env-name] python=x.x <span class="comment"># 建立名为[env-name]的conda环境并指定python版本</span></span><br><span class="line">conda activate [env-name] <span class="comment"># 激活[env-name]环境</span></span><br><span class="line">conda deactivate <span class="comment"># 退出当前环境</span></span><br><span class="line">conda env remove --name [env-name] <span class="comment"># 删除名为[env-name]的conda环境</span></span><br><span class="line">conda env list <span class="comment"># 列出所有的conda虚拟环境</span></span><br></pre></td></tr></table></figure><h6 id="2-2-conda安装包"><a href="#2-2-conda安装包" class="headerlink" title="2.2 conda安装包"></a>2.2 conda安装包</h6><p><strong>安装名为[package-name]的包</strong></p><p><code>conda install [package-name]</code></p><p><strong>安装名为[package-name]的包并制定版本X.X</strong></p><p><code>conda install [package-name]=X.X</code></p><p><strong>更新名为[package-name]的包</strong></p><p><code>conda update [package-name]</code></p><p><strong>删除名为[package-name]的包</strong></p><p><code>conda remove [package-name]</code></p><p><strong>列出名为[package-name]的包在conda源中的所有可用版本</strong></p><p><code>conda search [package-name]</code></p><p><strong>列出当前环境下已安装的所有包</strong></p><p><code>conda list</code></p><h6 id="2-3-pip安装包"><a href="#2-3-pip安装包" class="headerlink" title="2.3 pip安装包"></a>2.3 pip安装包</h6><p><strong>安装名为[package-name]的包并制定版本X.X</strong></p><p><code>pip install [package-name]==X.X</code></p><p><strong>更新名为[package-name]的包</strong></p><p><code>pip install [package-name] --upgrade</code></p><p><strong>删除名为[package-name]的包</strong></p><p><code>pip uninstall [package-name]</code></p><h6 id="2-3-终端启动Jupyter"><a href="#2-3-终端启动Jupyter" class="headerlink" title="2.3 终端启动Jupyter"></a>2.3 终端启动Jupyter</h6><p><code>python3 -m IPython notebook</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对小木虫考研调剂信息的爬取</title>
      <link href="/2020/04/09/%E5%AF%B9%E5%B0%8F%E6%9C%A8%E8%99%AB%E8%80%83%E7%A0%94%E8%B0%83%E5%89%82%E4%BF%A1%E6%81%AF%E7%9A%84%E7%88%AC%E5%8F%96/"/>
      <url>/2020/04/09/%E5%AF%B9%E5%B0%8F%E6%9C%A8%E8%99%AB%E8%80%83%E7%A0%94%E8%B0%83%E5%89%82%E4%BF%A1%E6%81%AF%E7%9A%84%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h3 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h3><p><strong>由于国家线快出了，故写了一份爬取小木虫网站调剂信息的爬虫代码，方便信息查看。此代码仅用于学习，不作为任何商业用途。</strong></p><a id="more"></a><h3 id="二、代码–单线程"><a href="#二、代码–单线程" class="headerlink" title="二、代码–单线程"></a>二、代码–单线程</h3><details><summary>单线程示例</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!~/opt/anaconda3/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDataInfo</span><span class="params">(infoList, url, pre_params, *args)</span>:</span></span><br><span class="line">    params = []</span><br><span class="line">    count = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        par_ = pre_params[count] + i</span><br><span class="line">        params.append(par_)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据参数获取访问链接</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        url += param + <span class="string">'&amp;'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(url)</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取页码数，并处理空页异常</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pages_tag = soup.find_all(<span class="string">'td'</span>, <span class="string">'header'</span>)[<span class="number">1</span>].string</span><br><span class="line">        pages = int(re.split(<span class="string">'/'</span>, pages_tag)[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        pages = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判读是否只有一页</span></span><br><span class="line">    <span class="keyword">if</span> pages == <span class="number">0</span>:</span><br><span class="line">        pages += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(pages):  <span class="comment"># 遍历每一页</span></span><br><span class="line">        page = i + <span class="number">1</span></span><br><span class="line">        url = url + <span class="string">'&amp;page='</span> + str(page)</span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">        tbody = soup.find_all(<span class="string">'tbody'</span>, <span class="string">'forum_body_manage'</span>)[<span class="number">0</span>]</span><br><span class="line">        trs = tbody.find_all(<span class="string">'tr'</span>)  <span class="comment"># 每个学校的全部信息被tr标签包围</span></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:  <span class="comment"># 遍历每一个学校</span></span><br><span class="line">            dicts = &#123;&#125;</span><br><span class="line">            href = tr.find_all(<span class="string">'a'</span>)[<span class="number">0</span>].get(<span class="string">'href'</span>)  <span class="comment"># 定位至a标签，提取href的属性值</span></span><br><span class="line">            tds = tr.find_all(<span class="string">'td'</span>)  <span class="comment"># 每个学校的各个信息包含在td标签内</span></span><br><span class="line">            lens = len(tds)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(lens): <span class="comment"># 将各个学校信息添加至字典中</span></span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                    title = tds[i].find(<span class="string">'a'</span>).string</span><br><span class="line">                    dicts[i] = title</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dicts[i] = tds[i].string</span><br><span class="line">            dicts[<span class="string">'href'</span>] = href</span><br><span class="line">            print(dicts)</span><br><span class="line">            infoList.append(dicts) <span class="comment"># 每一个学校的信息，添加至列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outputCSV</span><span class="params">(infoList, path)</span>:</span></span><br><span class="line">    data = pd.DataFrame(infoList)</span><br><span class="line">    <span class="comment"># with open(r'./info.csv','w+',encoding='utf-8') as f:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        data.columns = [<span class="string">'标题'</span>, <span class="string">'学校'</span>, <span class="string">'门类/专业'</span>, <span class="string">'招生人数'</span>, <span class="string">'发布时间'</span>, <span class="string">'链接'</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'没有调剂信息...'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            data.to_csv(path)</span><br><span class="line">            print(<span class="string">'保存成功'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'路径存在'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'保存失败'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定查询参数 -- 专业、年份</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameters</span><span class="params">(pro_=<span class="string">''</span>, pro_1=<span class="string">''</span>, pro_2=<span class="string">''</span>, year=<span class="string">''</span>)</span>:</span></span><br><span class="line">    paramsList = [pro_, pro_1, pro_2, year]</span><br><span class="line">    <span class="keyword">return</span> paramsList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://muchong.com/bbs/kaoyan.php?'</span></span><br><span class="line">    path = <span class="string">'./2020计算机调剂信息(截止4.09).csv'</span></span><br><span class="line">    pre_params = [<span class="string">'r1%5B%5D='</span>, <span class="string">'r2%5B%5D='</span>, <span class="string">'r3%5B%5D='</span>, <span class="string">'year='</span>]</span><br><span class="line">    params = parameters(pro_=<span class="string">'08'</span>, pro_1=<span class="string">'0812'</span>,year=<span class="string">'2020'</span>)</span><br><span class="line">    dataList = []</span><br><span class="line">    getDataInfo(dataList, url, pre_params, *params)</span><br><span class="line">    outputCSV(dataList, path)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></details><h3 id="三、代码–多线程"><a href="#三、代码–多线程" class="headerlink" title="三、代码–多线程"></a>三、代码–多线程</h3><details><summary>多线程示例</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! ~/opt/anaconda3/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取网页</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPages</span><span class="params">(infoList, url, pre_params, *args)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取当前需要爬取的页面数，及完整链接</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    params = []</span><br><span class="line">    count = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        par_ = pre_params[count] + i</span><br><span class="line">        params.append(par_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        url += param + <span class="string">'&amp;'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(url)</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理空页异常</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pages_tag = soup.find_all(<span class="string">'td'</span>, <span class="string">'header'</span>)[<span class="number">1</span>].string</span><br><span class="line">        pages = int(re.split(<span class="string">'/'</span>, pages_tag)[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        pages = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判读是否只有一页</span></span><br><span class="line">    <span class="keyword">if</span> pages == <span class="number">0</span>:</span><br><span class="line">        pages += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pages, url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">page = <span class="number">0</span></span><br><span class="line">lock = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDataInfo</span><span class="params">(infoList, pages, url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取数据信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> page</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        lock.acquire()</span><br><span class="line">        page += <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line">        <span class="keyword">if</span> page &gt; pages:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        url = url + <span class="string">'&amp;page='</span> + str(page)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># lock.acquire()</span></span><br><span class="line">        html = getHTMLText(url)</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">        tbody = soup.find_all(<span class="string">'tbody'</span>, <span class="string">'forum_body_manage'</span>)[<span class="number">0</span>]</span><br><span class="line">        trs = tbody.find_all(<span class="string">'tr'</span>)  <span class="comment"># 每个学校的全部信息被tr标签包围</span></span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:  <span class="comment"># 遍历每一个学校</span></span><br><span class="line">            dicts = &#123;&#125;</span><br><span class="line">            href = tr.find_all(<span class="string">'a'</span>)[<span class="number">0</span>].get(<span class="string">'href'</span>)  <span class="comment"># 定位至a标签，提取href的属性值</span></span><br><span class="line">            tds = tr.find_all(<span class="string">'td'</span>)  <span class="comment"># 每个学校的各个信息包含在td标签内</span></span><br><span class="line">            lens = len(tds)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(lens):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                    title = tds[i].find(<span class="string">'a'</span>).string</span><br><span class="line">                    dicts[i] = title</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dicts[i] = tds[i].string</span><br><span class="line">            dicts[<span class="string">'href'</span>] = href</span><br><span class="line">            print(dicts)</span><br><span class="line">            infoList.append(dicts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outputCSV</span><span class="params">(infoList, path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    输出文档</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data = pd.DataFrame(infoList)</span><br><span class="line">    <span class="comment"># with open(r'./info.csv','w+',encoding='utf-8') as f:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        data.columns = [<span class="string">'标题'</span>, <span class="string">'学校'</span>, <span class="string">'门类/专业'</span>, <span class="string">'招生人数'</span>, <span class="string">'发布时间'</span>, <span class="string">'链接'</span>]</span><br><span class="line">        data.sort_values(by=<span class="string">'发布时间'</span>, ascending=<span class="literal">False</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        data = data.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'没有调剂信息...'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            data.to_csv(path)</span><br><span class="line">            print(<span class="string">'爬取成功'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'路径存在'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'保存失败'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameters</span><span class="params">(pro_=<span class="string">''</span>, pro_1=<span class="string">''</span>, pro_2=<span class="string">''</span>, year=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    设定查询参数 -- 专业、年份</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    paramsList = [pro_, pro_1, pro_2, year]</span><br><span class="line">    <span class="keyword">return</span> paramsList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threadingUp</span><span class="params">(count, infoList, pages, url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    启动多线程</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    threadList = []</span><br><span class="line">    iList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">        iList.append(i)</span><br><span class="line">        t = Thread(target=getDataInfo, args=(infoList, pages, url))</span><br><span class="line">        t.start()</span><br><span class="line">        threadList.append(t)</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threadList:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://muchong.com/bbs/kaoyan.php?'</span></span><br><span class="line">    path = <span class="string">'./08.csv'</span></span><br><span class="line">    pre_params = [<span class="string">'r1%5B%5D='</span>,  <span class="string">'r2%5B%5D='</span>, <span class="string">'r3%5B%5D='</span>, <span class="string">'year='</span>]</span><br><span class="line">    params = parameters(pro_=<span class="string">'08'</span>, year=<span class="string">'2020'</span>)</span><br><span class="line">    dataList = []</span><br><span class="line">    count = <span class="number">1000</span></span><br><span class="line">    pages, url_ = getPages(dataList, url, pre_params, *params)</span><br><span class="line">    start = time.time()</span><br><span class="line">    threadingUp(count, dataList, pages, url_)  <span class="comment"># 多线程</span></span><br><span class="line">    <span class="comment"># getDataInfo(dataList,pages,url_) # 单线程</span></span><br><span class="line">    outputCSV(dataList, path)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'时间:'</span>+str(end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></details><h3 id="四、代码使用参数说明"><a href="#四、代码使用参数说明" class="headerlink" title="四、代码使用参数说明"></a>四、代码使用参数说明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parameters</span><span class="params">(pro_=<span class="string">''</span>, pro_1=<span class="string">''</span>, pro_2=<span class="string">''</span>, year=<span class="string">''</span>)</span>:</span></span><br><span class="line">    paramsList = [pro_, pro_1, pro_2, year]</span><br><span class="line">    <span class="keyword">return</span> paramsList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://muchong.com/bbs/kaoyan.php?'</span></span><br><span class="line">    path = <span class="string">'./data_info.csv'</span></span><br><span class="line">    pre_params = [<span class="string">'r1%5B%5D='</span>, <span class="string">'r2%5B%5D='</span>, <span class="string">'r3%5B%5D='</span>, <span class="string">'year='</span>]</span><br><span class="line">    params = parameters(pro_=<span class="string">'08'</span>, pro_1=<span class="string">'0801'</span>)</span><br><span class="line">    dataList = []</span><br><span class="line">    getDataInfo(dataList, url, pre_params, *params)</span><br><span class="line">    outputCSV(dataList, path)</span><br></pre></td></tr></table></figure><p>主体代码已写完，只需要修改main函数中<code>params</code>中的相关参数，即可使用。</p><p><code>parameters</code>函数主要用于返回查询的参数。默认参数都为空。如果都不填，则是爬取小木虫全部年份，全部专业的所有调剂信息。</p><p><code>params</code>具体参数说明：</p><ul><li><p><code>pro_</code></p><p>所要查询的学科门类。可查询的见下图:</p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/04/09/Ghfaa6.png" style="zoom:60%;" /><p>只要查询填写对应学科门类前的数字即可。例如工学，则:<code>pro_=&#39;08&#39;</code></p><p><strong>注意:填写的为字符串格式</strong></p></li><li><p><code>pro_1</code></p><p>填写的一级学科代码。如下图：</p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/04/09/GhfBGD.png" style="zoom:40%;" /><p>以电子科学与技术为例，同样只需要填写前面代码即可。如：<code>pro_2=&#39;0806&#39;</code></p><p>如果这一项不填，则查询的是前一个填写的整个学科门类所有信息。</p></li><li><p><code>pro_2</code></p><p>填写的二级学科代码。如图:</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/04/09/GhfdIK.png" alt=""></p><p>例如查询物理电子学调剂信息，同上。则填:<code>pro_2=&#39;080901&#39;</code>。如果不填，则默认查询的是上一级学科下的所有调剂信息。例如，这里就是全部的电子科学与技术的调剂信息。</p></li><li><p><code>year</code></p><p>查询年份。例如查询2020年。<code>year=&#39;2020&#39;</code>。<strong>注意:同样是字符串类型</strong>。如果不填，则是查询全部的年份。</p><p>其中，<code>main()</code>函数中的保存路径<code>path</code>,可自定义修改。</p></li></ul><p><strong>总结:</strong>只需修改<code>params</code>和保存路径<code>url</code>即可。</p><h3 id="五、效果图"><a href="#五、效果图" class="headerlink" title="五、效果图"></a>五、效果图</h3><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/04/09/GhfDRe.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s1.ax1x.com/2020/04/09/Ghf0PO.png" alt=""></p><h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p>小木虫调剂信息网站:<a href="http://muchong.com/bbs/kaoyan.php" target="_blank" rel="noopener">http://muchong.com/bbs/kaoyan.php</a></p><btns rounded grid5><a href='https://github.com/ChemLez/xmcTiaoJiInformation_Pachong' target="_blank" rel="noopener"><i class='fas fa-download'></i>下载源码</a></a></btns>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> Request </tag>
            
            <tag> Beautifulsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习:特征工程之数据预处理</title>
      <link href="/2020/04/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
      <url>/2020/04/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%E4%B9%8B%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在上一节中的<btn><a href="https://www.liizhi.cn/2020/02/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%86%B3%E7%AD%96%E6%A0%91%E5%85%A5%E9%97%A8%E4%B9%8B%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7%E6%A1%88%E4%BE%8B/" target="_blank" rel="noopener">泰坦尼克号入门案例</a></btn>的数据预处理过程中，出现了数据不完整、数据的编码(数值转化)，即将非结构化文本转化为结构化文本。本文主要用来记录在<code>sklearn</code>中常用的数据预处理基本方法。</p><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><p>从数据中检测，纠正或删除损坏，不准确或不适用于模型的记录的过程。</p><p>可能面对的问题有：数据类型不同，比如有的是文字，有的是数字，有的含时间序列，有的连续，有的间断。也可能，数据的质量不行，有噪声，有异常，有缺失，数据出错，量纲不一，有重复，数据是偏态，数据量太大或太小。</p><p>目的：让数据适应模型，匹配模型的需求。</p><a id="more"></a><h4 id="1-数据无量纲化"><a href="#1-数据无量纲化" class="headerlink" title="1. 数据无量纲化"></a>1. 数据无量纲化</h4><p>在机器学习算法实践中，往往有着将不同规格的数据转换到同一规格，或不同分布的数据转换到某个特定分布的需求，这种需求统称为将数据“无量纲化”。 </p><p>数据的无量纲化包括线性与非线性。其中线性的无量纲化包括：<strong>中心化</strong>(Zero-centered或Mean-subtraction)处理和<strong>缩放处理</strong>(Scale)。</p><ol><li><p><strong>中心化</strong></p><p>让所有记录减去一个固定值，即让数据的样本数据平移到某个位置。</p></li><li><p><strong>缩放处理</strong></p><p>通过除以一个固定值，将数据固定在某个范围之中，通常采用取对数的方式。</p></li></ol><h5 id="1-1-数据归一化"><a href="#1-1-数据归一化" class="headerlink" title="1.1 数据归一化"></a>1.1 数据归一化</h5><p>当数据(x)按照最小值中心化后，再按极差（最大值-最小值）缩放，数据移动了最小值个单位，并且会被收敛到[0,1]之间，而这个过程，就叫做<strong>数据归一化</strong>(Normalization，又称Min-MaxScaling)。公式如下：</p><p>​                                                                            $$x={x^*-min(x)\over max(x)-min(x)}$$</p><p>在<code>sklearn</code>中通过<code>preprocessing.MinMaxScaler</code>实现此功能。其中，<code>feature_range</code>可以控制数据压缩的范围，默认为[0,1]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = [[<span class="number">-1</span>,<span class="number">2</span>],[<span class="number">-0.5</span>,<span class="number">6</span>],[<span class="number">0</span>,<span class="number">10</span>],[<span class="number">1</span>,<span class="number">18</span>]]</span><br><span class="line">pd.DataFrame(data)</span><br><span class="line"><span class="comment"># 实现归一化</span></span><br><span class="line">scaler = MinMaxScaler() <span class="comment"># 实例化</span></span><br><span class="line">scaler = scaler.fit(data) <span class="comment"># 生成min(x),max(x)</span></span><br><span class="line">result = scaler.transform(data) <span class="comment"># 导出结果</span></span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array([[<span class="number">0.</span>  , <span class="number">0.</span>  ],</span><br><span class="line">       [<span class="number">0.25</span>, <span class="number">0.25</span>],</span><br><span class="line">   [<span class="number">0.5</span> , <span class="number">0.5</span> ],</span><br><span class="line">       [<span class="number">1.</span>  , <span class="number">1.</span>  ]])</span><br></pre></td></tr></table></figure><p>将所有的数据压缩至[0,1]之间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scaler.inverse_transform(result) <span class="comment">#逆转结果</span></span><br><span class="line">Out:</span><br><span class="line">array([[<span class="number">-1.</span> ,  <span class="number">2.</span> ],</span><br><span class="line">          [<span class="number">-0.5</span>,  <span class="number">6.</span> ],</span><br><span class="line">           [ <span class="number">0.</span> , <span class="number">10.</span> ],</span><br><span class="line">           [ <span class="number">1.</span> , <span class="number">18.</span> ]])</span><br></pre></td></tr></table></figure><p>采用<code>feature_range</code>将数据范围压缩至[0,5]之间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用MinMaxScaler的参数feature_range实现将数据归一化到[0,1]以外的范围中</span></span><br><span class="line">data = [[<span class="number">-1</span>,<span class="number">2</span>],[<span class="number">-0.5</span>,<span class="number">6</span>],[<span class="number">0</span>,<span class="number">10</span>],[<span class="number">1</span>,<span class="number">18</span>]]</span><br><span class="line">scaler = MinMaxScaler(feature_range=[<span class="number">5</span>,<span class="number">10</span>]) <span class="comment"># 实例化归一化到5~10之间</span></span><br><span class="line">result = scaler.fit_transform(data)</span><br><span class="line">result</span><br><span class="line">Out：</span><br><span class="line">    array([[ <span class="number">5.</span>  ,  <span class="number">5.</span>  ],</span><br><span class="line">           [ <span class="number">6.25</span>,  <span class="number">6.25</span>],</span><br><span class="line">           [ <span class="number">7.5</span> ,  <span class="number">7.5</span> ],</span><br><span class="line">           [<span class="number">10.</span>  , <span class="number">10.</span>  ]])</span><br></pre></td></tr></table></figure><p>采用<code>Numpy</code>实现归一化处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用numpy来实现归一化</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = np.array(data)</span><br><span class="line">X</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">-1.</span> ,  <span class="number">2.</span> ],</span><br><span class="line">           [<span class="number">-0.5</span>,  <span class="number">6.</span> ],</span><br><span class="line">           [ <span class="number">0.</span> , <span class="number">10.</span> ],</span><br><span class="line">           [ <span class="number">1.</span> , <span class="number">18.</span> ]])</span><br><span class="line">X_nor = (X - X.min(axis=<span class="number">0</span>))/(X.max(axis=<span class="number">0</span>) - X.min(axis=<span class="number">0</span>))</span><br><span class="line">X_nor</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">0.</span>  , <span class="number">0.</span>  ],</span><br><span class="line">           [<span class="number">0.25</span>, <span class="number">0.25</span>],</span><br><span class="line">           [<span class="number">0.5</span> , <span class="number">0.5</span> ],</span><br><span class="line">           [<span class="number">1.</span>  , <span class="number">1.</span>  ]])</span><br><span class="line"><span class="comment"># 还原,即：公式的还原</span></span><br><span class="line">X = X_nor * (X.max(axis=<span class="number">0</span>) - X.min(axis=<span class="number">0</span>)) + X.min(axis=<span class="number">0</span>)</span><br><span class="line">X</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">-1.</span> ,  <span class="number">2.</span> ],</span><br><span class="line">           [<span class="number">-0.5</span>,  <span class="number">6.</span> ],</span><br><span class="line">           [ <span class="number">0.</span> , <span class="number">10.</span> ],</span><br><span class="line">           [ <span class="number">1.</span> , <span class="number">18.</span> ]])</span><br></pre></td></tr></table></figure><p>通过以上的实例，将数据压缩至统一的范围内。</p><h5 id="1-2-数据标准化"><a href="#1-2-数据标准化" class="headerlink" title="1.2 数据标准化"></a>1.2 数据标准化</h5><p>当数据(x)按均值(μ)中心化后，再按标准差(σ)缩放，数据就会服从为均值为0，方差为1的正态分布（即标准正态分布），而这个过程，就叫做<strong>数据标准化</strong>(Standardization，又称Z-scorenormalization)，公式如下：</p><p>​                                                                            $$x^*={x-u\over \sigma} $$</p><p><code>sklearn</code>中提供了<code>preprocessing.StandarScaler</code>接口进行使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">scaler = StandardScaler() <span class="comment"># 实例化</span></span><br><span class="line">scaler.fit(data) <span class="comment"># fit,本质用于生成均值和方差</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对每一列向量表示一个特征，故默认对列进行操作</span></span><br><span class="line">scaler.mean_ <span class="comment"># 查看均值的属性mean_</span></span><br><span class="line">scaler.var_  <span class="comment"># 查看方差的属性var_</span></span><br><span class="line">Out:</span><br><span class="line">array([<span class="number">-0.125</span>,  <span class="number">9.</span>   ])</span><br></pre></td></tr></table></figure><p>导出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出结果</span></span><br><span class="line">x_std = scaler.transform(data)</span><br><span class="line">x_std</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">-1.18321596</span>, <span class="number">-1.18321596</span>],</span><br><span class="line">           [<span class="number">-0.50709255</span>, <span class="number">-0.50709255</span>],</span><br><span class="line">           [ <span class="number">0.16903085</span>,  <span class="number">0.16903085</span>],</span><br><span class="line">           [ <span class="number">1.52127766</span>,  <span class="number">1.52127766</span>]])</span><br></pre></td></tr></table></figure><p>查看其方差与均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结果均值为0，方差为1的标准正态分布</span></span><br><span class="line">x_std.mean()</span><br><span class="line">x_std.std()</span><br></pre></td></tr></table></figure><p>逆标准化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scaler.inverse_transform(x_std) <span class="comment"># 使用inverse_transform逆标准化</span></span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">-1.</span> ,  <span class="number">2.</span> ],</span><br><span class="line">           [<span class="number">-0.5</span>,  <span class="number">6.</span> ],</span><br><span class="line">           [ <span class="number">0.</span> , <span class="number">10.</span> ],</span><br><span class="line">           [ <span class="number">1.</span> , <span class="number">18.</span> ]])</span><br></pre></td></tr></table></figure><h5 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h5><p><strong>目的：</strong>为了把不同来源的数据（不同特征）统一到同一数量级（一个参考坐标系）下，消除指标之间的量纲影响，解决数据指标简单可比性问题。</p><p><strong>优点：</strong></p><ul><li>提高精度</li><li>可提高梯度下降求最优解的速度</li></ul><h4 id="2-数据缺失值的处理"><a href="#2-数据缺失值的处理" class="headerlink" title="2. 数据缺失值的处理"></a>2. 数据缺失值的处理</h4><p>此小节记录对于<code>sklearn</code>中缺失值处理的基本方法。</p><p>导入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">r'/jupyter-notebook/sklearn/2- Feature Engineering/Narrativedata.csv'</span>,index_col=<span class="number">0</span>)</span><br><span class="line">data.head()</span><br><span class="line">data.info()</span><br><span class="line">Out:</span><br><span class="line">    &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class">    <span class="title">Int64Index</span>:</span> <span class="number">891</span> entries, <span class="number">0</span> to <span class="number">890</span></span><br><span class="line">    Data columns (total <span class="number">4</span> columns):</span><br><span class="line">    Age         <span class="number">714</span> non-null float64</span><br><span class="line">    Sex         <span class="number">891</span> non-null object</span><br><span class="line">    Embarked    <span class="number">889</span> non-null object</span><br><span class="line">    Survived    <span class="number">891</span> non-null object</span><br><span class="line">    dtypes: float64(<span class="number">1</span>), object(<span class="number">3</span>)</span><br><span class="line">    memory usage: <span class="number">34.8</span>+ KB</span><br></pre></td></tr></table></figure><p>从以上结果中可以看出，共有891条数据，其中<code>Age</code>,<code>Embarked</code>皆存在缺失值。<code>sklearn</code>中提供了<code>sklearn.impute.SimpleImputer</code>接口处理缺失值。</p><p>首先对Age缺失值处理方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line">Age = data.loc[:,<span class="string">'Age'</span>].values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">imp_mean = SimpleImputer() <span class="comment"># 实例化,默认均值填补</span></span><br><span class="line">imp_median = SimpleImputer(strategy=<span class="string">'median'</span>) <span class="comment"># 采取中位数填补</span></span><br><span class="line">imp_0 = SimpleImputer(strategy=<span class="string">'constant'</span>,fill_value=<span class="number">0</span>) <span class="comment"># 给定常数，以0填补</span></span><br><span class="line">imp_most = SimpleImputer(strategy=<span class="string">'most_frequent'</span>)<span class="comment">#采用众数进行填补，可用于字符串</span></span><br><span class="line">imp_mean = imp_mean.fit(Age)</span><br><span class="line">imp_mean = imp_mean.transform(Age)</span><br><span class="line">imp_median = imp_median.fit_transform(Age)</span><br><span class="line">imp_most = imp_most.fit_transform(Age)</span><br></pre></td></tr></table></figure><p>结果输出，取前5个数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">imp_mean[:<span class="number">5</span>]</span><br><span class="line">imp_median[:<span class="number">5</span>]</span><br><span class="line">imp_most[:<span class="number">5</span>]</span><br><span class="line">Out: <span class="comment"># 采用众数进行填补的结果</span></span><br><span class="line">    array([[<span class="number">22.</span>],</span><br><span class="line">           [<span class="number">38.</span>],</span><br><span class="line">           [<span class="number">26.</span>],</span><br><span class="line">           [<span class="number">35.</span>],</span><br><span class="line">           [<span class="number">35.</span>]])</span><br></pre></td></tr></table></figure><p>将众数作为<code>Age</code>缺失值处理的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Age = imp_most</span><br><span class="line">data.loc[:,<span class="string">'Age'</span>] = Age</span><br></pre></td></tr></table></figure><p>对<code>Embarked</code>处理的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用众数填补Embarked</span></span><br><span class="line">Embarked = data.loc[:,<span class="string">'Embarked'</span>].values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">imp_most = SimpleImputer(strategy=<span class="string">'most_frequent'</span>)</span><br><span class="line">imp_most = imp_most.fit_transform(Embarked)</span><br><span class="line">Embarked = imp_most</span><br><span class="line">data.loc[:,<span class="string">'Embarked'</span>] = Embarked</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>众数的施加对象可以是非数值型。</p><p><strong>补充：</strong></p><p>采用<code>Pandas</code>和<code>Numpy</code>进行缺失值的填补</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用平均值填补年龄的缺失值,利用.fillna 在DataFrame里面进行填补</span></span><br><span class="line">data_.loc[:,<span class="string">'Age'</span>] = data_.loc[:,<span class="string">'Age'</span>].fillna(data.loc[:,<span class="string">'Age'</span>].mean())</span><br><span class="line"><span class="comment"># 删除Embarked缺失的两条记录,dropna(axis=0)删除所有有缺失值的行，.dropna(axis=1) 删除所有有缺失值的列</span></span><br><span class="line"><span class="comment"># 当采用删除操作时axis=0是对行操作，axis=1是对列操作；拼接，切片相反</span></span><br><span class="line">data_.dropna(axis=<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">data_.info()</span><br><span class="line">Out:</span><br><span class="line">    &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class">    <span class="title">Int64Index</span>:</span> <span class="number">889</span> entries, <span class="number">0</span> to <span class="number">890</span></span><br><span class="line">    Data columns (total <span class="number">4</span> columns):</span><br><span class="line">    Age         <span class="number">889</span> non-null float64</span><br><span class="line">    Sex         <span class="number">889</span> non-null object</span><br><span class="line">    Embarked    <span class="number">889</span> non-null object</span><br><span class="line">    Survived    <span class="number">889</span> non-null object</span><br><span class="line">    dtypes: float64(<span class="number">1</span>), object(<span class="number">3</span>)</span><br><span class="line">    memory usage: <span class="number">34.7</span>+ KB</span><br></pre></td></tr></table></figure><h4 id="3-编码与哑变量"><a href="#3-编码与哑变量" class="headerlink" title="3. 编码与哑变量"></a>3. 编码与哑变量</h4><p>在机器学习中，大多数算法，譬如逻辑回归，支持向量机SVM，k近邻算法等都只能够处理数值型数据，不能处理文字，在sklearn当中，除了专用来处理文字的算法，其他算法在ﬁt的时候全部要求输入数组或矩阵，也不能够导入文字型数据（其实手写决策树和普斯贝叶斯可以处理文字，但是sklearn中规定必须导入数值型）。<br>然而在现实中，许多标签和特征在数据收集完毕的时候，都不是以数字来表现的。比如说，学历的取值可以是[“小学”，“初中”，“高中”，”大学”]，付费方式可能包含[“支付宝”，“现金”，“微信”]等等。在这种情况下，为了让数据适应算法和库，我们必须将数据进行编码，即是说，将文字型数据转换为数值型。</p><h5 id="3-1-标签的编码"><a href="#3-1-标签的编码" class="headerlink" title="3.1 标签的编码"></a>3.1 标签的编码</h5><p><code>preprocessing.LabelEncoder</code>:标签专用，能够将分类转换为分类数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder <span class="comment"># 对标签进行编码</span></span><br><span class="line">y = data.iloc[:,<span class="number">-1</span>] <span class="comment"># 取出特征，最后一列，标签允许是一维</span></span><br><span class="line">le = LabelEncoder()  <span class="comment"># 实例化</span></span><br><span class="line">le = le.fit(y)</span><br><span class="line">label = le.transform(y)</span><br><span class="line">data.iloc[:,<span class="number">-1</span>] = label</span><br><span class="line">le.classes_ <span class="comment"># 查看标签中类别数量</span></span><br><span class="line">Out:</span><br><span class="line">array([<span class="string">'No'</span>, <span class="string">'Unknown'</span>, <span class="string">'Yes'</span>], dtype=object)</span><br></pre></td></tr></table></figure><p>查看标签<code>Survived</code>这一列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取前5条数据查看</span></span><br><span class="line">data[<span class="string">'Survived'</span>][:<span class="number">5</span>]</span><br><span class="line">Out:</span><br><span class="line">    <span class="number">0</span>    <span class="number">0</span></span><br><span class="line">    <span class="number">1</span>    <span class="number">2</span></span><br><span class="line">    <span class="number">2</span>    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span>    <span class="number">2</span></span><br><span class="line">    <span class="number">4</span>    <span class="number">0</span></span><br><span class="line">    Name: Survived, dtype: int64</span><br></pre></td></tr></table></figure><h5 id="3-2-特征的编码"><a href="#3-2-特征的编码" class="headerlink" title="3.2 特征的编码"></a>3.2 特征的编码</h5><p><code>preprocessing.OrdinalEncoder</code>:特征专用，能够将分类特征转换为分类数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fromsklearn.preprocessingimportOrdinalEncoder </span><br><span class="line"><span class="comment">#接口categories_对应LabelEncoder的接口classes_，一模一样的功能</span></span><br><span class="line">data_=data.copy()</span><br><span class="line">data_.head()</span><br><span class="line">OrdinalEncoder().fit(data_.iloc[:,<span class="number">1</span>:<span class="number">-1</span>]).categories_</span><br><span class="line">data_.iloc[:,<span class="number">1</span>:<span class="number">-1</span>]=OrdinalEncoder().fit_transform(data_.iloc[:,<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">data_.head()</span><br></pre></td></tr></table></figure><h5 id="3-3-独热编码——创建哑变量"><a href="#3-3-独热编码——创建哑变量" class="headerlink" title="3.3 独热编码——创建哑变量"></a>3.3 独热编码——创建哑变量</h5><p>类别OrdinalEncoder可以用来处理有序变量，但对于名义变量，我们只有使用哑变量的方式来处理，才能够尽量向算法传达最准确的信息。</p><ul><li><p>名义变量</p><p>判断两变量是否相同。例如：性别，邮编，身份证号等等</p></li><li><p>有序变量</p><p>为数据的相对大小提供信息，但数据之间大小的间隔不是具有固定意义的，不能做加减运算。例如：学历。</p></li><li><p>有距变量</p><p>有距变量之间的间隔是有固定意义的，可做加减运算。例如：日期</p></li></ul><p>从以上定义看出，性别、舱门号等属于有序变量。在之前的编码中，性别简单采用的<code>0\1</code>区别<code>男\女</code>。但是，在编码的过程中，想要表达的是<code>男≠女</code>。当被我们转换为<code>[0,1]</code>时，存在着大小关系，即从名义变量的编码转化成为了有距变量的编码。</p><p>故：我们采用独热编码(one-hot)的形式进行编码。男:[1,0],女:[0,1]。这样，便能够将男女的编码区别于一般的0、1编码，让算法明白这两取值是没有计算性质的，这种编码即为哑变量。</p><p>在<code>sklearn</code>中提供了<code>sklearn.preprocessing.OneHotEncoder</code>接口进行哑变量处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line">X = data.iloc[:,<span class="number">1</span>:<span class="number">-1</span>] <span class="comment">#取特征,即：Sex、Embarked</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># one-hot</span></span><br><span class="line">enc = OneHotEncoder() <span class="comment"># 实例化</span></span><br><span class="line">enc = enc.fit(X)</span><br><span class="line">result = enc.transform(X)</span><br><span class="line">result</span><br><span class="line">Out:</span><br><span class="line">    &lt;<span class="number">889</span>x5 sparse matrix of type <span class="string">'&lt;class '</span>numpy.float64<span class="string">'&gt;'</span></span><br><span class="line">        <span class="keyword">with</span> <span class="number">1778</span> stored elements <span class="keyword">in</span> Compressed Sparse Row format&gt;</span><br></pre></td></tr></table></figure><p><code>result</code>中返回的是结果集对象地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">result.toarray()</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">           [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">           [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">           ...,</span><br><span class="line">           [<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>],</span><br><span class="line">           [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">           [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>]])</span><br></pre></td></tr></table></figure><p>从结果中，看出我们得到5列特征。其中，Sex包含男女两类，Embarked包含S、Q、C三类。故通过One-hot得到了5类特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enc.get_feature_names() <span class="comment"># 用于查看特征默认的名称</span></span><br><span class="line">Out:</span><br><span class="line">    array([<span class="string">'x0_female'</span>, <span class="string">'x0_male'</span>, <span class="string">'x1_C'</span>, <span class="string">'x1_Q'</span>, <span class="string">'x1_S'</span>], dtype=object)</span><br></pre></td></tr></table></figure><p>将新得到的特征表示，拼接至原有数据后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">newdata = pd.concat([data,pd.DataFrame(result)],axis=<span class="number">1</span>)<span class="comment"># 将数据进行拼接</span></span><br><span class="line">newdata.drop([<span class="string">'Sex'</span>,<span class="string">'Embarked'</span>],inplace=<span class="literal">True</span>,axis=<span class="number">1</span>) <span class="comment"># 删除原来的特征</span></span><br><span class="line">newdata.columns = [<span class="string">'Age'</span>,<span class="string">'Survived'</span>,<span class="string">'Female'</span>,<span class="string">'Male'</span>,<span class="string">'Embarked_C'</span>,<span class="string">'Embarked_Q'</span>,<span class="string">'Embarked_S'</span>] <span class="comment"># 列名重命名</span></span><br></pre></td></tr></table></figure><h4 id="4-连续型特征处理：二值化与分段"><a href="#4-连续型特征处理：二值化与分段" class="headerlink" title="4. 连续型特征处理：二值化与分段"></a>4. 连续型特征处理：二值化与分段</h4><p>在上一小节的特征处理中，one-hot处理的是离散型变量。根据阈值将数据二值化（将特征值设置为0或1），用于处理连续型变量。大于阈值的值映射为1，而小于或等于阈值的值映射为0。默认阈值为0时，特征中所有的正值都映射到1。</p><p>二值化是对文本计数数据的常见操作，分析人员可以决定仅考虑某种现象的存在与否。它还可以用作考虑布尔随机变量的估计器的预处理步骤（例如，使用贝叶斯设置中的伯努利分布建模）。</p><p><code>sklearn</code>中提供了<code>sklearn.preprocessing.Binarizer</code>用于连续型数据的二值化处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Binarizer <span class="comment"># 用于将根阈值将数据二值化，处理连续型变量的工具包</span></span><br><span class="line">data_2 = data.copy()</span><br><span class="line">X = data_2.iloc[:,<span class="number">0</span>].values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">transformer = Binarizer(threshold=<span class="number">30</span>).fit_transform(X) <span class="comment"># threshold=30，即以30作为二值化分段的界限</span></span><br><span class="line">transformer[:<span class="number">4</span>]</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">0</span>],</span><br><span class="line">           [<span class="number">1</span>],</span><br><span class="line">           [<span class="number">0</span>],</span><br><span class="line">           [<span class="number">1</span>]])</span><br></pre></td></tr></table></figure><p>从年龄结果的前4条数据看出，年龄大于30的映射为1，小于等于30的映射为0。</p><p><code>sklearn.preprocessing.KBinsDiscretizer</code>可用于设计连续型变量数据的n分类。</p><p>参数解释：</p><table><thead><tr><th align="center">参数</th><th align="left">含义&amp;输入</th></tr></thead><tbody><tr><td align="center">n_bins</td><td align="left">每个特征中分箱的个数，默认5，一次会被运用到所有导入的特征</td></tr><tr><td align="center">ncode</td><td align="left">编码的方式，默认“onehot”<br/>“onehot”：做哑变量，之后返回一个稀疏矩阵，每一列是一个特征中的一个类别，含有该类别的样本表示为1，不含的表示为0 <br/>“ordinal”：每个特征的每个箱都被编码为一个整数，返回每一列是一个特征，每个特征下含有不同整数编码的箱的矩阵<br/>“onehot-dense”：做哑变量，之后返回一个密集数组。</td></tr><tr><td align="center">strategy</td><td align="left">用来定义箱宽的方式，默认”quantile”<br/>“uniform”：表示等宽分箱，即每个特征中的每个箱的最大值之间的差为(特征.max()-特征.min())/(n_bins)<br/>“quantile”：表示等位分箱，即每个特征中的每个箱内的样本数量都相同<br/>“kmeans”：表示按聚类分箱，每个箱中的值到最近的一维k均值聚类的簇心得距离都相同</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> KBinsDiscretizer</span><br><span class="line">X = data.iloc[:,<span class="number">0</span>].values.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># n_bins 为划分的数量，即需要划分多少类。</span></span><br><span class="line">est = KBinsDiscretizer(n_bins=<span class="number">6</span>,encode=<span class="string">'ordinal'</span>,strategy=<span class="string">'uniform'</span>)</span><br><span class="line">t = est.fit_transform(X)</span><br><span class="line">t[:<span class="number">10</span>]</span><br><span class="line">Out:</span><br><span class="line">    array([[<span class="number">1.</span>],</span><br><span class="line">           [<span class="number">2.</span>],</span><br><span class="line">           [<span class="number">1.</span>],</span><br><span class="line">           [<span class="number">2.</span>],</span><br><span class="line">           [<span class="number">2.</span>],</span><br><span class="line">           [<span class="number">2.</span>],</span><br><span class="line">           [<span class="number">4.</span>],</span><br><span class="line">           [<span class="number">0.</span>],</span><br><span class="line">           [<span class="number">2.</span>],</span><br><span class="line">           [<span class="number">1.</span>]])</span><br><span class="line">set(t.ravel()) <span class="comment"># .ravel() 用于降维，set集合去重，查看类别的数量</span></span><br></pre></td></tr></table></figure><h4 id="5-源码下载"><a href="#5-源码下载" class="headerlink" title="5. 源码下载"></a>5. 源码下载</h4><btns rounded grid5><a href='https://github.com/ChemLez/ML-sklearn/' target="_blank" rel="noopener"><i class='fas fa-download'></i>下载源码</a></a></btns>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> sklearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sklearn </tag>
            
            <tag> Feature Engineering </tag>
            
            <tag> Data Preprocessing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫基础入门</title>
      <link href="/2020/03/18/Python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2020/03/18/Python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Requests库的7个主要方法"><a href="#一、Requests库的7个主要方法" class="headerlink" title="一、Requests库的7个主要方法"></a>一、Requests库的7个主要方法</h4><table><thead><tr><th align="left">方法</th><th>说明</th></tr></thead><tbody><tr><td align="left">requests.request()</td><td>构造一个请求，支撑一下各方法的基础方法</td></tr><tr><td align="left">requests.get()</td><td>获取HTML网页的主要方法，对应于HTTP的GET</td></tr><tr><td align="left">requests.head()</td><td>获取HTML网页头信息的方法，对应于HTTP的HEAD</td></tr><tr><td align="left">requests.post()</td><td>向HTML网页提交POST请求的方法，对应于HTTP的POST</td></tr><tr><td align="left">requests.put()</td><td>向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td></tr><tr><td align="left">requests.pathch()</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td align="left">requests.delete()</td><td>向HTML页面提交删除请求，对应于HTTP的DELETE</td></tr></tbody></table><h5 id="1-requests-get"><a href="#1-requests-get" class="headerlink" title="1.requests.get"></a>1.requests.get</h5><p><code>r = requests.get(url)</code></p><ul><li>返回一个包含服务器资源的Response<strong>对象</strong>，<strong>包含爬虫返回的全部内容</strong>(内容被封装，返回的是地址信息)</li><li>构造一个向服务器请求资源的Request对象</li></ul><p><code>requests.get(url,params=None,**kwargs)</code></p><ul><li><code>url</code>:拟获取网页的<code>url</code>链接</li><li><code>params</code>:url中的额外参数，字典或字节流格式，可选</li><li><code>**kwargs</code>:12个控制访问的参数</li></ul><a id="more"></a><h5 id="2-Response对象的属性"><a href="#2-Response对象的属性" class="headerlink" title="2.Response对象的属性"></a>2.Response对象的属性</h5><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求的返回状态，200表示连接成功，404表示失败</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，即，url对应的页面内容</td></tr><tr><td>r.encoding</td><td>从HTTP header中猜测的响应内容编码方式</td></tr><tr><td>r.apparent_encoding</td><td>从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td>r.content</td><td>HTTP响应的二进制形式</td></tr></tbody></table><ul><li><code>r.encoding</code>:如果header中不存在charset，则认为编码为ISO-8859-1</li><li><code>r.apparent_encoding</code>:根据网页内容分析出的编码方式</li></ul><h5 id="3-理解Requests库的异常"><a href="#3-理解Requests库的异常" class="headerlink" title="3.理解Requests库的异常"></a>3.理解Requests库的异常</h5><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>requests.ConnectionError</td><td>网络连接错误异常，如DNS查询失败、拒绝连接等</td></tr><tr><td>requests.HTTPError</td><td>HTTP错误异常</td></tr><tr><td>requests.TooManyRedirects</td><td>超过最大重定向次数，产生重定向异常</td></tr><tr><td>requests.ConnectTimeout</td><td>连接远程服务器时异常</td></tr><tr><td>requests.URLRequired</td><td>URL缺失异常</td></tr><tr><td>Requests.Timeout</td><td>请求URL超时，产生超时异常</td></tr></tbody></table><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>r.raise_for_status</td><td>如果不是200，产生异常requests.HTTPError</td></tr></tbody></table><h5 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status() <span class="comment"># 如果状态不是200，引发HTTPError异常</span></span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'产生异常'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure><h4 id="二、HTTP协议"><a href="#二、HTTP协议" class="headerlink" title="二、HTTP协议"></a>二、HTTP协议</h4><p><code>HTTP</code>，Hypertext Transfer Protocol,超文本传输协议。</p><p><code>HTTP</code>是一个基于”请求与响应“模式的、无状态的应用层协议。</p><ul><li>无状态：第一次请求与第二次请求无关联</li></ul><p><code>HTTP</code>协议采用URL作为定位网络资源的标识。</p><blockquote><p> URL格式 <code>http://host[:port][path]</code></p></blockquote><ul><li><code>host</code>:合法的Internet主机域名或IP地址</li><li><code>port</code>:端口号，缺省端口为80</li><li><code>path</code>:请求资源的路径</li></ul><p><strong>HTTP URL的理解</strong></p><p>URL是通过HTTP协议存取资源的Internet路径，一个URL对应一个数据资源。</p><h5 id="1-HTTP协议对资源的操作"><a href="#1-HTTP协议对资源的操作" class="headerlink" title="1.HTTP协议对资源的操作"></a>1.HTTP协议对资源的操作</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>请求获取URL位置的资源</td></tr><tr><td>HEAD</td><td>请求获取URL位置资源的响应消息报告，即获得该资源的头部信息</td></tr><tr><td>POST</td><td>请求向URL位置的资源后附新的数据</td></tr><tr><td>PUT</td><td>请求向URL位置存储一个资源，覆盖原URL</td></tr><tr><td>PATCH</td><td>请求局部更新URL位置的资源，即改变该处资源的部分内容</td></tr><tr><td>DELETE</td><td>请求删除URL位置存储的资源</td></tr></tbody></table><h5 id="2-理解PATCH和PUT的区别"><a href="#2-理解PATCH和PUT的区别" class="headerlink" title="2.理解PATCH和PUT的区别"></a>2.理解PATCH和PUT的区别</h5><p>假设URL位置有一组数据UserInfo,包括UserID、UserName等20个字段。</p><p>需求：用户修改了UserName,其他不变。</p><ul><li>采用<code>PATCH</code>,仅向URL提交UserName的局部更新请求。</li><li>采用<code>PUT</code>，必须将所有20个字段一并提交到URL，未提交字段被删除。</li></ul><p><code>PATCH</code>的最主要好处：节省网络带宽</p><h4 id="三、Requests库的7个主要方法解析"><a href="#三、Requests库的7个主要方法解析" class="headerlink" title="三、Requests库的7个主要方法解析"></a>三、Requests库的7个主要方法解析</h4><h5 id="1-requests-request"><a href="#1-requests-request" class="headerlink" title="1.requests.request()"></a>1.requests.request()</h5><p><code>requests.request(method,url,**kwargs)</code></p><p><code>method</code>：请求方式。</p><blockquote><p>‘GET’、’HEAD’、’POST’、’PUT’、’PATCH’、’delete’、’OPTIONS’</p></blockquote><p><code>**kwargs</code>:控制访问的参数，均为可选项。</p><ol><li><code>params</code>:字典或字节序列，作为参数增加到url中。</li><li><code>data</code>：字典、字节序列对象，重点是向服务器提交资源时使用。</li><li><code>json</code>:JSON格式的数据，作为request的内容。</li><li><code>headers</code>:字典，HTTP定制头。</li><li><code>cookies</code>:字典或CookieJar,Request中的cookie。</li><li><code>auth</code>:元祖，支持HTTP认证功能。</li><li><code>files</code>:字典类型，传输文件。</li><li><code>timeout</code>:设定超时时间，秒为单位。</li><li><code>proxies</code>:字典类型，设定访问代理服务器，可以增加登录认证。</li><li><code>allow_redirects</code>:True/False,默认为True，重定向开关。</li><li><code>stream</code>:True/False,默认为True，获取内容立即下载开关。</li><li><code>verify</code>:True/False,默认为True，认证SSL证书开关。</li><li><code>cert</code>:本地SSL证书路径。</li></ol><h4 id="四、Beautiful-Soup库使用"><a href="#四、Beautiful-Soup库使用" class="headerlink" title="四、Beautiful Soup库使用"></a>四、Beautiful Soup库使用</h4><h5 id="1-BeautifulSoup-基本使用"><a href="#1-BeautifulSoup-基本使用" class="headerlink" title="1.BeautifulSoup 基本使用"></a>1.BeautifulSoup 基本使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;data&lt;/p&gt;'</span>,<span class="string">'html.parser'</span>) <span class="comment"># 第一个参数为html文本内容，对html标签进行解析</span></span><br></pre></td></tr></table></figure><h5 id="2-Beautiful-Soup库理解"><a href="#2-Beautiful-Soup库理解" class="headerlink" title="2.Beautiful Soup库理解"></a>2.Beautiful Soup库理解</h5><p><code>Beautiful Soup</code>库,也叫做 <code>beautifulsoup4或bs4</code>, 是解析、变量、维护”标签树“的功能库。只要提供的文件是标签类型，<code>Beautiful Soup</code>库都可以用来解析。</p><p>因为文档和标签树是一一对应的，标签树经过<code>Beautiful Soup</code>，转换为<code>Beautiful Soup</code>类型。故，文档和标签树以及<code>Beautiful Soup</code>是一一对应关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;data&lt;/p&gt;'</span>,<span class="string">'html.parser'</span>)</span><br><span class="line">soup2 = BeautifulSoup(open(<span class="string">"D://demo.html"</span>,<span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure><p><code>Beautiful Soup</code>对应一个HTML/XML文档的全部内容。</p><h5 id="3-Beautiful-Soup库解析器"><a href="#3-Beautiful-Soup库解析器" class="headerlink" title="3.Beautiful Soup库解析器"></a>3.Beautiful Soup库解析器</h5><table><thead><tr><th align="left">解析器</th><th>使用方法</th><th>条件</th></tr></thead><tbody><tr><td align="left">bs的HTML解析器</td><td>BeautifulSoup(mk,’html.parser’)</td><td>安装bs4库</td></tr><tr><td align="left">lxml的HTML解析器</td><td>BeautifulSoup(mk,’lxml’)</td><td>pip install lxml</td></tr><tr><td align="left">lxml的XML解析器</td><td>BeautifulSoup(mk,’xml’)</td><td>pip install lxml</td></tr><tr><td align="left">html5lib的解析器</td><td>BeautifulSoup(mk,’htlm5lib’)</td><td>pip install html5lib</td></tr></tbody></table><h5 id="4-Beautiful-Soup类的基本元素"><a href="#4-Beautiful-Soup类的基本元素" class="headerlink" title="4.Beautiful Soup类的基本元素"></a>4.Beautiful Soup类的基本元素</h5><table><thead><tr><th>基本元素</th><th>说明</th></tr></thead><tbody><tr><td>Tag</td><td>标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;表面开头和结尾</td></tr><tr><td>Name</td><td>标签的名称，<p>…</p>的名字是’p’，格式：<tag>.name</td></tr><tr><td>Attributes</td><td>标签的属性，字典形式组织，格式：<tag>.attrs</td></tr><tr><td>NavigableString</td><td>标签内非属性字符串，&lt;&gt;…&lt;/&gt;中字符串，格式：<tag>.string</td></tr><tr><td>Comment</td><td>标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="string">'&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;\r\n&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\r\n&lt;a href="http://www.icourse163.org/course/BIT-268001" class="py1" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a href="http://www.icourse163.org/course/BIT-1001870001" class="py2" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;\r\n&lt;/body&gt;&lt;/html&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用BeautifulSoup 解析成标签树</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>)</span><br><span class="line">soup</span><br><span class="line">&gt;[out]:</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">print(soup.prettify())   <span class="comment"># 输出标签树 </span></span><br><span class="line">&gt;[out]:</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;</span><br><span class="line">   This <span class="keyword">is</span> a python demo page</span><br><span class="line">  &lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;p class="title"&gt;</span><br><span class="line">   &lt;b&gt;</span><br><span class="line">    The demo python introduces several python courses.</span><br><span class="line">   &lt;/b&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class="course"&gt;</span><br><span class="line">   Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span><br><span class="line">   &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;</span><br><span class="line">    Basic Python</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   <span class="keyword">and</span></span><br><span class="line">   &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;</span><br><span class="line">    Advanced Python</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   .</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>实例一 Tag</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任何标签都可直接用soup.&lt;标签&gt;将其取出,当文本中存在多个相同标签时，其返回的为第一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 解析的页面实例</span></span><br><span class="line">soup.title <span class="comment"># 标签</span></span><br><span class="line">&gt; &lt;title&gt;This is a python demo page&lt;/title&gt;</span><br><span class="line">tag = soup.a </span><br><span class="line">tag</span><br><span class="line">&gt; &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;</span><br></pre></td></tr></table></figure><blockquote><p>实例二 Name</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取标签名称方法 &lt;tag&gt;.name</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 解析的页面实例</span></span><br><span class="line"></span><br><span class="line">soup.a.name</span><br><span class="line">&gt; <span class="string">'a'</span></span><br><span class="line">soup.a.parent.name <span class="comment"># a的上一层标签,即父标签</span></span><br><span class="line">&gt; <span class="string">'p'</span></span><br></pre></td></tr></table></figure><blockquote><p>实例三 Attributes</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取标签的属性 &lt;tag&gt;.attrs</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 解析的页面实例</span></span><br><span class="line"></span><br><span class="line">tag = souo.a <span class="comment"># 取a标签</span></span><br><span class="line">attrs = soup.attrs <span class="comment"># 提取出a标签的属性</span></span><br><span class="line">&gt; &#123;<span class="string">'href'</span>: <span class="string">'http://www.icourse163.org/course/BIT-268001'</span>,</span><br><span class="line"> <span class="string">'class'</span>: [<span class="string">'py1'</span>],</span><br><span class="line"> <span class="string">'id'</span>: <span class="string">'link1'</span>&#125;</span><br><span class="line"><span class="comment"># ，可以从结果看出，是字典的形式，故可直接通过键-值对的形式进一步提取信息内容</span></span><br><span class="line">attrs[<span class="string">'id'</span>]</span><br><span class="line">&gt; <span class="string">'link1'</span></span><br><span class="line">attrs[<span class="string">'href'</span>]</span><br><span class="line">&gt; <span class="string">'http://www.icourse163.org/course/BIT-268001'</span></span><br></pre></td></tr></table></figure><blockquote><p>实例四 NavigableString </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取标签的属性 &lt;tag&gt;.string 用于取出标签之间的字符串</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 解析的页面实例</span></span><br><span class="line"></span><br><span class="line">soup.a.string</span><br><span class="line">&gt; <span class="string">'Basic Python'</span></span><br><span class="line">soup.p.string</span><br><span class="line">&gt; <span class="string">'The demo python introduces several python courses.'</span>   （可跨越标签层次）</span><br></pre></td></tr></table></figure><blockquote><p>实例五 判断注释</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取标签的属性 &lt;tag&gt;.string 用于取出标签之间的字符串</span></span><br><span class="line">soup = BeautifulSoup(<span class="string">"&lt;b&gt;&lt;! --This is a comment--&gt;&lt;/b&gt;&lt;p&gt;This is not a comment&lt;/p&gt;"</span>,<span class="string">'html.parser'</span>)</span><br><span class="line">soup.b.string</span><br><span class="line">&gt; <span class="string">'This is not a comment'</span></span><br><span class="line">type(soup.b.string)</span><br><span class="line">&gt; bs4.element.Comment</span><br><span class="line">soup.p.string</span><br><span class="line">&gt; <span class="string">'This is not a comment'</span></span><br><span class="line">type(soup.p.string)</span><br><span class="line">&gt; bs4.element.NavigableString</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两者的类型不同，来判断是否为注释</span></span><br></pre></td></tr></table></figure><h5 id="5-基于Beautiful-Soup-HTML的遍历方法"><a href="#5-基于Beautiful-Soup-HTML的遍历方法" class="headerlink" title="5.基于Beautiful Soup HTML的遍历方法"></a>5.基于Beautiful Soup HTML的遍历方法</h5><p><strong>遍历方法</strong>：标签树，其为树形结构。</p><ul><li>下行遍历</li><li>上行遍历</li><li>平行遍历</li></ul><h6 id="5-1-下行遍历"><a href="#5-1-下行遍历" class="headerlink" title="5.1 下行遍历"></a>5.1 下行遍历</h6><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.contents</td><td>子节点的列表，将<tag>所有儿子节点存入列表 （返回列表类型）</td></tr><tr><td>.children</td><td>子节点的迭代类型，与.contents类似，用于循环遍历儿子节点 （返回迭代类型）</td></tr><tr><td>.descendants</td><td>子孙节点的迭代类型，包含所有子孙节点，用于循环遍历  （同上）</td></tr></tbody></table><p><strong>本小结实例皆以代码作为开头，不再重复写</strong> <code>&gt;</code>代表输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text <span class="comment"># demo为标签文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>) <span class="comment"># 解析的页面实例</span></span><br></pre></td></tr></table></figure><blockquote><p>实例一    .contents</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">soup.head.contents <span class="comment"># 结果呈现出列表形式</span></span><br><span class="line">&gt;  [&lt;title&gt;This is a python demo page&lt;/title&gt;]</span><br><span class="line"></span><br><span class="line">soup.body.contents <span class="comment"># 查看Body子节点的列表  </span></span><br><span class="line">&gt; </span><br><span class="line">[<span class="string">'\n'</span>,</span><br><span class="line"> &lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;,</span><br><span class="line"> <span class="string">'\n'</span>,</span><br><span class="line"> &lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line"> &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;,</span><br><span class="line"> <span class="string">'\n'</span>]</span><br><span class="line"></span><br><span class="line">len(soup.body.contents)</span><br><span class="line">&gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line">soup.body.contents[<span class="number">1</span>] <span class="comment"># 查看其下行节点的第二个</span></span><br><span class="line">&gt;  &lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><strong>标签树的下行遍历</strong></p><ul><li>遍历儿子节点（只遍历一层）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">print(child)</span><br></pre></td></tr></table></figure><ul><li>遍历子孙节点（所有节点）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.descendants:</span><br><span class="line">print(child)</span><br></pre></td></tr></table></figure><h6 id="5-2-标签树的上行遍历"><a href="#5-2-标签树的上行遍历" class="headerlink" title="5.2 标签树的上行遍历"></a>5.2 标签树的上行遍历</h6><p><strong>基本代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents: <span class="comment"># 对a标签所有的先辈名字进行打印</span></span><br><span class="line">    <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(parent)  <span class="comment"># 不存在父亲节，则不打印名称</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(parent.name) <span class="comment"># 存在父亲节点，则打印出先辈节点名称</span></span><br><span class="line">        </span><br><span class="line">p</span><br><span class="line">body</span><br><span class="line">html</span><br><span class="line">[document]</span><br></pre></td></tr></table></figure><h6 id="5-3-标签树的平行遍历"><a href="#5-3-标签树的平行遍历" class="headerlink" title="5.3 标签树的平行遍历"></a>5.3 标签树的平行遍历</h6><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.next_sibling</td><td>返回按照HTML<strong>文本顺序</strong>的下一个平行节点标签</td></tr><tr><td>.previous_sibling</td><td>返回按照HTML<strong>文本顺序</strong>的上一个平行节点标签</td></tr><tr><td>.next_siblings</td><td>迭代类型，返回按照HTML<strong>文本顺序</strong>的后续所有平行节点标签</td></tr><tr><td>.previous_siblings</td><td>迭代类型，返回按照HTML<strong>文本顺序</strong>的前续所有平行节点标签</td></tr></tbody></table><p>注意：平行遍历发生在同一个父节点下的各节点间**</p><blockquote><p>实例一 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">soup.a.next_sibling </span><br><span class="line">&gt; <span class="string">' and '</span></span><br><span class="line"></span><br><span class="line">soup.a.next_sibling.next_sibling   </span><br><span class="line">&gt; &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">soup.a.previous_sibling </span><br><span class="line">&gt; <span class="string">'Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\r\n'</span></span><br><span class="line"></span><br><span class="line">soup.a.previous_sibling.previous_sibling  <span class="comment"># 此时输出为空   </span></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">soup.a.parent.name </span><br><span class="line">&gt; <span class="string">'p'</span></span><br></pre></td></tr></table></figure><p><strong>标签树的平行遍历基本代码</strong></p><ul><li>遍历后续节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><ul><li>遍历前续节点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><h5 id="6-HTML的格式化输出"><a href="#6-HTML的格式化输出" class="headerlink" title="6.HTML的格式化输出"></a>6.HTML的格式化输出</h5><h6 id="6-1-prettify-方法"><a href="#6-1-prettify-方法" class="headerlink" title="6.1 prettify()方法"></a>6.1 prettify()方法</h6><p><code>soup.prettify()</code> # 显示换行符</p><p><code>print(soup.prettify())</code> # 格式化输出，标签树形式</p><h6 id="6-2-bs4库的编码"><a href="#6-2-bs4库的编码" class="headerlink" title="6.2 bs4库的编码"></a>6.2 bs4库的编码</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;中文&lt;/p&gt;'</span>,<span class="string">'html.parser'</span>)</span><br><span class="line">soup.p.string</span><br><span class="line">&gt; <span class="string">'中文'</span></span><br><span class="line">print(soup.prettify())</span><br><span class="line">&lt;p&gt;</span><br><span class="line"> 中文</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="五、信息标记的三种形式"><a href="#五、信息标记的三种形式" class="headerlink" title="五、信息标记的三种形式"></a>五、信息标记的三种形式</h4><ol><li><strong><code>XML</code></strong></li></ol><p><code>&lt;name 属性 Attribute(包含标签 Tag)&gt;...&lt;/name&gt;</code></p><ol start="2"><li><code>**JSON**</code></li></ol><p>有类型的键值对  <code>key:value</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> # 一键多值</span><br><span class="line">"name":["value1","value2",...] </span><br><span class="line"></span><br><span class="line"># 键值对的嵌套使用</span><br><span class="line">"name":&#123;</span><br><span class="line">    "key_1": "value1",</span><br><span class="line">    "key_2": "value2"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong><code>YAML</code></strong></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name :</span></span><br><span class="line">    <span class="attr">newName :</span> <span class="string">value</span></span><br><span class="line">    <span class="attr">oldName :</span> <span class="string">value</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 表达并列关系</span></span><br><span class="line"><span class="attr">name :</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line"><span class="comment"># |表达整块数据，#表示注释</span></span><br><span class="line"><span class="attr">key :</span> <span class="string">value</span></span><br><span class="line"><span class="attr">key:</span> <span class="comment">#Comment</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line"><span class="attr">key :</span></span><br><span class="line"><span class="attr">subkey:</span> <span class="string">subvalue</span></span><br></pre></td></tr></table></figure><h5 id="1-三种信息标记形式的比较"><a href="#1-三种信息标记形式的比较" class="headerlink" title="1.三种信息标记形式的比较"></a>1.三种信息标记形式的比较</h5><ul><li><code>XML</code>:Internet上的信息交互与传递。</li><li><code>JSON</code>:移动应用云端和节点的信息通信，无注释。</li><li><code>YAML</code>：各类系统的配置文件，有注释易读</li></ul><h5 id="2-信息提取的一般方法"><a href="#2-信息提取的一般方法" class="headerlink" title="2.信息提取的一般方法"></a>2.信息提取的一般方法</h5><ul><li>方法一：完整解析信息的标记形式，再提取关键信息。</li></ul><p><code>XML JSON YAML</code></p><p>需要标记解析器 例如：bs4库的标签树遍历</p><p>优点：信息解析准确</p><p>缺点：提取过程繁琐，速度慢。</p><ul><li>方法二：无视标记形式，直接搜索关键信息。</li></ul><p><strong>搜索</strong></p><p>对信息的文本查找函数即可</p><p>优点:提取过程简单，速度较快。</p><p>缺点：提取结果准确性与信息内容直接相关。</p><ul><li>融合方法</li></ul><p>融合方法：结合形式解析与搜索方法，提取关键信息。</p><p><code>XML JSON YMAL</code> 搜索</p><p>需要标记解析器及文本查找函数</p><p><strong>实例</strong></p><p>提取HTML中的所有URL链接</p><p>思路：</p><ol><li>搜索到所有<a>标签</li><li>解析<a>标签格式，提取href后的链接内容</li></ol><h5 id="3-基于bs4库的HTML内容查找方法"><a href="#3-基于bs4库的HTML内容查找方法" class="headerlink" title="3.基于bs4库的HTML内容查找方法"></a>3.基于bs4库的HTML内容查找方法</h5><p><strong>前期工作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = request.get(<span class="string">'http://python123.io/ws/demo.html'</span>)</span><br><span class="line">demo = r.text</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">'html.parser'</span>)</span><br></pre></td></tr></table></figure><p><code>&lt;&gt;.find_all(name,attrs,recursive,string,**kwargs)</code></p><ul><li>返回一个列表类型，存储查找的结果。</li></ul><p><code>name</code>:对标签名称的检索字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">'a'</span>) <span class="comment"># 返回a标签的列表，可得其中两个属性</span></span><br><span class="line">&gt; </span><br><span class="line">[&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;,</span><br><span class="line"> &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line"></span><br><span class="line">soup.find_all([<span class="string">'a'</span>,<span class="string">'b'</span>]) <span class="comment"># 同时查询'a','b'标签，以列表形式返回</span></span><br><span class="line">&gt;Out[<span class="number">65</span>]: </span><br><span class="line">[&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;,</span><br><span class="line"> &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;,</span><br><span class="line"> &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: <span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="literal">True</span>): <span class="comment"># 查询所有的标签</span></span><br><span class="line">    ...:     print(tag.name) </span><br><span class="line">    ...:                                                                        </span><br><span class="line">&gt; </span><br><span class="line">html</span><br><span class="line">head</span><br><span class="line">title</span><br><span class="line">body</span><br><span class="line">p</span><br><span class="line">b</span><br><span class="line">p</span><br><span class="line">a</span><br><span class="line">a</span><br></pre></td></tr></table></figure><ul><li><code>attrs</code>:对标签属性值的检索字符串，可标注属性检索。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">'p'</span>,<span class="string">'course'</span>)   <span class="comment"># 返回p标签中所有的course属性</span></span><br><span class="line">Out[<span class="number">68</span>]: </span><br><span class="line">[&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line"> &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;]</span><br><span class="line"></span><br><span class="line">soup.find_all(id=<span class="string">'link1'</span>)  <span class="comment"># 返回id='link1'的全部标签信息</span></span><br><span class="line">Out[71]: [&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;]</span><br><span class="line"></span><br><span class="line">soup.find_all(id=<span class="string">'link'</span>)  </span><br><span class="line">Out[<span class="number">75</span>]: []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询带有link(查询出所有的link，无论尾号为几），需要借助正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">soup.find_all(id=re.compile(<span class="string">'link'</span>))  </span><br><span class="line">Out[<span class="number">79</span>]: </span><br><span class="line">[&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;,</span><br><span class="line"> &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;]</span><br></pre></td></tr></table></figure><ul><li><p><code>recursive</code>:是否对子孙全部检索，默认True。</p></li><li><p><code>string</code>:&lt;&gt;…&lt;/&gt;中字符串区域的检索字符串。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只返回检索部分</span></span><br><span class="line">soup.find_all(string=<span class="string">'Basic Python'</span>)    </span><br><span class="line">Out[<span class="number">80</span>]: [<span class="string">'Basic Python'</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 利用正则表达式，提取全部</span></span><br><span class="line">soup.find_all(string=re.compile(<span class="string">'python'</span>)) <span class="comment"># 提取全部带Python的过程</span></span><br><span class="line">Out[<span class="number">82</span>]: </span><br><span class="line">[<span class="string">'This is a python demo page'</span>,</span><br><span class="line"> <span class="string">'The demo python introduces several python courses.'</span>]</span><br></pre></td></tr></table></figure><p><code>&lt;tag&gt;(...)等价于 &lt;tag&gt;.find_all()</code></p><p><code>soup(...)等价于soup.find_all(...)</code></p><h5 id="4-扩展方法"><a href="#4-扩展方法" class="headerlink" title="4.扩展方法"></a>4.扩展方法</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&gt;.find()</td><td>搜索且只返回一个结果，字符串类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_parents()</td><td>在先辈节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_parent()</td><td>在先辈节点中返回一个结果，字符串类型，同.find()参数</td></tr><tr><td>&lt;&gt;.find_next_siblings()</td><td>在后续平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find_next_sibling()</td><td>在后续平行节点中返回一个结果，字符串类型，同.find()</td></tr><tr><td>&lt;&gt;.find_previous_siblings()</td><td>在前续平行节点中搜索，返回列表类型，同.find_all()</td></tr><tr><td>&lt;&gt;.find_previous_sibling</td><td>在前续平行节点中返回一个结果，字符串类型，同.find()</td></tr></tbody></table><h4 id="六、正则表达式"><a href="#六、正则表达式" class="headerlink" title="六、正则表达式"></a>六、正则表达式</h4><h5 id="1-正则表达式语法"><a href="#1-正则表达式语法" class="headerlink" title="1.正则表达式语法"></a>1.正则表达式语法</h5><h6 id="1-1正则表达式由字符和操作符构成"><a href="#1-1正则表达式由字符和操作符构成" class="headerlink" title="1.1正则表达式由字符和操作符构成"></a>1.1正则表达式由字符和操作符构成</h6><table><thead><tr><th>操作符</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>.</td><td>表示任何<strong>单个</strong>字符</td><td></td></tr><tr><td>[]</td><td>字符集，对<strong>单个</strong>字符给出取值范围</td><td>[abc]表示a,b,c；[a-z]表示a到z单个字符</td></tr><tr><td>[^]</td><td>非字符集，对个<strong>单个</strong>字符给出排除范围</td><td>[^abc]表示非a或b或c的单个字符</td></tr><tr><td>*</td><td>前一个字符<strong>0次</strong>或无限次扩展</td><td>abc*表示ab、abc、abcc、abcc等</td></tr><tr><td>+</td><td>前一个字符<strong>1次</strong>或无限次扩展</td><td>abc+表示abc、abcc、abccc等</td></tr><tr><td>？</td><td>前一个字符<strong>0次</strong>或<strong>1次</strong>扩展</td><td>abc?表示ab、abc</td></tr><tr><td>|</td><td>左右表达式任意<strong>一个</strong></td><td>abc|def表示adc、def</td></tr><tr><td>{m}</td><td>扩展前一个字符m次</td><td>ab{2}c表示abbc</td></tr><tr><td>{m,n}</td><td>扩展前一个字符m至n次（含n）</td><td>ab{1,2}c表示abc、abbc</td></tr><tr><td>^</td><td>匹配字符串开头</td><td>^abc表示abc且在一个字符串的开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td><td>abc$表示abc且在一个字符串的结尾</td></tr><tr><td>()</td><td>分组标记，内部只能使用|操作符</td><td>(abc)表示abc,(abc|def)表示abc、def</td></tr><tr><td>\d</td><td>数字，等价于[0-9]</td><td></td></tr><tr><td>\w</td><td>单词字符，等价于[A-Za-z0-9_]</td><td></td></tr></tbody></table><p><strong>举例</strong></p><table><thead><tr><th>正则表达式</th><th>对应字符串</th></tr></thead><tbody><tr><td>P(Y|YT|YTH|YTHO)?N</td><td>‘PN’,’PYN’,’PYTN’,’PYTHN’,’PYTHON’</td></tr><tr><td>PYTHON+</td><td>‘PYTHON’,’PYTHONN’,’PYTHONNN’…</td></tr><tr><td>PY[TH]ON</td><td>‘PYTON’,’PYHON’</td></tr><tr><td>PY[^TH]?ON</td><td>‘PYON’,’PYAON’,’PYBON’,…</td></tr><tr><td>PY{:3}N</td><td>‘PN’,’PYYN’,’PYYYN’</td></tr></tbody></table><h6 id="1-2经典正则表达式实例"><a href="#1-2经典正则表达式实例" class="headerlink" title="1.2经典正则表达式实例"></a>1.2经典正则表达式实例</h6><p><code>^[A-Za-z]+$         由26个字母组成的字符串</code></p><p><code>^[A-Za-z0-9]+$     由26个字母和数字组成的字符串</code></p><p><code>^-?\d+$             整数形式的字符串 - 表示负号</code></p><p><code>^[0-9]*[1-9][0-9]*$  正整数形式的字符串</code></p><p><code>[1-9]\d{5} 中国境内邮政编码，6位</code></p><p><code>[\u4e00- \u9fa5]   匹配中文字符utf-8编码</code></p><p><code>\d{3}-\d{8}|\d{4}-\d{7}    国内电话号码，010-68913536</code> </p><h6 id="1-3匹配IP地址的正则表达式"><a href="#1-3匹配IP地址的正则表达式" class="headerlink" title="1.3匹配IP地址的正则表达式"></a>1.3匹配IP地址的正则表达式</h6><p>IP地址字符串形式的正则表达式（IP地址分4段，每段0-255）</p><ul><li><p>粗略划分：</p><ul><li><code>\d+.\d+.\d+.\d+</code></li><li><code>\d{1,3}.\d{1,3}.\d{1,3}.\{1,3}</code></li></ul></li><li><p>精确划分</p><ul><li><code>0-99</code>: [1-9]?\d</li><li><code>100-199</code>:1\d{2}</li><li><code>200-249</code>:2[0-4]\d</li><li><code>250-255</code>:25[0-5]</li></ul><p><code>拼接</code>：<code>(([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5])\.){3}([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5])</code></p></li></ul><h5 id="2-Re库"><a href="#2-Re库" class="headerlink" title="2.Re库"></a>2.Re库</h5><h6 id="2-1-raw-string类型（原生字符串类型）"><a href="#2-1-raw-string类型（原生字符串类型）" class="headerlink" title="2.1 raw string类型（原生字符串类型）"></a>2.1 raw string类型（原生字符串类型）</h6><p>re库采用raw string类型表示正则表达式，表示为：<code>r&#39;text&#39;</code></p><p><strong>即：字符串原样输出，不用采用转移字符\。</strong></p><h6 id="2-2-Re库主要功能函数"><a href="#2-2-Re库主要功能函数" class="headerlink" title="2.2 Re库主要功能函数"></a>2.2 Re库主要功能函数</h6><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>re.search()</td><td>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td>re.match()</td><td>从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td>re.findall()</td><td>搜索字符串，以<strong>列表类型</strong>返回全部能匹配的子串</td></tr><tr><td>re.split()</td><td>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td>re.finditer()</td><td>搜索字符串，返回一个匹配结果的迭代类型，每个<strong>迭代</strong>元素是match对象</td></tr><tr><td>re.sub()</td><td>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><ul><li><p><code>re.search(pattern,string,flags=0)</code></p><ul><li><p>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象。</p></li><li><p><code>pattern</code>:正则表达式的字符串或原生字符串表示</p></li><li><p><code>string</code>:待匹配字符串。</p></li><li><p><code>flags</code>:正则表达式使用时的控制标记。</p><ul><li><p><code>flags</code>:正则表达式使用时的控制标记</p><table><thead><tr><th>常用标记</th><th>说明</th></tr></thead><tbody><tr><td>re.I    re.IGNORECASE</td><td>忽略正则表达式的大小写，[A-Z]能够匹配小写字符</td></tr><tr><td>re.M    <br />re.MULTILINE</td><td>正则表达式中的^操作符能够将给定字符串的每行当做匹配开始</td></tr><tr><td>re.S  <br />re.DOTALL</td><td>正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</td></tr></tbody></table></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    print(match.group(<span class="number">0</span>))</span><br><span class="line">&gt; <span class="number">100081</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><code>re.match(pattern,string,flags=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.match(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line">&gt; AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure></li><li><p><code>re.findall(pattern,string,flags=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = re.findall(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'AAA100081 BBBB100084'</span>)    </span><br><span class="line">ls</span><br><span class="line">&gt;  [<span class="string">'100081'</span>, <span class="string">'100084'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>re.split(pattern,string,maxsplit,flags=0)</code></p><ul><li><code>maxsplit</code>:最大分割数目，达到数目，剩余部分作为最后一个元素输出。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'AAA100081 BBBB100084'</span>) <span class="comment"># 将匹配的切割掉</span></span><br><span class="line">&gt; [<span class="string">'AAA'</span>, <span class="string">' BBBB'</span>, <span class="string">''</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>re.split(pattern,string,flags=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'AAA100081 BBBB100084'</span>): <span class="comment"># 迭代输出</span></span><br><span class="line">    <span class="keyword">if</span> m:</span><br><span class="line">        print(m.group(<span class="number">0</span>))</span><br><span class="line">&gt; </span><br><span class="line"><span class="number">100081</span></span><br><span class="line"><span class="number">100084</span></span><br></pre></td></tr></table></figure></li><li><p><code>re.split(pattern,repl,string,count=0,flags=0)</code></p><ul><li><code>repl</code>:替换匹配字符串的字符串</li><li><code>count</code>:匹配的最大替换次数</li></ul></li></ul><h6 id="2-3-Re库的另一种等价用法"><a href="#2-3-Re库的另一种等价用法" class="headerlink" title="2.3 Re库的另一种等价用法"></a>2.3 Re库的另一种等价用法</h6><p><code>rst = re.search(r&#39;[1-9]\d{5}&#39;,&#39;BIT 100081&#39;) 函数式用法：一次性操作</code></p><p><strong>等价于：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 面向对象用法：编译后的多次操作</span></span><br><span class="line">pat = re.compile(<span class="string">r'[1-9]\d&#123;5&#125;'</span>) </span><br><span class="line">rst = pat.search(<span class="string">'BIT 100081'</span>)</span><br></pre></td></tr></table></figure><p><code>regex = re.compile(pattern,flags=0)</code></p><ul><li>将正则表达式的字符串形式编译成<strong>正则表达式对象</strong><ul><li><code>pattern</code>:正则表达式的字符串或原生字符串表示</li><li><code>flags</code>:正则表达式使用时的控制标记</li></ul></li></ul><h6 id="2-4-Match对象的属性"><a href="#2-4-Match对象的属性" class="headerlink" title="2.4 Match对象的属性"></a>2.4 Match对象的属性</h6><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.string</td><td>待匹配的文本</td></tr><tr><td>.re</td><td>匹配时使用的pattern对象（正则表达式）</td></tr><tr><td>.pos</td><td>正则表达式搜索文本的开始位置</td></tr><tr><td>.endpos</td><td>正则表达式搜索文本的结束位置</td></tr></tbody></table><h6 id="2-5-Match对象的方法"><a href="#2-5-Match对象的方法" class="headerlink" title="2.5 Match对象的方法"></a>2.5 Match对象的方法</h6><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.group(0)</td><td>获取匹配后的字符串</td></tr><tr><td>.start()</td><td>匹配字符串在原始字符串的开始位置</td></tr><tr><td>.end()</td><td>匹配字符串在原始字符串的结束位置</td></tr><tr><td>.span()</td><td>返回(.start(),.end())</td></tr></tbody></table><h6 id="2-6-Re库的贪婪匹配和最小匹配"><a href="#2-6-Re库的贪婪匹配和最小匹配" class="headerlink" title="2.6 Re库的贪婪匹配和最小匹配"></a>2.6 Re库的贪婪匹配和最小匹配</h6><p><strong>实例:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">r'PY.*N'</span>,<span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">101</span>]: <span class="string">'PYANBNCNDN'</span></span><br></pre></td></tr></table></figure><p><strong>Re库默认采用贪婪匹配，即输出匹配最长的子串。</strong></p><p><strong>最小匹配</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">r'PY.*?N'</span>,<span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">102</span>]: <span class="string">'PYAN'</span></span><br></pre></td></tr></table></figure><p><strong>最小匹配操作符</strong></p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>前一个字符0次或无限次扩展，最小匹配</td></tr><tr><td>+?</td><td>前一个字符1次或无限次扩展，最小匹配</td></tr><tr><td>??</td><td>前一个字符0次或1次扩展，最小匹配</td></tr><tr><td>{m,n}?</td><td>扩展前一个字符m至n次（含n），最小匹配</td></tr></tbody></table><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…."></a>未完待续….</h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> Request </tag>
            
            <tag> Beautifulsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习:决策树入门之泰坦尼克号案例</title>
      <link href="/2020/02/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%86%B3%E7%AD%96%E6%A0%91%E5%85%A5%E9%97%A8%E4%B9%8B%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/02/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%86%B3%E7%AD%96%E6%A0%91%E5%85%A5%E9%97%A8%E4%B9%8B%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>本文用于记录机器学习中的一次入门练习，即：利用决策树进行简单的二分类。同时，结合Kaggle上的经典案例Titanic，来测试实际效果。</p><h1 id="一、数据集"><a href="#一、数据集" class="headerlink" title="一、数据集"></a>一、数据集</h1><p>采用<a href="https://www.kaggle.com/c/titanic/data" target="_blank" rel="noopener">Kaggle</a>中的Titanic的数据集。数据包含分为：  </p><ul><li>训练集: training set (train.csv)</li><li>测试集: test set (test.csv)</li><li>提交标准: gender_submission.csv  </li></ul><p>由于Kaggle涉及到科学上网的操作，所以<a href="https://github.com/ChemLez/ML-sklearn/tree/master/1-%20DecisionTree" target="_blank" rel="noopener">原始数据集</a>已经下载好放在Gighub上了。</p><h1 id="二、数据处理"><a href="#二、数据处理" class="headerlink" title="二、数据处理"></a>二、数据处理</h1><p>首先导入训练集，查看数据的情况：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier <span class="comment"># 导入模型决策树分类器</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score,train_test_split,GridSearchCV <span class="comment"># 导入的模型作用分别为交叉验证、训练集与数据集的划分，网格搜索</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">'/Users/liz/code/jupyter-notebook/sklearn/1- DecisionTree/Titanic_train.csv'</span>) <span class="comment"># 导入数据集</span></span><br><span class="line">data.head() <span class="comment"># 显示数据集的前五行</span></span><br><span class="line">[out]:</span><br></pre></td></tr></table></figure><a id="more"></a><overflow><table><thead><tr><th></th><th>PassengerId</th><th>Survived</th><th>Pclass</th><th>Name</th><th>Sex</th><th>Age</th><th>SlibSp</th><th>Parch</th><th>Ticek</th><th>Fare</th><th>Cabin</th><th>Embarked</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>3</td><td>Braund, Mr. Owen Harris</td><td>male</td><td>22.0</td><td>1</td><td>0</td><td>A/5 21171</td><td>7.2500</td><td>NaN</td><td>S</td></tr><tr><td>1</td><td>2</td><td>1</td><td>1</td><td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td><td>female</td><td>38.0</td><td>1</td><td>0</td><td>PC 17599</td><td>71.2833</td><td>C85</td><td>C</td></tr><tr><td>2</td><td>3</td><td>1</td><td>3</td><td>Heikkinen, Miss. Laina</td><td>female</td><td>26.0</td><td>0</td><td>0</td><td>STON/O2. 3101282</td><td>7.9250</td><td>NaN</td><td>S</td></tr><tr><td>3</td><td>4</td><td>1</td><td>1</td><td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td><td>female</td><td>35.0</td><td>1</td><td>0</td><td>113803</td><td>53.1000</td><td>C123</td><td>S</td></tr><tr><td>4</td><td>5</td><td>0</td><td>3</td><td>Allen, Mr. William Henry</td><td>male</td><td>35.0</td><td>0</td><td>0</td><td>373450</td><td>8.0500</td><td>NaN</td><td>S</td></tr></tbody></table></overflow><p>通过以上的数据所展示的情况，我们所要做的是将Survived作为标签，其余的列作为特征。目标：以所知的特征来预测标签。这份数据集的实际意义是:通过已知数据对乘客的生还情况做一次预测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">data.info() <span class="comment"># 查看整个训练集的情况</span></span><br><span class="line">out:</span><br><span class="line"> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class">    <span class="title">RangeIndex</span>:</span> <span class="number">891</span> entries, <span class="number">0</span> to <span class="number">890</span></span><br><span class="line">    Data columns (total <span class="number">12</span> columns):</span><br><span class="line">    PassengerId    <span class="number">891</span> non-null int64</span><br><span class="line">    Survived       <span class="number">891</span> non-null int64</span><br><span class="line">    Pclass         <span class="number">891</span> non-null int64</span><br><span class="line">    Name           <span class="number">891</span> non-null object</span><br><span class="line">    Sex            <span class="number">891</span> non-null object</span><br><span class="line">    Age            <span class="number">714</span> non-null float64</span><br><span class="line">    SibSp          <span class="number">891</span> non-null int64</span><br><span class="line">    Parch          <span class="number">891</span> non-null int64</span><br><span class="line">    Ticket         <span class="number">891</span> non-null object</span><br><span class="line">    Fare           <span class="number">891</span> non-null float64</span><br><span class="line">    Cabin          <span class="number">204</span> non-null object</span><br><span class="line">    Embarked       <span class="number">889</span> non-null object</span><br><span class="line">    dtypes: float64(<span class="number">2</span>), int64(<span class="number">5</span>), object(<span class="number">5</span>)</span><br><span class="line">    memory usage: <span class="number">83.7</span>+ KB</span><br></pre></td></tr></table></figure><h5 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h5><ol><li>通过以上的数据展示，共有891条数据，其中具有缺失值的特征有：Age、Cabin、Embarked；非数值型的特征有：Name,Sex,Ticket,Cabin,Embarked。</li><li>当我们采用现有的特征对乘客进行生还情况预测时，一些处理较为麻烦且不太重要的特征对可不采用。例如：这里的Name、Ticket可以不采用，因为在实际情况中乘客的名字以及所购的票对于乘客的生还情况作用不大。另外一点原因是这两者皆为非数值型数据，处理成数值形式较为复杂（在计算机中所接受的数据最终都要以数字的形式进行呈现）。</li><li>由于Cabin缺失值较多，这里采用删除的方式，理由同上。</li><li>虽然性别也为字符型数据，当在实际中性别对于逃生的可能性具有一定的影响，故对其保留。</li><li>将缺失值进行填补；将非数值型数据转化为数值型数据。    </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除Name、Ticket、Cabin特征列</span></span><br><span class="line">data.drop([<span class="string">'Name'</span>,<span class="string">'Cabin'</span>,<span class="string">'Ticket'</span>],inplace=<span class="literal">True</span>,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺失值的填补</span></span><br><span class="line"><span class="comment"># 对于Age的缺失值填补的一种策略为：以年龄的平均值作为填补</span></span><br><span class="line">data.loc[:,<span class="string">'Age'</span>] = data[<span class="string">'Age'</span>].fillna(int(data[<span class="string">'Age'</span>].mean()))</span><br><span class="line"><span class="comment"># Embarked由于只有两条数据具有缺失值，这里采用的方式是删除这两条缺失的数据（缺失两条数据对模型的训练好坏影响不大）</span></span><br><span class="line">data = data.dropna()</span><br><span class="line">data = data.reset_index(drop = <span class="literal">True</span>) <span class="comment"># 删除过后，用于重置索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将非数值型数据转化为数值型数据</span></span><br><span class="line"><span class="comment"># 性别只有两类，故可用0\1来表示男女</span></span><br><span class="line">data[<span class="string">'Sex'</span>] = (data[<span class="string">'Sex'</span>] == <span class="string">'male'</span>).astype(int) <span class="comment"># 0表示女，1表示男</span></span><br><span class="line">tags = data[<span class="string">'Embarked'</span>].unique().tolist() <span class="comment"># tags: ['S', 'C', 'Q']</span></span><br><span class="line"><span class="comment"># Embarked只有三类分别以S,C,Q的索引代表他们,0~9均可采用此种方法</span></span><br><span class="line">data.iloc[:,data.columns == <span class="string">'Embarked'</span>] = data[<span class="string">'Embarked'</span>].apply(<span class="keyword">lambda</span> x : tags.index(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">data.info() <span class="comment"># 查看数据信息</span></span><br><span class="line">out:</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">RangeIndex</span>:</span> <span class="number">889</span> entries, <span class="number">0</span> to <span class="number">888</span></span><br><span class="line">Data columns (total <span class="number">9</span> columns):</span><br><span class="line">PassengerId    <span class="number">889</span> non-null int64</span><br><span class="line">Survived       <span class="number">889</span> non-null int64</span><br><span class="line">Pclass         <span class="number">889</span> non-null int64</span><br><span class="line">Sex            <span class="number">889</span> non-null int64</span><br><span class="line">Age            <span class="number">889</span> non-null float64</span><br><span class="line">SibSp          <span class="number">889</span> non-null int64</span><br><span class="line">Parch          <span class="number">889</span> non-null int64</span><br><span class="line">Fare           <span class="number">889</span> non-null float64</span><br><span class="line">Embarked       <span class="number">889</span> non-null int64</span><br><span class="line">dtypes: float64(<span class="number">2</span>), int64(<span class="number">7</span>)</span><br><span class="line">memory usage: <span class="number">62.6</span> KB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将特征与标签进行分离</span></span><br><span class="line">x = data.iloc[:,data.columns != <span class="string">'Survived'</span>] <span class="comment"># 取出Survived以为的列作为特征x</span></span><br><span class="line">y = data.iloc[:,data.columns == <span class="string">'Survived'</span>] <span class="comment"># 取出Survived列作为特征y</span></span><br></pre></td></tr></table></figure><h5 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h5><p>思路：采用交叉验证来评估我们的模型；同时采用网格搜索来查找决策树中常见的最佳参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网格搜索：能够帮助我们同时调整多个参数的技术，本质是枚举技术。</span></span><br><span class="line"><span class="comment"># paramerters：用于确定的参数。</span></span><br><span class="line">parameters = &#123;<span class="string">'splitter'</span>:(<span class="string">'best'</span>,<span class="string">'random'</span>)</span><br><span class="line">             ,<span class="string">'criterion'</span>:(<span class="string">'gini'</span>,<span class="string">'entropy'</span>)</span><br><span class="line">             ,<span class="string">'max_depth'</span>:[*range(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">             ,<span class="string">'min_samples_leaf'</span>:[*range(<span class="number">1</span>,<span class="number">50</span>,<span class="number">5</span>)]</span><br><span class="line">             ,<span class="string">'min_impurity_decrease'</span>:[*np.linspace(<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">20</span>)]</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网格搜索实例代码，所需要确定的参数越多，耗时越长</span></span><br><span class="line">clf = DecisionTreeClassifier(random_state=<span class="number">30</span>)</span><br><span class="line">GS = GridSearchCV(clf,parameters,cv=<span class="number">10</span>) <span class="comment"># cv=10,做10次交叉验证</span></span><br><span class="line">GS = GS.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最佳参数</span></span><br><span class="line">GS.best_params_</span><br><span class="line">out:</span><br><span class="line">    &#123;<span class="string">'criterion'</span>: <span class="string">'gini'</span>,</span><br><span class="line"> <span class="string">'max_depth'</span>: <span class="number">3</span>,</span><br><span class="line"> <span class="string">'min_impurity_decrease'</span>: <span class="number">0.0</span>,</span><br><span class="line"> <span class="string">'min_samples_leaf'</span>: <span class="number">1</span>,</span><br><span class="line"> <span class="string">'splitter'</span>: <span class="string">'best'</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 最佳得分</span></span><br><span class="line">GS.best_score_</span><br></pre></td></tr></table></figure><p>确定了设置的参数的最佳值，开始训练模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练模型，将以上设置参数的最佳值填入模型的实例化中</span></span><br><span class="line">clf_model = DecisionTreeClassifier(criterion=<span class="string">'gini'</span></span><br><span class="line">                                  ,max_depth=<span class="number">3</span></span><br><span class="line">                                  ,min_samples_leaf=<span class="number">1</span></span><br><span class="line">                                  ,min_impurity_decrease=<span class="number">0</span></span><br><span class="line">                                  ,splitter=<span class="string">'best'</span></span><br><span class="line">                                  )</span><br><span class="line">clf_model = clf_model.fit(x,y)</span><br></pre></td></tr></table></figure><p>导出模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line">joblib.dump(clf_model,<span class="string">'/Users/liz/Code/jupyter-notebook/sklearn/1- DecisionTree/clf_model.m'</span>)</span><br></pre></td></tr></table></figure><p>测试集的处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入测试集</span></span><br><span class="line">data_test = pd.read_csv(<span class="string">'/Users/liz/code/jupyter-notebook/sklearn/1- DecisionTree/Titanic_test.csv'</span>)</span><br><span class="line">data_test.info()</span><br><span class="line">out:</span><br><span class="line">    &lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="class">    <span class="title">RangeIndex</span>:</span> <span class="number">418</span> entries, <span class="number">0</span> to <span class="number">417</span></span><br><span class="line">    Data columns (total <span class="number">11</span> columns):</span><br><span class="line">    PassengerId    <span class="number">418</span> non-null int64</span><br><span class="line">    Pclass         <span class="number">418</span> non-null int64</span><br><span class="line">    Name           <span class="number">418</span> non-null object</span><br><span class="line">    Sex            <span class="number">418</span> non-null object</span><br><span class="line">    Age            <span class="number">332</span> non-null float64</span><br><span class="line">    SibSp          <span class="number">418</span> non-null int64</span><br><span class="line">    Parch          <span class="number">418</span> non-null int64</span><br><span class="line">    Ticket         <span class="number">418</span> non-null object</span><br><span class="line">    Fare           <span class="number">417</span> non-null float64</span><br><span class="line">    Cabin          <span class="number">91</span> non-null object</span><br><span class="line">    Embarked       <span class="number">418</span> non-null object</span><br><span class="line">    dtypes: float64(<span class="number">2</span>), int64(<span class="number">4</span>), object(<span class="number">5</span>)</span><br><span class="line">    memory usage: <span class="number">36.0</span>+ KB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集处理的方法同训练集，同时测试集要与训练集保持同样的特征</span></span><br><span class="line"><span class="comment"># 由于最后，我们需要将处理结果上传到Kaggle上，所以不能够将数据条目减少，即：需要上传418条测试数据；故这里Fare缺失的一条数目同样采用平均值来填补</span></span><br><span class="line">data_test.drop([<span class="string">'Name'</span>,<span class="string">'Ticket'</span>,<span class="string">'Cabin'</span>],inplace=<span class="literal">True</span>,axis=<span class="number">1</span>)</span><br><span class="line">data_test[<span class="string">'Age'</span>] = data_test[<span class="string">'Age'</span>].fillna(int(data_test[<span class="string">'Age'</span>].mean()))</span><br><span class="line">data_test[<span class="string">'Fare'</span>] = data_test[<span class="string">'Fare'</span>].fillna(int(data_test[<span class="string">'Fare'</span>].mean()))</span><br><span class="line">data_test.loc[:,<span class="string">'Sex'</span>] = (data_test[<span class="string">'Sex'</span>] == <span class="string">'male'</span>).astype(int)</span><br><span class="line">tags = data_test[<span class="string">'Embarked'</span>].unique().tolist()</span><br><span class="line">data_test[<span class="string">'Embarked'</span>] = data_test[<span class="string">'Embarked'</span>].apply(<span class="keyword">lambda</span> x : tags.index(x))</span><br></pre></td></tr></table></figure><p>此时测试集数据预处理完毕，导出模型并对数据进行测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出模型且测试数据集</span></span><br><span class="line">model = joblib.load(<span class="string">'/Users/liz/Code/jupyter-notebook/sklearn/1- DecisionTree/clf_model.m'</span>)</span><br><span class="line">Survived = model.predict(data_test) <span class="comment"># 测试结果</span></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line">Survived = pd.DataFrame(&#123;<span class="string">'Survived'</span>:Survived&#125;) <span class="comment"># 将结果转换为字典形式并后续作为csv形式导出</span></span><br><span class="line">PassengerId = data_test.iloc[:,data_test.columns == <span class="string">'PassengerId'</span>] <span class="comment"># 切片，分割出PassengerId</span></span><br><span class="line">gender_submission = pd.concat([PassengerId,Survived],axis=<span class="number">1</span>)<span class="comment"># 将Survived与PassengerId拼接，一一对应</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导出数据</span></span><br><span class="line"><span class="comment">#导出数据</span></span><br><span class="line">gender_submission.index = np.arange(<span class="number">1</span>, len(gender_submission)+<span class="number">1</span>) <span class="comment"># 索引从1开始</span></span><br><span class="line">gender_submission.to_csv(<span class="string">'/Users/liz/Code/jupyter-notebook/sklearn/1- DecisionTree/gender_submission.csv'</span>,index=<span class="literal">False</span>) <span class="comment"># index=False，导出时不显示索引</span></span><br></pre></td></tr></table></figure><p>导出文件:</p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <td>0</td>      <td>892</td>      <td>0</td>    </tr>    <tr>      <td>1</td>      <td>893</td>      <td>1</td>    </tr>    <tr>      <td>2</td>      <td>894</td>      <td>0</td>    </tr>    <tr>      <td>3</td>      <td>895</td>      <td>0</td>    </tr>    <tr>      <td>4</td>      <td>896</td>      <td>1</td>    </tr>    <tr>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <td>413</td>      <td>1305</td>      <td>0</td>    </tr>    <tr>      <td>414</td>      <td>1306</td>      <td>1</td>    </tr>    <tr>      <td>415</td>      <td>1307</td>      <td>0</td>    </tr>    <tr>      <td>416</td>      <td>1308</td>      <td>0</td>    </tr>    <tr>      <td>417</td>      <td>1309</td>      <td>0</td>    </tr>  </tbody></table><p>418 rows × 2 columns</p><p>将结果提交到<a href="https://www.kaggle.com/c/titanic" target="_blank" rel="noopener">Kaggle</a>上，最终得分：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/02/09/1WxMnK.png" alt="得分"></p><p>最终得分0.77990，分数不高，最高有得满分的，此篇只是作为机器学习及Kaggle的一个入门。</p><p>最终的源代码及Kaggle的数据集都会上传到我的Github仓库中，其中也包括一些网络上搬运的相关笔记也都会上传到Github上,此仓库会持续更新…</p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><btns rounded grid5><a href='https://github.com/ChemLez/ML-sklearn/' target="_blank" rel="noopener"><i class='fas fa-download'></i>下载源码</a></a></btns>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
          <category> sklearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DecisionTree </tag>
            
            <tag> Kaggle </tag>
            
            <tag> sklearn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云端MySQL安装及相关配置</title>
      <link href="/2020/01/22/%E4%BA%91%E7%AB%AFMySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/22/%E4%BA%91%E7%AB%AFMySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>由于自己的阿里云账号申请不足6个月，能够享受新用户云服务器ECS89元一年的优惠政策，所以就购买了一台云服务器，作为日常学习的使用。本文用来记录此次装载云服务器所遇到的一些问题及MySQL的安装过程。</p><h4 id="一、云服务器的选配及配置"><a href="#一、云服务器的选配及配置" class="headerlink" title="一、云服务器的选配及配置"></a>一、云服务器的选配及配置</h4><p>此次我选购的服务器网址:<a href="http://aliyun.langsan.com/?bd_vid=8575091722087683835" target="_blank" rel="noopener">http://aliyun.langsan.com/?bd_vid=8575091722087683835</a>。下图为此次所购的云服务器配置:  <img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1AMtQs.png" alt="服务器配置"> </p><a id="more"></a><p>后续步骤为：提货券的兑换；地域站点的选取以及系统的选配。这里我选取的为上海的站点（大陆境内站点随便选没什么差别），系统选装的为Centos7(具体到7.x没什么区别)。然后就是阿里云那边的自动配置了。购买及配置较为简单，全部为阿里云的傻瓜一站式操作。</p><h4 id="二、安全组的设置"><a href="#二、安全组的设置" class="headerlink" title="二、安全组的设置"></a>二、安全组的设置</h4><p>第一次服务器的使用，需要进行安全组的设置。进入到自己的控制台-实例与镜像-实例。这个时候就能够看到自己的服务器。勾选此台服务器：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1AlfPO.png" alt="">  </p><ul><li><p>依次设置实例ID、重置实例密码；  </p></li><li><p>在更多选项中选择密码/密匙。重置远程连接的密码。  </p><p><strong>注</strong>:实例密码为操作系统的密码，即为root用户名密码。在实例创建时可选设定，如果没有设定或者遗忘可在阿里云的个人控制台上进行密码重置操作；远程链接密码是通过个人后台控制面板，通过内网形式直接链接到操作系统上，这种链接方式可以绕过安全组拦截，一般用于安全组将远程端口拦截时选择此种方法。  </p></li><li><p>网络与安全组。将此实例加入到安全组里。  </p></li><li><p>设置安全组规则  <img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1A3K1g.png" alt="">  在安全组规则中，采用快速创建规则。规则方向：入方向/出方向，均可采用，用于控制服务器访入与访出。授权策略：允许/禁止（不解释）。常用端口（TCP）:控制端口的访入与访出（根据自己的习惯与用处）。授权对象:默认为0.0.0.0/0。至此服务器基本配置到此结束。<br>回到控制台实例中，点击远程连接。区域即为所选区域（一般默认不变）；端口默认为22；用户名默认为root；密码是之前设置的实例密码。</p></li></ul><h4 id="三、本机ssh连接服务器免密设置"><a href="#三、本机ssh连接服务器免密设置" class="headerlink" title="三、本机ssh连接服务器免密设置"></a>三、本机ssh连接服务器免密设置</h4><p>上一部分中，我们在阿里云的网页实例中，远程连接到我们的服务器。但是，每当我们需要用到服务器时，便要通过阿里云账号登录再来连接就显得比较麻烦。这里，通过ssh的命令在自己电脑终端来远程连接自己的服务器。<br>终端命令：<code>ssh root@ip</code>  </p><ul><li>root:远程连接的用户名；一般默认不变即为root。  </li><li>ip:自己服务器公网ip。<br>回车后，输入自己的root用户实例密码即可连接。<br><strong>注：Linux、Mac系统终端自带ssh命令；Windows系统不自带ssh命令，需要借助putty或Xshell客户端软件使用。</strong><br>但是，每次我们在自己的电脑连接到服务器都需要通过ip地址，再由密码登录也比较麻烦。所以这里再介绍本机免密码登录服务器的方式。<br>思路：将自己的公有密匙添加到服务器端。  </li></ul><h5 id="1-在本地生成一对公匙-密匙"><a href="#1-在本地生成一对公匙-密匙" class="headerlink" title="1.在本地生成一对公匙-密匙"></a>1.在本地生成一对公匙-密匙</h5><p><code>ssh-keygen -t rsa</code><br>采用默认目录，不设置密码，一路回车即可。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1AYUaR.png" alt="">  最终会在~/.ssh目录下生成id_rsa(密匙)；id_rsa.pub(公匙)。  </p><h5 id="2-将公匙部署至服务器上"><a href="#2-将公匙部署至服务器上" class="headerlink" title="2.将公匙部署至服务器上"></a>2.将公匙部署至服务器上</h5><p>在本地命令执行：<br>方式一:<code>scp ~/.ssh/id_rsa.pub root@公网IP地址:～/.ssh/authorized_keys</code><br>方式二：<code>ssh-copy-id ~/.ssh/id_rsa.pub root@公网IP地址</code><br>以上两种方式即将本地公匙内容复制到远程服务器<code>～/.ssh/authorized_keys</code>的文件中。</p><p>至此，再次登录服务器只需一句ssh终端命令即可，不需要再输入密码。<br>到这里还不是最简洁的一种登录方式，因为我们还需要输入root用户账号，ip地址。所以后续还有更简洁的方式：<br>本地需要保存ssh登录主机的相关信息，在本地主机用户根目录下的.ssh文件内创建config文件，用于保存ssh登陆主机的相关信息<br><code>vim config</code>（如果没有vim可以手动到此目下创建config文件）<br>编辑内容：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host name #AAAAA为服务器主机名</span><br><span class="line">HostName 39.97.170.231 #写服务器ip地址</span><br><span class="line">User root #root为登陆用户名</span><br><span class="line">Port 22 #主机端口，默认是22</span><br><span class="line">IdentityFile &#x2F;Users&#x2F;.ssh&#x2F;id_rsa #自己生成的私钥的文件路径</span><br></pre></td></tr></table></figure><p><strong>注意：Host name是之前服务器设置中设置的实例id/名称</strong><br>实例如下：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1AUC5R.png" alt="">  </p><h5 id="3-在服务器设置自动检验的信息"><a href="#3-在服务器设置自动检验的信息" class="headerlink" title="3.在服务器设置自动检验的信息"></a>3.在服务器设置自动检验的信息</h5><p>打开/etc/ssh/sshd_config文件<br><code>vim /etc/ssh/sshd_config</code>找到  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication yes </span><br><span class="line">AuthorizedKeysFile .ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>取消注释。<br>至此，以后在自己本机上只需要采用:<code>ssh liz_es</code>即可登录。</p><h4 id="四、-MySQL服务器的安装及相关配置"><a href="#四、-MySQL服务器的安装及相关配置" class="headerlink" title="四、 MySQL服务器的安装及相关配置"></a>四、 MySQL服务器的安装及相关配置</h4><h5 id="MySQ安装"><a href="#MySQ安装" class="headerlink" title="MySQ安装"></a>MySQ安装</h5><p>这一部分记录云服务器端安装MySQL及相关配置</p><ol><li>下载并安装MySQL官方的Yum Repository<br><code>[root@localhost ~]# wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</code><br>使用上面的命令直接安装Yum Repository<br><code>[root@localhost ~]# yum -y install mysql57-community-release-el7-10.noarch.rpm</code> </li><li>安装MySQL服务器<br><code>root@localhost ~]# yum -y install mysql-community-server</code><br><code>[root@localhost ~]# yum -y remove mysql57-community-release-el7-10.noarch</code>    </li><li>MySQL数据库设置<br>MySQL的启动<br><code>[root@localhost ~]# systemctl start mysqld.service</code><br>MySQL的关闭<br><code>systemctl stop mysqld.service</code><br>查看MySQL运行状态<br><code>[root@localhost ~]# systemctl status mysqld.service</code><br>查找root初始密码<br><code>[root@localhost ~]# grep &quot;password&quot; /var/log/mysqld.log</code><br>登录MySQL<br><code>mysql -uroot -p</code><br>此时需要修改初始密码才能对数据库进行后续操作。又由于数据库默认的密码强度所设置的密码较为复杂，所以需要事先修改密码强度规则。否则在修改密码的过程容易出现以下错误：<br><code>ERROR 1819 (HY000): Your password does not satisfy the current policy requiremen</code><br>下面列出常用的关于密码设置方面的MySQL操作命令。<br>查看MySQL密码相关的全局参数：<br><code>mysql&gt; select @@validate_password_policy;</code><br><code>mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;</code>  </li></ol><h5 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h5><p><code>validate_password_dictionary_file</code><br>插件用于验证密码强度的字典文件路径。<br><code>validate_password_length</code> </p><p>密码最小长度，参数默认为8，它有最小值的限制，最小值为：validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)<br><code>validate_password_mixed_case_count</code><br>密码至少要包含的小写字母个数和大写字母个数。</p><p><code>validate_password_number_count</code><br>密码至少要包含的数字个数。<br><code>validate_password_policy</code><br>密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。<br><code>validate_password_special_char_count</code> </p><p>密码至少要包含的特殊字符数。</p><h5 id="修改mysql参数配置"><a href="#修改mysql参数配置" class="headerlink" title="修改mysql参数配置"></a>修改mysql参数配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global validate_password_policy&#x3D;0;  </span><br><span class="line">Query OK, 0 rows affected (0.05 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; set global validate_password_mixed_case_count&#x3D;0;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; set global validate_password_number_count&#x3D;5;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; set global validate_password_special_char_count&#x3D;0;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; set global validate_password_length&#x3D;2;  </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)  </span><br><span class="line">  </span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;  </span><br><span class="line">mysql&gt; FLUSH PRIVILEGES</span><br></pre></td></tr></table></figure><p>可能最后两句在执行时，会报错。这是因为还没对初始密码进行修改。在修改完密码以后<code>FLUSH PRIVILEGES</code>，保证密码强度规则的更新。</p><h5 id="MySQL密码的修改"><a href="#MySQL密码的修改" class="headerlink" title="MySQL密码的修改"></a>MySQL密码的修改</h5><p><code>mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new password&#39;;</code>  </p><h5 id="MySQL用户的创建及权限设置"><a href="#MySQL用户的创建及权限设置" class="headerlink" title="MySQL用户的创建及权限设置"></a>MySQL用户的创建及权限设置</h5><p>在MySQL中其实有一个内置且名为mysql的数据库，这个数据库中存储的是MySQL的一些数据，比如用户、权限信息、存储过程等。通过以下命令可查看当前数据库存在哪些用户；<br><code>SELECT User, Host FROM mysql.user;</code><br>可看见如下类似信息：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+-----------+</span><br><span class="line">| User          | Host      |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| re_mysql      | %         |</span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys     | localhost |</span><br><span class="line">| root          | localhost |</span><br><span class="line">+---------------+-----------+</span><br></pre></td></tr></table></figure><blockquote><p>Host代表用户所能连接的数据库主机</p><p>% 代表任何主机<br>localhost 代表只能在本机上使用的用户</p></blockquote><ol><li><p>创建用户<br><code>mysql&gt;CREATE USER  &#39;user_name&#39;@&#39;host&#39;  IDENTIFIED BY  &#39;password&#39;;</code><br>user_name:需要创建的用户名称。<br>host:表示要这个新创建的用户允许从哪台机登陆，如果只允许从本机登陆，则填‘localhost’ ；如果指定某台主机登录，则填’ip’;如果允许从任意远程登陆，则填 ‘%’；<br>password:新创建用户的数据库登录密码，需符合密码强度规则。  </p></li><li><p>授权用户<br><code>GRANT ALL PRIVILEGES ON *.* TO &#39;user_name&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</code><br><code>PRIVILEGES:</code>表示要授予什么权限。例如可以有 select ,insert ,delete,update等,如果要授予全部权力,则填ALL。  </p><p><code>*.*:</code>表示用户的权限能用在哪个库的哪个表中，如果想要用户的权限很作用于所有的数据库所有的表，则填*.*，*是一个通配符，表示全部。<br><code>user_name:</code>所要授权的用户。<br><code>&#39;%&#39;:</code>表面所有远程都可在此用户登录MySQL服务器，具体使用同节。<br><code>WITH GRANT OPTION:</code>用以上命令授权的用户不能给其他用户授权，如果想这个用户能够给其他用户授权，就要在后面加上WITH GRANT OPTION。  </p></li><li><p>删除用户<br><code>DROP  USER ‘user_name’@‘localhost/ip/*’</code>  </p></li><li><p>立即生效<br><code>flush privileges</code>  </p></li><li><p>修改mysql库里边的user表，限制root用户只能从哪个ip登录<br><code>update mysql.user set host=&#39;localhost&#39; where user=&#39;root&#39;;</code></p></li></ol><h4 id="MySQL的远程连接"><a href="#MySQL的远程连接" class="headerlink" title="MySQL的远程连接"></a>MySQL的远程连接</h4><p>云服务器端部署好了MySQL。那么可以在本机中连接云服务器端的MySQL数据库。这里，我借助的是<code>Navicat for MySQL</code>。<br>创建连接：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1AYZrQ.png" alt="">  连接名：随便写。<br>主机：云服务器的公有IP。<br>端口：默认端口3306。<br>用户名:即在上一节中创建的新用户，并且是能够远程连接的用户。<br>编辑密码：MySQL这一用户的密码。<br>点击测试连接。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/22/1ATjbD.png" alt="">  成功！<br>以后便可以在本机连接到服务器端的MySQL进行使用。</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>当在虚拟机(Ubuntu16.04)中的MySQL采取同样的操作时，可能连接失败。在百度了一番博文以后，所采用的办法是在虚拟机的终端：  </p><ul><li>cd /etc/mysql 进入到my.cnf文件所在的目录下，sudo cp my.cnf my.cnf.bak，备份文件  </li><li>打开配置，找到bind-address= 127.0.0.1这一行，注释掉。  </li><li>重启数据库，使用Navicat进行连接。  </li></ul><h4 id="附"><a href="#附" class="headerlink" title="附"></a>附</h4><ul><li><p>Markdown常用命令：<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/markdown/md-tutorial.html</a>  </p></li><li><p>vim常用命令：<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-vim.html</a>  </p></li><li><p>菜鸟：<a href="https://www.runoob.com/" target="_blank" rel="noopener">https://www.runoob.com/</a>  </p></li><li><p>免费的图床-路过图床：<a href="https://imgchr.com/" target="_blank" rel="noopener">https://imgchr.com/</a>  </p></li><li><p><a href="https://blog.csdn.net/sunshine940326/article/details/70936988" target="_blank" rel="noopener">hexo高阶教程：想让你的博客被更多的人在搜索引擎中搜到吗?</a>  </p></li><li><p><a href="https://www.jianshu.com/p/271449df801f" target="_blank" rel="noopener">Hexo 教程：Hexo 博客部署到腾讯云教程</a>  </p></li><li><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a>   </p></li><li><p><strong>git 清除缓存</strong></p><blockquote><p>git rm -r –cached .<br>git add .<br>git commit -m ‘update .gitignore’</p></blockquote></li></ul><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><blockquote><p>[1] centos7下安装mysql（完整配置）:<a href="https://blog.csdn.net/baidu_32872293/article/details/80557668" target="_blank" rel="noopener">https://blog.csdn.net/baidu_32872293/article/details/80557668</a><br>[2] mysql 密码强度规则设置:<a href="https://blog.csdn.net/u014236541/article/details/78244601" target="_blank" rel="noopener">https://blog.csdn.net/u014236541/article/details/78244601</a><br>[3] MYSQL的创建用户，授权用户，删除用户，查看用户:<a href="https://blog.csdn.net/u014453898/article/details/55064312" target="_blank" rel="noopener">https://blog.csdn.net/u014453898/article/details/55064312</a><br>[4] mysql查看所有用户:<a href="https://blog.csdn.net/qq_37996815/article/details/78934536" target="_blank" rel="noopener">https://blog.csdn.net/qq_37996815/article/details/78934536</a><br>[5] Ubuntu 16.04 安装使用MySQL:<a href="https://blog.csdn.net/vXueYing/article/details/52330180" target="_blank" rel="noopener">https://blog.csdn.net/vXueYing/article/details/52330180</a><br>[6] 使用navicat 连接虚拟机上的MySQL数据库:<a href="https://www.jianshu.com/p/8fa82acb16e9" target="_blank" rel="noopener">https://www.jianshu.com/p/8fa82acb16e9</a><br>[7] SSH连接服务器 本地记住用户名及密码:<a href="https://blog.csdn.net/persist_xyz/article/details/90231433" target="_blank" rel="noopener">https://blog.csdn.net/persist_xyz/article/details/90231433</a></font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Ubuntu的安装与相关设置</title>
      <link href="/2020/01/17/Linux-Ubuntu%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/01/17/Linux-Ubuntu%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>近日换了电脑，想装一个Linux系统，但也不想在本机上装双系统，就选择了装起虚拟机。此次选择了安装Ubuntu 16.04.6版本，文章最后会附上常用16.04和18.04ubuntu镜像源下载的网址。本文，用来记录此次虚拟机的装载过程、后续配置。</p><h4 id="一、VMWare-Fusion的下载"><a href="#一、VMWare-Fusion的下载" class="headerlink" title="一、VMWare Fusion的下载"></a>一、VMWare Fusion的下载</h4><p>VMware Fusion是VMware为Macintosh计算机开发的虚拟机管理程序。用来管理虚拟机环境。此次选择了11.5.1的版本-<a href="https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_fusion/11_0" target="_blank" rel="noopener">下载地址</a>。序列号查询百度即可。</p><h4 id="二、Ubuntu的安装"><a href="#二、Ubuntu的安装" class="headerlink" title="二、Ubuntu的安装"></a>二、Ubuntu的安装</h4><p>打开VMWare Fusion，点击创建新环境。选择创建自定义虚拟机安装。这里没有选择上方的镜像安装，是因为我在第一次用这种方法安装完以后，尝试了各种方法却不能安装VMware tools。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lz0DgJ.png" alt="后续步骤1"></p><a id="more"></a> <p>继续下一步<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lz00CF.md.png" alt="后续步骤"><br>选择所要安装的操作系系统，这里为Ubuntu 64位。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lz0d4U.png" alt="后续步骤3"><br>选择UEFI安装模式。后续的步骤中就一路下一步。安装过程中，如果VMware没有检测到我们所需要安装的镜像源，那么需要我们将镜像源手动添加到配置中。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzsri6.png" alt="步骤一"><br>若卡在这里不动，便需要我们手动添加镜像源。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzs2sH.png" alt="步骤二">)<img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzsgQe.png" alt="步骤三"></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzsyRO.png" alt="步骤四"><br>后续就是VMware的全自动配置安装了。<br><font color=red><strong>注意：后续语言环境的安装，请选择默认的English,不要改成简体中文模式。</strong></font>因为，当我们熟练了Linux的终端命令以后，我们就不再进行图形化界面的操作，而是转变为字符界面的操作。如果，开始默认的是中文简体，那么在字符界面中，中文会出现菱形乱码，无法识别。从这里的后续安装可以参考<a href="https://jingyan.baidu.com/article/574c52195de75a6c8d9dc1b8.html" target="_blank" rel="noopener">百度百科</a>。<br>在VMware的一系列自动安装配置以后。若出现了:<img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzc2yF.png" alt="问题1"><br>将上述添加的磁盘勾选取消<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzsgQe.png" alt=""><br>点击虚拟机重启即可！登录，进入图形化界面！<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lz2vGt.png" alt="界面"></p><h4 id="三、Ubuntu的镜像源设置"><a href="#三、Ubuntu的镜像源设置" class="headerlink" title="三、Ubuntu的镜像源设置"></a>三、Ubuntu的镜像源设置</h4><p>这里介绍两种方式。<br>第一种方式：点击右上方的设置按钮，进入System settings…在系统栏中选择Software&amp;Updates,将Downloads中的镜像源Others选成Chinese，然后点击右方的选取Select Best Server，等待系统测试选取最佳的节点，再依据后续步骤更新即可。<br>第二种方式：参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">清华大学开源软件镜像源</a>。按要求和版本号将配置文件改成清华大学的镜像源即可。</p><h4 id="四、VMWare-Tools的安装"><a href="#四、VMWare-Tools的安装" class="headerlink" title="四、VMWare Tools的安装"></a>四、VMWare Tools的安装</h4><p>此时，Ubuntu已经安装好了。但是，如果要想做到本机和虚拟机能够文件共享，那么还需要下载VMWare Tools。点击：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzWjjf.md.png" alt=""><br>由于我的已经安装过了，所以这里显示为重新安装，后续按照下载。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lz5rx1.png" alt=""><br>点击安装。</p><ol><li>将安装好的压缩包，VMWaretools-XXX(版本号).tar.gz。移动到桌面。</li><li>打开Ubuntu下的终端命令窗口。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd Desktop # 进入桌面</span><br><span class="line">ls  # 查看此压缩包是否在桌面下</span><br><span class="line">tar -xzvf VMWaretools-XXX(版本号).tar.gz # 解压文件</span><br><span class="line">cd VMware-tools-distrib</span><br><span class="line">.&#x2F;vmware-install.pl # 执行vmware-install.pl 进行安装</span><br></pre></td></tr></table></figure><p>依次执行以上命令后，按照提示在终端中输入yes和回车即可。</p><h4 id="五、共享文件夹的设置"><a href="#五、共享文件夹的设置" class="headerlink" title="五、共享文件夹的设置"></a>五、共享文件夹的设置</h4><p>上述步骤中中，安装了VMWare tools，后续就需要设置我们可以共享的文件夹。进入Ubuntu的硬件设置中：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzHHUK.png" alt=""><br>进入共享文件夹。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzH7E6.png" alt=""><br>添加系统文件夹，重启虚拟机。VMWare tools可以使本机和虚拟机之间共享文件；同时可以自动调节虚拟机的分辨率，使得全屏放映使用。</p><h4 id="六、图形界面和字符界面的转换"><a href="#六、图形界面和字符界面的转换" class="headerlink" title="六、图形界面和字符界面的转换"></a>六、图形界面和字符界面的转换</h4><p>首先打开虚拟机中的终端，<code>sudo su</code>进入root模式。</p><ol><li><p>修改grub文件</p><ul><li><p><code>sudo vi /etc/default/grub</code>  </p><ul><li>修改grub文件的三处：  </li></ul><ol><li>将GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash”进行注释，即最前方加#。  </li><li>GRUB_CMDLINE_LINUX=”text”,添加为text，文本。  </li><li>GRUB_TERMINAL=console，取消注释。  </li></ol></li></ul></li></ol><p>最终的修改结果如下图：<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2020/01/17/lzj7VA.png" alt=""><br>保存退出。  </p><ol start="2"><li><code>sudo update-grub</code>更新grub文件。  </li><li>执行<code>sudo systemctl set-default multi-user.target</code> 即将开机默认方式改为字符形界面。  </li><li>重新启动虚拟机。<strong>注意:不要使用reboot</strong><br><strong>总结</strong>:以后两种模式的转化只需要两句终端命令即可。</li></ol><ul><li>图形转字符界面：<code>sudo systemctl set-default multi-user.target</code></li><li>字符转图形界面：<code>sudo systemctl set-default graphical.target</code></li><li>最后重启虚拟机，即可！  </li></ul><h4 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h4><ul><li>Ubuntu安装的镜像网站：  <ul><li>14.04版本：<a href="http://mirrors.aliyun.com/ubuntu-releases/14.04/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu-releases/14.04/</a></li><li>16.04版本：<a href="http://mirrors.aliyun.com/ubuntu-releases/16.04/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu-releases/16.04/</a></li><li>18.04版本：<a href="http://mirrors.aliyun.com/ubuntu-releases/18.04/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu-releases/18.04/</a>  </li></ul></li><li>清华大学镜像源：<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a></li><li>VMWare FUsion安装地址：<a href="https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_fusion/11_0" target="_blank" rel="noopener">https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_fusion/11_0</a></li></ul><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><blockquote><p>[1] <a href="https://blog.csdn.net/u010830004/article/details/79869457" target="_blank" rel="noopener">mac上用VMWare虚拟机装Ubuntu–及Ubuntu安装Vmware Tools</a><br>[2] <a href="https://jingyan.baidu.com/article/574c52195de75a6c8d9dc1b8.html" target="_blank" rel="noopener">如何安装ubuntu系统</a><br>[3] <a href="https://blog.csdn.net/love20165104027/article/details/83377758" target="_blank" rel="noopener">VMware Tools安装</a><br>[4] <a href="https://blog.csdn.net/ibless/article/details/91979711" target="_blank" rel="noopener">Ubuntu16.04 图形界面与字符界面切换</a></font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽取JDBCU工具类——JDBCUtils的使用</title>
      <link href="/2019/12/21/%E6%8A%BD%E5%8F%96JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB%E2%80%94%E2%80%94JDBCUtils%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/21/%E6%8A%BD%E5%8F%96JDBC%E5%B7%A5%E5%85%B7%E7%B1%BB%E2%80%94%E2%80%94JDBCUtils%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在上一篇介绍<btn><a href="https://www.chemlez.cn/2019/11/18/JDBC%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">JDBC基础使用</a></btn>的博文中，简单了解到JDBC的使用。但是，也看出了一定的弊端：<strong>重复代码量</strong>较大。在我们每次新建一个JDBC的类操作数据库时，都要不停的进行驱动的注册，数据库的连接，参数的输入等大量重复性的操作。所以，有没有什么方法简化这一类的操作呢？<br>其实，将这些重复的代码进行抽取，作为一个工具类，每次使用的时候进行调用即可，这样便能够达到代码的可复用性。<br>抽取JDBC工具类的思路：</p><ol><li>将注册驱动进行抽取</li><li>抽取一个方法获取连接对象<ul><li>需求：不必传递参数，并且保证工具类的通用性。</li><li>解决：配置文件。</li></ul></li></ol><a id="more"></a><h4 id="一、获取连接"><a href="#一、获取连接" class="headerlink" title="一、获取连接"></a>一、获取连接</h4><p>因为我们需要将JDBC抽取为工具类，便于使用。故采取静态方法。</p><h5 id="1-注册驱动"><a href="#1-注册驱动" class="headerlink" title="1.注册驱动"></a>1.注册驱动</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于注册驱动，加载</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="2-关闭资源"><a href="#2-关闭资源" class="headerlink" title="2.关闭资源"></a>2.关闭资源</h5><details><summary>关闭资源</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于关闭资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 方法的重载。当需要对数据库进行查询的操作时，便需要这里的第三个参数，读取完数据后，需要关闭ResultSet占用的资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn, ResultSet rs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h5 id="3-配置文件的读取"><a href="#3-配置文件的读取" class="headerlink" title="3.配置文件的读取"></a>3.配置文件的读取</h5><details><summary>配置文件的读取</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为对配置文件的读取，只需要读取一次即可拿到这些值。故采用静态代码块。</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.创建Properties集合类</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 获取src路径下的文件的方法--&gt;ClassLoader(类加载器，可以将字节码文件，加载进内存，且内获取src下的资源路径）</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">            <span class="comment">// 以当前src为文件绝对路径，获取文件资源的src</span></span><br><span class="line">            <span class="comment">//URL统一资源标识符</span></span><br><span class="line">            URL resource = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            <span class="comment">//通过getPath获取它的字符串路径</span></span><br><span class="line">            String path = resource.getPath();</span><br><span class="line"><span class="comment">//            System.out.println(path);</span></span><br><span class="line">            <span class="comment">// 2.加载文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">            <span class="comment">// 3.获取数据、复制</span></span><br><span class="line">            url = pro.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">"driver"</span>);</span><br><span class="line"></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></details><h5 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h5><p>配置文件放在当前模块<code>src</code>目录下。文件名后缀为<code>.properties</code>。以下为配置文件可写的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//ip:port/database             //填写数据库的url，例如本地url=jdbc:mysql://localhost:3306/db3</span></span><br><span class="line">user=root  <span class="comment">//数据库用户</span></span><br><span class="line">password=<span class="number">123456</span> <span class="comment">// 用户密码</span></span><br><span class="line">driver=com.mysql.jdbc.Driver    <span class="comment">//注册驱动路径</span></span><br></pre></td></tr></table></figure><h5 id="5-代码总结"><a href="#5-代码总结" class="headerlink" title="5.代码总结"></a>5.代码总结</h5><details><summary>代码总结</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 为了使Connection方法可以接受到值，故将参数提升到成员变量的位置上</span></span><br><span class="line">    <span class="comment">// 只有静态修饰的变量，才能被静态方法所访问，才能被静态代码块所访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件的读取，只需要读取一次，即可拿到这些值。使用静态代码块完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">//读取资源文件，获取值</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.创建Properties集合类</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 获取src路径下的文件的方法--&gt;ClassLoader(类加载器，可以将字节码文件，加载进内存，且内获取src下的资源路径）</span></span><br><span class="line">        ClassLoader classLoader = JDBCUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        <span class="comment">// 以当前src为文件绝对路径，获取文件资源的src</span></span><br><span class="line">        <span class="comment">//URL统一资源标识符</span></span><br><span class="line">        URL resource = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">        <span class="comment">//通过getPath获取它的字符串路径</span></span><br><span class="line">        String path = resource.getPath();</span><br><span class="line"><span class="comment">//            System.out.println(path);</span></span><br><span class="line">            <span class="comment">// 2.加载文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">            <span class="comment">// 3.获取数据、复制</span></span><br><span class="line">            url = pro.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取连接</span></span><br><span class="line"><span class="comment"> * 工具类，方便使用，故采用静态方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 用于注册驱动，加载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于关闭资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn, ResultSet rs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h4 id="二、-JDBCUtils工具类实例使用"><a href="#二、-JDBCUtils工具类实例使用" class="headerlink" title="二、 JDBCUtils工具类实例使用"></a>二、 JDBCUtils工具类实例使用</h4><details><summary>JDBCUtils工具类实例使用</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.li.util.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection(); <span class="comment">// 获取数据库连接对象</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ? and password = ?"</span>; <span class="comment">// 采用预编译的方式，提高效率，预防SQL注入</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql); <span class="comment">// 获取sql执行对象</span></span><br><span class="line">            pstmt.setString(<span class="number">1</span>, <span class="string">"Tom"</span>);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>, <span class="string">"1234"</span>);</span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="keyword">boolean</span> next = rs.next();</span><br><span class="line">            System.out.println(next); <span class="comment">// 判断此用户是否存在</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(pstmt, conn, rs); <span class="comment">//资源的释放</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>从以上代码实例中，可以看出我们抽取出的JDBCUtils工具类，大大简化了代码，并且增加了代码的可复用性。当我们需要更改数据库的相关配置时，只需要更改配置文件即可，而我们的JDBCUtils工具类却不用更改。<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><blockquote><p>[1] <a href="">Itcast视频讲义</a></p><p>[2] <a href="https://www.cnblogs.com/blogtech/p/11151780.html" target="_blank" rel="noopener">Java项目读取resources资源文件路径那点事</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC基础使用</title>
      <link href="/2019/11/18/JDBC%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/18/JDBC%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><code>JDBC:Java DataBase Connectivity</code>,即为Java数据库连接。</p><p><code>JDBC</code>是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。即：定义的一套操作所有关系型数据库的规则，是为接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</p><fancybox><img src='https://s1.ax1x.com/2020/03/18/8da5k9.png'></fancybox><a id="more"></a><h2 id="JDBC简单使用"><a href="#JDBC简单使用" class="headerlink" title="JDBC简单使用"></a>JDBC简单使用</h2><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ul><li>步骤：<ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar<br> 1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下<br> 2.右键–&gt;Add As Library</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo01</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新一条数据库数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.导入驱动jar包（类似于Python中的第三方库</span></span><br><span class="line">        <span class="comment">//2.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//3.获取数据库连接对象 jdbc:mysql://localhost:3306/databases 本机</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://url:port/Database"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//4.定义sql语句</span></span><br><span class="line">        String sql = <span class="string">"update account set balance = 500 where id = 1"</span>;</span><br><span class="line">        <span class="comment">//5.获取执行sql的对象Statement</span></span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        <span class="comment">//6.执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//7.处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为，在数据库连接、SQL语句的执行等等过程中，可能会发生异常，报错等。但是，数据库的资源要释放，故采用异常处理的方式，关闭数据库连接。</p><p><strong>处理异常的方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.采用异常的方式通过JDBC连接数据库</span></span><br><span class="line"><span class="comment"> * 2.插入一条语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 为了使Connection方法可以接受到值，故将参数提升到成员变量的位置上</span></span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 异常捕获的方式处理异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//2.定义SQL语句</span></span><br><span class="line">            String sql = <span class="string">"insert into account values(null,'Lisa',2000)"</span>;</span><br><span class="line">            <span class="comment">//3.获取连接对象 </span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://url:port/db3"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>);</span><br><span class="line">            <span class="comment">//4.获取执行sql对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            <span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"修改成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"修改失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h4><ol><li><p><code>DriverManager：驱动管理对象</code></p><p>用于注册驱动，jar包导入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原因：</strong>文件的读取，只需要读取一次，即可拿到这些值。故使用静态代码块完成。</p></li><li><p><code>static Connection getConnection(String url, String user, String password)</code></p><p><code>Connection</code>：数据库连接对象</p><p>功能：</p><pre><code>1. 获取执行sql的对象    * `Statement createStatement()`    * `PreparedStatement prepareStatement(String sql)`  2. 事务管理：* 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务* 提交事务：commit() * 回滚事务：rollback() 3. `Statement`：执行sql的对象**注意**：`createStatement`方法会造成SQL注入的问题，后期采用`PreparedStatement`来执行SQL对象，并采用预编译的方式，采用参数`?`作为占位符,且效率更高。4. `ResultSet`：结果集对象,封装查询结果(next,类似指针移动取值方法)* boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true.* getXxx(参数):获取数据.    - 其中Int代表列的编号，参数**从1开始**。    - String代表列的名称（参数）。</code></pre></li></ol><h4 id="JDBC操作数据库的一般SQL语法"><a href="#JDBC操作数据库的一般SQL语法" class="headerlink" title="JDBC操作数据库的一般SQL语法"></a>JDBC操作数据库的一般SQL语法</h4><ol><li>更新操作</li></ol><p><code>String sql = &quot;update account set balance = 500 where id = 1&quot;;</code></p><ol start="2"><li>插入操作</li></ol><p><code>String sql = &quot;insert into account values(null,&#39;Lisa&#39;,2000)&quot;;</code></p><ol start="3"><li>删除操作</li></ol><p><code>String sql = &quot;delete from account where id = 3&quot;;</code></p><ol start="4"><li>创建操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"create table student (id int primary key not null,name varchar(20))"</span>;</span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line"><span class="keyword">int</span> count = stmt.executeUpdate(sql);<span class="comment">//处理结果，创建表返回的为0</span></span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><ol start="5"><li>查询操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line">resultSet = stmt.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123; <span class="comment">//resultSet指针下移一行，并判断当前行内容是否为空，内容不为空，进入循环体</span></span><br><span class="line">    <span class="keyword">int</span> id = resultSet.getInt(<span class="number">1</span>);<span class="comment">// 取第一列的元素</span></span><br><span class="line">    String name = resultSet.getString(<span class="string">"NAME"</span>);</span><br><span class="line">    <span class="keyword">int</span> balance = resultSet.getInt(<span class="number">3</span>);</span><br><span class="line">    System.out.println(id + <span class="string">"---"</span> + name + <span class="string">"---"</span> + balance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p>[1] <a href="[https://baike.baidu.com/item/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/1173389?fromtitle=JDBC&fromid=485214&fr=aladdin](https://baike.baidu.com/item/Java数据库连接/1173389?fromtitle=JDBC&fromid=485214&fr=aladdin)">Java数据库连接</a></p><p>[2] <a href="http://www.itheima.com/" target="_blank" rel="noopener">Itcast视频资料</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列之深拷贝/浅拷贝</title>
      <link href="/2019/10/22/%E5%BA%8F%E5%88%97%E4%B9%8B%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/10/22/%E5%BA%8F%E5%88%97%E4%B9%8B%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>在上周的Python科学计算课上，老师讲到了Python序列的浅拷贝以及深拷贝方面的知识，个人觉得说得比较言简意赅了，对于我这个刚入Python的新手来说，也基本可以避免今后变量的赋值使用错乱的问题。</p><p>这里我们简单的将Python中的标准数据类型分为两类：</p><ul><li>不可变数据类型：int、float、string、boolean</li><li>可变（组合）数据类型：列表（list）、字典（dict）、集合(set)</li></ul><p>先举几个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span> <span class="comment"># a为上述定义的不可变数据类型</span></span><br><span class="line">b = a</span><br><span class="line">print(<span class="string">'b=&#123;&#125;'</span>.format(b)) <span class="comment"># b = 1</span></span><br><span class="line">--------</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">print(<span class="string">'a = &#123;&#125;,b = &#123;&#125;'</span>.format(a,b)) <span class="comment"># a = 1,b = 2</span></span><br><span class="line"></span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment"># b为上述定义的组合数据类型 </span></span><br><span class="line">d = c</span><br><span class="line">print(<span class="string">'c = &#123;&#125;,d = &#123;&#125;'</span>.format(c,d)) <span class="comment"># c = [1, 2, 3],d = [1, 2, 3]</span></span><br><span class="line">d.append(<span class="number">4</span>) </span><br><span class="line">print(<span class="string">'c = &#123;&#125;,d = &#123;&#125;'</span>.format(c,d)) <span class="comment"># c = [1, 2, 3, 4],d = [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>从上述的例子当中看出，在不可变数据类型中，所定义的变量的值在后来改变（这里是b），并不会引起原来赋给它值的那个量的改变（这里是a）；而在组合数据类型中就发生了改变，我们只是将d的值进行了改变，并没有直接改变c的值，最后c的值却也发生了变化。</p><a id="more"></a><p>这里，基本数据变量的赋值其实就是深拷贝；组合数据类型的赋值就是起了一个别名。</p><p>这里先做出<strong>组合数据类型</strong>中赋值、浅拷贝、深拷贝三种的区别：</p><ul><li><p>直接赋值：其实就是对象的引用（即给对象起一个别名）。</p></li><li><p>浅拷贝（copy)：拷贝父对象，不会拷贝对象的内部的子对象。</p></li><li><p>深拷贝（deepcopy):copy模块的deepcopy方法，完全拷贝了父对象及其子对象。</p><p>关于内部子对象的概念，下方会再解释。</p></li></ul><p>接下来我们再看一组图（上课ppt图片）：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/10/22/KGgqHg.png" alt="赋值引用"></p><p>这里的a = {1:[1,2,3]}字典类型。b = a : 赋值引用，a 和 b 都指向同一个对象。可以看出，a,b此刻都指向同一个对象，所以改变b的内容，就是在改变a,b同时所指向的对象的内容，可以理解成b就是a的一个别名。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/10/22/KG2kE4.png" alt="浅拷贝"></p><p>这里 a = {1:[1,2,3]} , b = a.copy()，这里就是一种浅拷贝的方式。可以看出a 和 b 是一个独立的对象，但他们的子对象还是指向统一对象（是引用）。所以在这里L,M就是对象当中的一个子对象（[1,2,3]）便是这里的子对象。</p><p>举个上述的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = &#123;<span class="number">1</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="string">'北京'</span>:<span class="string">'天安门'</span>&#125;</span><br><span class="line">b = copy.copy(a) <span class="comment"># b = &#123;1：[1,2,3],'北京':'天安门'&#125;</span></span><br><span class="line">b[<span class="number">1</span>].append(<span class="number">4</span>) </span><br><span class="line">b[<span class="string">'上海'</span>] = <span class="string">'东方明珠'</span></span><br><span class="line">b[<span class="string">'北京'</span>] = <span class="string">'鸟巢'</span></span><br><span class="line">print(<span class="string">'输出：a = &#123;&#125;,b = &#123;&#125;'</span>.format(a,b))</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line">输出：a = &#123;<span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="string">'北京'</span>: <span class="string">'天安门'</span>&#125;,b = &#123;<span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="string">'北京'</span>: <span class="string">'鸟巢'</span>, <span class="string">'上海'</span>: <span class="string">'东方明珠'</span>&#125;</span><br></pre></td></tr></table></figure><p><code>b = copy.copy(a)</code> 使得b为单独一个对象，但是它和a的子对象指向统一对象。这里的子对象就是[1,2,3]（列表子对象）。故当改变b中1键对中的值[1,2,3]时，a也会改变（统一子对象)。但向b中添加值时，便不会对a造成影响，因为这是b自身的对象所拥有的值（和a没有关系)。</p><p>那么如何拷贝一个a，但对这个拷贝的对象任意操作时，不会对a产生任何的影响呢？答：采用深拷贝。</p><p>如图:</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/10/23/KY6iE4.png" alt="深拷贝"></p><p>从图中可以清楚的看出：深度拷贝, a 和 b 完全拷贝了父对象及其子对象，两者是完全独立的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]    <span class="comment">#原始对象  </span></span><br><span class="line">b = a                           <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)                <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)            <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line">a.append(<span class="number">5</span>)                     <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">'c'</span>)                <span class="comment">#修改对象a中的['a', 'b']数组对象</span></span><br><span class="line"></span><br><span class="line">print( <span class="string">'a = '</span>, a )</span><br><span class="line">print( <span class="string">'b = '</span>, b )</span><br><span class="line">print( <span class="string">'c = '</span>, c )</span><br><span class="line">print( <span class="string">'d = '</span>, d )</span><br><span class="line"></span><br><span class="line">--------</span><br><span class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>] <span class="comment"># 给a起了一个别名b，本质相同，故b和a的变化相同</span></span><br><span class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]    <span class="comment"># c中子对象发生了变化 --&gt;浅拷贝</span></span><br><span class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]         <span class="comment"># a的改变和d无关 --&gt;深拷贝</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于组合数据类型：</p><ul><li><p>直接赋值：其实就是对象的引用（别名）</p></li><li><p>浅拷贝（copy)：拷贝父对象，不会拷贝对象的内部的子对象</p></li><li><p>深拷贝（deepcopy):copy模块的deepcopy方法，完全拷贝了父对象及其子对象。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo yilia 主题添加相册功能</title>
      <link href="/2019/08/28/hexo-yilia-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/08/28/hexo-yilia-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>当我们使用hexo博客框架中的yilia主题时，在我们这一博客页面中，原作者Litten并未帮我们添加相册这一功能。这时，如果想让我们的博客拥有相册的功能，就需要我们自行添加改变、添加主题中的相关参数。从网上百度了很多，看了许多的博客，还是遇到了一些坑爬不过去。最终，还是请教了一个小伙伴才得以解决。</p><h2 id="一、博客页面添加相册"><a href="#一、博客页面添加相册" class="headerlink" title="一、博客页面添加相册"></a>一、博客页面添加相册</h2><p>首先，打开cmd进入blog的source目录下，创建photos文件夹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;cd blog</span><br><span class="line">E:\blog&gt;cd source</span><br><span class="line">E:\blog\source&gt;hexo new page &quot;photos&quot;</span><br><span class="line">INFO  Created: E:\blog\source\photos\index.md</span><br></pre></td></tr></table></figure><p>删除文件夹中的index.md文件，否则最终生成的是一个单纯的页面。也可以直接进入source文件下创建photos文件夹。</p><a id="more"></a><h2 id="二、创建图片存储仓库"><a href="#二、创建图片存储仓库" class="headerlink" title="二、创建图片存储仓库"></a>二、创建图片存储仓库</h2><p>因为，我们的博客是部署到远端，使得每一个人都能够看到，而图片在远端的展示，可借助于图床。所以，我们可以专门在github上创建一个仓库用于存储图片。仓库的创建就不再一一赘述，只需登录自己的github，new repository即可。这里，我的仓库名为blog-Picture.<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/08/28/mHQKyV.png" alt="个人仓库"><br>在创建完远端仓库后，将本地与github上远端仓库关联，这样我们以后才能够将图片推送到远端。<br>远端仓库与本地仓库关联的方法:<br>打开博客文件夹，在此根目录下，使用git ,即 git Bush Here,然后输入</p><blockquote><p>$ git clone <a href="mailto:git@github.com">git@github.com</a>:chemlez/picture-blog.git</p></blockquote><p>其中clone的仓库换成自己的仓库地址。这样便能使本地与远端关联起立。此刻，会产生一个blog-Picture的文件夹，在此文件夹下分别创建min_photos、photos文件夹。其中，在此photos文件夹下存入一张图片，再将整个内容推送至远端。</p><blockquote><p>$ git add .<br>$ git commit -m “照片存放”<br>$ git push -u origin master </p></blockquote><p>这个时候本地的内容就被推送到了远端。关于git推送远端的用法，可参照<a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440" target="_blank" rel="noopener">廖雪峰的教程</a>。这样后面我们可以用来查看图片的存入地址，来修改我们的ins.js参数。</p><h2 id="三、创建相册布局样式"><a href="#三、创建相册布局样式" class="headerlink" title="三、创建相册布局样式"></a>三、创建相册布局样式</h2><p>在一开始的博客主题clone中，主题yilia并没有相册的版块。但作者<a href="http://litten.me/" target="_blank" rel="noopener">Litten</a>的博客样式中添加了这一版块。所以，我们可以参照原作者的格式进行相关的修改即可。其中的样式参照这里–<a href="https://github.com/ChemLez/ChemLez.github.io/tree/master/photos" target="_blank" rel="noopener">样式参考</a>。下载完之后：<br>1.删除其中所有的.json文件。因为，后面的.json文件是我们自己博客在上传图片时生成的.<br>2.修改index.ejs。这一步很重要，我自己查百度和相关博文时，都没有提到这一步。将其中的href修改成自己的博客地址。当初我就没有修改，最终，显示出来的永远都是原作者Litten的相册.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div class&#x3D;&quot;instagram itemscope&quot;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;chemlez.github.io&#x2F;&quot; target&#x3D;&quot;_blank&quot; class&#x3D;&quot;open-ins&quot;&gt;图片正在加载中…&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>3.修改ins.js文件里的render()函数，按照上面的注释提醒，进行修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 修改这里render()函数：修改图片的路径地址.minSrc 小图的路径. src 大图的路径.修改为自己的图片路径(github的路径)</span><br><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ChemLez&#x2F;blog-Picture&#x2F;master&#x2F;photos&#x2F;</span><br><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ChemLez&#x2F;blog-Picture&#x2F;master&#x2F;min_photos&#x2F;</span><br><span class="line">    var render &#x3D; function render(res) &#123;</span><br><span class="line">      var ulTmpl &#x3D; &quot;&quot;;</span><br><span class="line">      for (var j &#x3D; 0, len2 &#x3D; res.list.length; j &lt; len2; j++) &#123;</span><br><span class="line">        var data &#x3D; res.list[j].arr;</span><br><span class="line">        var liTmpl &#x3D; &quot;&quot;;</span><br><span class="line">        for (var i &#x3D; 0, len &#x3D; data.link.length; i &lt; len; i++) &#123;</span><br><span class="line">          var minSrc &#x3D; &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ChemLez&#x2F;blog-Picture&#x2F;master&#x2F;min_photos&#x2F;&#39; + data.link[i];</span><br><span class="line">          var src &#x3D; &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ChemLez&#x2F;blog-Picture&#x2F;master&#x2F;photos&#x2F;&#39; + data.link[i];</span><br><span class="line">          var type &#x3D; data.type[i];</span><br><span class="line">          var target &#x3D; src + (type &#x3D;&#x3D;&#x3D; &#39;video&#39; ? &#39;.mp4&#39; : &#39;.jpg&#39;);</span><br><span class="line">          src +&#x3D; &#39;&#39;;</span><br></pre></td></tr></table></figure><p>这里的地址，就可以查看我们第二步所做的工作。打开github，进入blog-Picture仓库后。点击在第二步中上传的照片。<img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/08/29/mqaudA.png" alt="图片">然后点击Download，此时的浏览框中的地址就是我们所需要的地址。</p><h2 id="四、添加脚本"><a href="#四、添加脚本" class="headerlink" title="四、添加脚本"></a>四、添加脚本</h2><p>这里添加的python脚本主要是用于处理图片。脚本下载-<a href="https://github.com/ChemLez/blog-Picture" target="_blank" rel="noopener">下载地址</a>.<br>因为，当我们点击相册这一页面时，展示在眼前的是一张张缩略图。而当你需要预览具体的某一张图时，其显示的是一张大图。所以，我们的预览图照片大小是经过压缩处理的（使得页面加载快）。当我们具体看某张图片时，再使用原画质的图片。所以，min_photos和photos两个文件夹分别对应着这两种图片。其中，min_photos就是处理过后的压缩图片，而photos就是我们存放的图片。所以，这里的python脚本主要就做着这样的工作。</p><ol><li>将其中的.py文件拷贝至本地仓库blog-Picture文件夹中.</li><li>根据脚本文件，图片的命名规则为：2019-10-21_xxx.jpg/png.</li><li>将图片<a href="https://github.com/ChemLez/ChemLez.github.io/blob/master/assets/img/empty.png" target="_blank" rel="noopener">empty.png</a>下载放入博客目录下的assets/img文件夹中.</li><li>打开tool.py文件,修改def handle_photo():<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;E:&#x2F;blog&#x2F;source&#x2F;photos&#x2F;data.json&quot;, &quot;w&quot;) as fp:</span><br></pre></td></tr></table></figure>将其中的的地址，换成你将要生成data.json的位置，就是在第一步中，我们删除的.json文件夹的目录地址。每次，进行tool.py脚本时，都会产生data.json文件，用于存储我们图片的信息。</li></ol><h2 id="五、运行"><a href="#五、运行" class="headerlink" title="五、运行"></a>五、运行</h2><p>1.首先将用于测试的图片名改成上述的命名规则的名字,推送至github远端，进行修改.<br>2.打开终端命令窗口cmd.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">cd blog-Picture &#x2F;&#x2F;用于进入blog-Picture文件夹</span><br><span class="line">python tool.py &#x2F;&#x2F;python脚本文件的运行</span><br><span class="line">第二句的运行这里可能会报错 &#96;no module named PIL&#96;</span><br><span class="line">然后输入：</span><br><span class="line">pip install pillow</span><br><span class="line">可能出现权限不足的情况，按照下方出现的英文，加上权限进行下载。即：一路按照下方的英文,加权限进行下载.</span><br></pre></td></tr></table></figure><p>3.hexo s.预览查看。这里我将video功能隐去了，最初的photos旁边还有一个video功能。<br><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/placeholder/d570170f4f12e1ee829ca0e85a7dffeb77343a.svg" data-original="https://s2.ax1x.com/2019/08/29/mq6fkF.png" alt=""><br>4.在最初的photos下载中，有个videos.ejs文件，如果想引入一些视频，可将其中的链接即src，视频名进行修改.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;h1&gt;指弹_女儿情&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;video-container&quot;&gt;</span><br><span class="line">        &lt;iframe height&#x3D;&quot;80%&quot; width&#x3D;&quot;80%&quot; src&#x3D;&quot;https:&#x2F;&#x2F;player.youku.com&#x2F;embed&#x2F;XMjUzMzY4OTM3Ng&#x3D;&#x3D;&quot; frameborder&#x3D;0 allowfullscreen&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line">&lt;hr&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>如果不想用这一功能，将以下标签注释.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;photos-btn&quot; href&#x3D;&quot;&#x2F;photos&#x2F;videos.html&quot;&gt;Video&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><ol><li>每次将需要上传的图片，放入到blog-Picture中的photos文件夹.图片的命名一定要遵循上述说的命名规则.<strong>注意</strong>：如果想让多张图片归类在页面中的某一个年、月份下，必须使得日期一模一样，只能修改xxx。如果命名中，年、月相同，而日期不同便会在相册页面额外生成一个list，其表头相同。</li><li>cmd命令窗口进入blog-Picture,再进行python tool.py，运行脚本.</li><li>将图片推送到github远端仓库，产生链接.</li><li>hexo s 进入本地窗口预览，没有问题后：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &#x2F;&#x2F;清除页面缓存</span><br><span class="line">hexo g &#x2F;&#x2F;用于生成改动的文件</span><br><span class="line">hexo d &#x2F;&#x2F;部署到远端网站</span><br></pre></td></tr></table></figure><btns rounded grid5><a href='https://Chemlez.github.io/photos/'><i class='fas fa-book'></i>最终效果</a></a></btns></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] hexo Yilia 主题如何添加相册功能:<a href="https://www.jianshu.com/p/a9f309aaa0e0" target="_blank" rel="noopener">https://www.jianshu.com/p/a9f309aaa0e0</a><br>[2] hexo yilia 主题如何添加相册:<a href="https://blog.csdn.net/qq_40651535/article/details/95061281" target="_blank" rel="noopener">https://blog.csdn.net/qq_40651535/article/details/95061281</a><br>[3] Hexo+Github实现相册功能:<a href="http://lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">http://lawlite.me/2017/04/13/Hexo-Github%E5%AE%9E%E7%8E%B0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
